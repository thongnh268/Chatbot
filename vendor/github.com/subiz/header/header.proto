syntax = "proto3";

package header;

option go_package = "github.com/subiz/header";

import "common.proto";
import "account.proto";
import "user.proto";
import "conversation.proto";
import "content.proto";
import "notibox.proto";
import "noti5.proto";
import "payment.proto";

message Attribute {
	string key = 4;

	int64 modified = 8;

	string value = 9; // json encode
	string text = 10;
	double number = 11;
	bool boolean = 12;
	string datetime = 13;
	repeated string list = 14; // remove

	string type = 16;
	string by = 17;

	// to update
	enum Ops {
		upsert = 0; // DEFAULT: update + insert, remove all other value
		replace = 2; // only write if existed, remove all other value
		insert = 3; // only write if not existed, remove all other value

		delete = 4; // delete specific elemnt match the value

		push = 5; // add a new value (for array) // unique
	}
	string action = 18;
}

message User {
	common.Context ctx = 1;
	string id = 3;
	string account_id = 4;

	repeated Attribute attributes = 18;
	// repeated Identification identifications = 39;
	UserSession session = 40;
}

message Users {
	repeated User users = 1;
	repeated common.Error errors = 2;
	string signature = 3;
	int64 hit = 4;
	int64 total = 5;
}

message SessionCampaign {
	string name = 2;
	string source = 3;
	string medium = 4;
	string term = 5;
	string content = 6;
}

message CountTotalRequest {
	common.Context ctx = 1;
	string account_id = 2;
}

message CountTotalResponse {
	double total_user = 2;
}

message CountResponse {
	repeated int32 data = 3;
}

message CreateRequest {
	string challenge_id = 3;
	string answer = 4;
}

message UserSearchResult {
	common.Context ctx = 1;
	string account_id = 2;
	int64 total = 3;
	repeated User users = 4;
	string anchor = 5;
	repeated int32 unreads = 6; // only used when search my users
	map<string, int32> unread_counts = 7;
}

message DeleteAttrRequest {
	common.Context ctx = 1;
	string key = 2;
}

message AttributeDefinition {
	common.Context ctx = 1;
	string account_id = 2;
	string name = 3;
	string description = 4;
	string type = 5;
	enum AttributeType {
		text = 0;
		number = 1;
		boolean = 2;
		datetime = 3;
		list = 4; // remove
	}

	// repeated string options = 6;
	repeated string list_items = 6;

	string key = 7;

	string kind = 8;
	enum AttributeKind {
		system = 0; // only system read and write
		default = 1; // created but agent can write, but not remove
		custom = 2;
	}

	int64 updated = 9;
	string validator = 10; // email, name, decimal

	// common.I18nText name = 12;
	common.I18nText place_holder = 13;

	bool allow_multiples = 14;
}

message AttributeDefinitions {
	common.Context ctx = 1;
	repeated AttributeDefinition attributes = 2;
}

message UserCreateResult {
	string id = 3;
	string mask = 5;
}

message Identification {
	common.Context ctx = 1;
	string user_id = 3;
	string account_id = 4;
	string alias = 5;
	string value = 6;

	string channel = 9;
	string integration_id = 10;
	string source = 11;

	bool trusted = 12;
	int64 created = 13;

	repeated string user_ids = 14;
}

message Note {
	common.Context ctx = 1;
	string account_id = 2;
	string id = 3;

	string creator_id = 5;
	string text = 6;
	int64 created = 7;
	int64 updated = 8;

	string target_id = 9; // deprecated
	string target_type = 10; // deprecated

	repeated NoteLink links = 14; // generated by our service
}

message NoteLink {
	string id = 1;
	enum Type {
		conversation = 0; // link
		ticket = 1;
		deal = 2;
		user = 3; // target
	}
	string type = 2;
}

message Notes {
	common.Context ctx = 1;
	repeated Note notes = 3;
	string anchor = 4;
}

message ListNotesRequest {
	common.Context ctx = 1;
	string account_id = 2;
	string user_id = 3;
	string target_id = 4;
	int32 limit = 5;
	string anchor = 6;
	string keyword = 7;

	repeated NoteLink links = 8;
}

message DeleteNoteRequest {
	string account_id = 2;
	string target_id = 3;
	string id = 4;
}

message GetNoteRequest {
	string account_id = 2;
	string target_id = 3;
	string id = 4;
}

// TODO move params to common
message IntParams {
	int64 eq = 2;
	int64 neq = 3;
	int64 gt = 4;
	int64 gte = 5;
	int64 lt = 6;
	int64 lte = 7;
}

message StringParams {
	string eq = 2;
	repeated string in = 3;
	string contain = 4;
}

message IdParams {
	string id = 2;
	repeated string ids = 3;
}

message Params {
	repeated string args = 2;
}

message Location {
	string isp = 3;                 // filled
	string continent_name = 4;      // filled
	string country_code = 5;        // filled

	string city_name = 6;            // filled
	string country_name = 7;         // filled
	string continent_code = 8;      // filled
	float latitude = 9;             // filled
	float longitude = 10;            // filled
	string postal_code = 11;         // filled
}

message Locations {
	repeated Location locations = 2;
	repeated common.Error errors = 3;
}

message LocationParams {
	string query = 2;
	int64 limit = 3;
	string account_id = 4;
}

message Page {
	string id = 2;
	string name = 3;
	string url = 4;
}

message UserInfo {
	string id = 2;
	int64 updated = 3;
	User user = 4;
	Page viewing = 5;
	string source = 6;
	Location location = 7;
	int64 view_count = 8; // deprecated
	int64 duration = 9;
	int64 latest_event_created = 10;
	string user_session_id = 11;
	repeated Page view_pages = 12;
	int64 time_on_site = 13;
	bool is_focused = 14;
}

message UserInfoParams {
	string account_id = 15;
	string signature = 2;

	int32 limit = 3;
	int32 offset = 4;
	string order_by = 5;

	IdParams source = 6;
	IdParams page_id = 8;
	IdParams location_id = 7;

	IntParams view_count = 9;
	IntParams duration = 10;

	// location params
	StringParams country_code = 11;
	StringParams continent_code = 12;
	StringParams url = 13;
	IntParams time_on_site = 14;
}

message UserInfoData {
	repeated UserInfo data = 2;
}

enum HaveBeen {
	unknown = 0;
	increase = 1;
	decrease = 2;
	immutable = 3;
}

message UserMetric {
	string account_id = 2;
	int64 active_user_num = 3;
	string have_been = 5;
}

message SourceMetric {
	string account_id = 2;
	string source = 3; // direct, referring, organic,social, advertising
	int64 active_user_num = 4;
	string have_been = 5;
}

message LocationMetric {
	string account_id = 2;
	Location location = 3;
	int64 active_user_num = 4;
	string have_been = 5;
}

message PageMetric {
	string account_id = 2;
	Page page = 3;
	int64 active_user_num = 4;
	string have_been = 5;
}

message UserReport {
	string account_id = 2;
	UserMetric total_user = 3;
	repeated SourceMetric top_source = 4;
	repeated LocationMetric top_location = 5;
	repeated PageMetric top_page = 6;
}

message SourceMetrics {
	repeated SourceMetric source_metrics = 2;
}

message LocationMetrics {
	repeated LocationMetric location_metrics = 2;
}

message PageMetrics {
	repeated PageMetric page_metrics = 2;
}

///////////////////////
message Events {
	common.Context ctx = 1;
	repeated Event events = 4;
	int64 total = 2;
	string anchor = 3;
}

message Event {
	common.Context ctx = 1;
	string user_id = 2; // TODO: remove
	string id = 3;
	string account_id = 4; // TODO: remove
	int64 created = 8;
	string type = 9; // eventtype
	repeated string topics = 11; // TODO: remove
	string session_id = 12;
	common.By by = 50;
	message Data {
		account.Account account = 1;
		account.Agent agent = 2;
		Message message = 3;
		Conversation conversation = 4;
		Postback postback = 5;
		content.Content content = 6;
		Topic topic = 7;
		account.Presence presence = 8;
		User user = 10;
		UnreadTopic unread_topic = 11; // todo: remove
		// user.MyUser my_user = 12;
		notibox.Notification notification = 14;
		account.AgentPerm agent_perm = 16;
		account.GroupMember group_member = 17;
		account.AgentGroup group = 18;
		payment.Limit limit = 19;
		// user.Identification alias = 22;
		Note note = 23;
		conversation.Ticket ticket = 24;
		Automation automation = 25;
		Event event = 26;
		AutomationEvent automation_event = 30;
		notibox.Notibox notibox = 32;
		noti5.Setting notification_setting = 34;
		Rule rule = 36;
		AttributeDefinition user_attribute = 37;
		Tag tag = 38;
		UserMetric total_user = 39;
		Bot bot = 40;
		RunResponse bot_run_response = 41;
		Integration integration = 42;
		BotTerminated bot_terminated = 43;
	}
	Data data = 20;
}

message EventParams {
	string type = 2;
	string account_id = 3;
}

message ListUserEventsRequest {
	common.Context ctx = 1;
	string account_id = 2;
	string user_id = 3;
	string query = 4;
	string anchor = 5;
	int32 limit = 6;
	string category = 9;
}

message UserEvent {
	common.Context ctx = 1;
	string account_id = 3;
	string user_id = 4;
	Event event = 5;
	User user = 6;
}

message AutomationEvent {
	common.Context ctx = 1;
	string account_id = 3;
	string user_id = 4;
	Automation automation = 5;
	User user = 7;
	Event event = 9;
	AutomationAction action = 10;
}

message Automation {
	common.Context ctx = 1;
	string account_id = 2;
	string id = 3;
	string channel = 4; // deprecated
	string name = 5;
	string description = 6;
	user.SCondition condition = 8;

	int64 created = 9;
	int64 modified = 10;

	string state = 12;
	enum State {
		active = 0;
		inactive = 1;
	}

	string action_type = 13; // deprecated
	enum ActionType {
		conversation_message = 0;
		agent_notification = 1;
		//user_notification = 2;
		// automation_invite_message = 4;

		block_user = 5;
		user_notification = 8;
		user_webhook = 9;
		user_note = 10;

		conversation_webhook = 13;
		add_agent_to_conversation = 14;
		create_ticket = 15;
		conversation_tag = 16;
	}

	string action_data = 14; // deprecated
	string scope = 15; // deprecated
	enum AutomationScope {
		conversation = 0;
		user = 3;
	}

	bool cross_channel = 16; // deprecated
	string metadata = 17;

	repeated AutomationAction actions = 18;
	uint32 delay_sec = 19;
	string action_id = 20; // deprecated, prepare for migrate
}

message AutomationAction {
	enum ActionType {
		update_user_attribute = 0; // type user
		block_user = 1; // prop user
		merge_users = 3; // not yet defined
		notify_user = 4; // not yet defined
		send_email = 5; // prop email
		add_user_note = 6; // note
		create_conversation = 7; // events, integration_id
		send_message = 8; // event
		assign_agent_to_conversation = 9; // prop agent_ids
		convert_conversation_to_ticket = 10; // no prop
		tag_conversation = 11; // tag_ids
		send_webhook = 12; // not yet defined
		open_widget_screen = 14; // not yet defined
		add_user_to_segmentation = 15; // segmentation_id
		remove_user_from_segmentation = 16; // segmentation_id
		send_chat_transcript_email = 17; // prop email
		update_conversation_state = 18; // prop conversation_state
		send_facebook_direct_message = 19; // prop event and facebook_page_id
	}
	string type = 2;

	User user = 4;
	Email email = 5;
	Note user_note = 6;
	Event event = 7;
	string agent_id = 8; // deprecated
	string tag_id = 9; // deprecated
	repeated Event events = 10;
	conversation.Ticket ticket = 11;
	string integration_id = 12;
	string segmentation_id = 13;
	repeated string agent_ids = 14;
	repeated string tag_ids = 15;
	string scope = 16;
	string conversation_state = 17;
	string id = 18; // required, generated by subiz to check whether an action is performed or not
	string webhook_id = 19;
	AutomationWebhookSetting webhook_setting = 20;
	uint32 delay_sec = 21;
	string facebook_page_id = 22;
}

message AutomationWebhookSetting {
	bool account = 1;
	bool agent = 2;
	bool message = 3;
	bool conversation = 4;
	bool postback = 5;
	bool content = 6;
	bool user = 10;
	bool group = 18;
	bool limit = 19;
	bool user_attribute = 20;
	bool note = 23;
	bool ticket = 24;
	bool automation = 25;
	bool event = 26;
}

message Automations {
	common.Context ctx = 1;
	repeated Automation automations = 2;
}

message AutomationCheck {
	string account_id = 2;
	string automation_id = 3;
	string user_id = 4;
	string event_id = 5;
	string scope = 6;
}

message Topic {
	common.Context ctx = 1;
	string account_id = 2;
	string topic = 3;

	string type = 5;
	int64 updated = 8;
	int32 unread = 9; // deprecated by is_read
	string user_id = 10;
	string agent_id = 11;

	Event by_event = 14;
	bool is_muted = 15;
	bool is_read = 16;
}

message UnreadTopic { // todo: delete this, unread is just topic_updated with is_read=false
	common.Context ctx = 1;
	string topic = 3;
	string agent_id = 4;
	string user_id = 5;
	string type = 6;
	int64 updated = 8;
	int32 unread = 9;
	Event by_event = 10;
}

message SourceTrace {
	common.Context ctx = 1;
	string referrer = 2;
	string source_referrer = 3;
}

message UserSession {
	common.Context ctx = 1;
	string account_id = 2;
	string user_id = 3;
	string id = 4;

	Event start_event = 5;
	Event latest_event = 6;

	string ip = 7;
	string city_name = 8;            // derived from ip
	string country_name = 9;         // derived from ip
	string continent_code = 10;      // derived from ip
	float latitude = 12;             // derived from ip
	float longitude = 13;            // derived from ip
	string postal_code = 14;         // derived from ip

	string timezone = 16;

	string isp = 17;                 // derived from ip
	string continent_name = 18;      // derived from ip
	string country_code = 19;        // derived from ip

	string platform = 20;

	string device_type = 21;         // filled
	enum DeviceType {
		unknown = 0;
		mobile = 1;
		tablet = 2;
		desktop = 3;
	}

	string browser_name = 22;        // filled
	string language = 23;
	string user_agent = 24;
	string screen_resolution = 25;

	string ga_client_id = 26;
	repeated string ga_tracking_ids = 27;
	enum AdsNetwork {
		google_adwords = 0;
	}
	string ads_network = 28;

	repeated SessionCampaign campaigns = 29;

	repeated SourceTrace source_traces = 39;
	string referrer = 32;
	string destination_referrer = 38;
	enum Source {
		direct = 0;
		referring = 1;
		organic = 2;
		social = 3;
		advertising = 4;
	}
	string source = 33;

	Event latest_content_view = 34; // read only, do not persist
	int64 total_content_views = 35; // read only, do not persist

	float lead_score = 36;
	int64 time_on_site = 37;
}

message AvailabilityCheckRequest {
	common.Context ctx = 1;
	string integration_id = 3;
	User user = 4;
	string account_id = 5;
	string user_id = 6;
}

message AvailabilityCheckResult {
	common.Context ctx = 1;
	bool availability = 2;
	string reason = 3;
	string payload = 5;
	string integration_id = 6;
	string account_id = 7;
}

message StartRequest {
	common.Context ctx = 1;

	string account_id = 3;
	int64 created = 13;
	string conversation_id = 14;

	User user = 25;
	string integration_id = 26;
	string chain_id = 27;
	string message = 30;
	repeated ConversationMember members = 31;
	string group_id = 32;

	string state = 33; // default is pending, should be active if dont want routing
}

message PresencesRequest {
	common.Context ctx = 1;
	repeated string user_ids = 2;
	string account_id = 3;
}

message PresencesResponse {
	repeated string online_user_ids = 2;
	repeated string focused_user_ids = 3;
}

message LeadSearchRequest {
	common.Context ctx = 1;
	string account_id = 2;

	string query = 4;
	string anchor = 5;
	int32 limit = 6;
	user.SCondition condition = 10;
	repeated UserAttributeCondition conditions = 11;
	int64 unix_hour = 12;
	repeated string fields = 13;

	string order_by_field = 7; // -fullname
}

message LeadSearchResult {
	common.Context ctx = 1;
	string account_id = 2;
	int64 total = 3;
	repeated User users = 4;
	string anchor = 5;
}

message UserReportRequest {
	common.Context ctx = 1;
	string account_id = 2;

	string first_interact = 3;
	string channel = 4;
	string channel_source = 5;

	string agent = 6; // by agent id

	string range = 8; // hour, day, week, month by account timezone
	int64 start_hour = 9; // unix hour
	int64 points = 10; // < 60

	repeated string first_interacts = 12;
	repeated string channel_sources = 13;
}

message UserReportResult {
	common.Context ctx = 1;
	string account_id = 2;

	repeated int64 milestones = 3;
	repeated int64 prev_milestones = 13;

	repeated int64 user_counts = 4;
	repeated int64 lead_counts = 5;
	repeated int64 quanlified_lead_counts = 6;

	repeated UserReportTable channels = 8;
	repeated UserReportTable first_interacts = 9;
	repeated UserReportTable channel_sources = 14;

	repeated int64 prev_user_counts = 10;
	repeated int64 prev_lead_counts = 11;
 	repeated int64 prev_quanlified_lead_counts = 12;
}

message UserReportTable {
	string name = 2;
	int64 user_count = 4;
	int64 prev_user_count = 5;

	int64 lead_count = 6;
	int64 prev_lead_count = 7;

	int64 quanlified_lead_count = 8;
	int64 prev_quanlified_lead_count = 9;
}

message BotEventCreated {
	common.Context ctx = 1;
	string account_id = 2;
	string bot_id = 3;
	string conversation_id = 4;
	string user_id = 5; // optional

	Event event = 6;
	int64 created = 8; // in millisecond
}

message RunRequest {
	common.Context ctx = 1;
	// require
	string account_id = 2;
	string bot_id = 3;
	string object_type = 4; // conversations
	string object_id = 5; // conversation_id

	// user_id is inside this
	repeated common.KV object_contexts = 14;

	// optional
	string mode = 6;
	Bot bot = 7;
	string action_id = 8;
	Action action = 9;

	// internal use only
	string bot_run_type = 15;
	string action_run_type = 16;

	// payload
	int64 created = 10;
	Event event = 11;
	string bot_trigger_type = 12;
}

message RunResponse {
	string account_id = 2;
	string bot_id = 3;
	string object_type = 4;
	string object_id = 5;

	string exec_bot_id = 8;
	string exec_bot_state = 9;

	string action_id = 16;
	string action_state = 17;
}

message Rule {
	common.Context ctx = 1;
	string id = 2;
	string account_id = 3;
	int32 priority = 4;
	enum AssignStrategy {
		all_agents = 0;
		agentgroup = 2;
		agents = 3;
		most_recent = 4;
		roundrobin_all_agents = 5;
		roundrobin_agents = 6;

		first_reply = 7; // list of agent
		first_reply_of_all = 8; // all agent
		first_reply_of_group = 9; // group

		bot = 10;
	}
	string strategy = 5;
	repeated string assign_tos = 6;
	bool enabled = 8;
	int64 created = 9;
	int64 modified = 12;
	string name = 10;
	string description = 11;
	bool available_agents_only = 13; // strategy
	// optional SCondition condition = 14;

	// new condition
	ChannelCondition channel_condition = 15;
	TimmingCondition timming_condition = 16;
	bool user_has_replied_before = 18; // new
	repeated UserAttributeCondition user_conditions = 19;
	bool when_offline = 21; // only run when there is no online agent

	int64 v = 22; // version
}

message TimmingCondition {
	string business_hour = 3; // [in, notIn] if this is true, ignore all other timming conditions
	repeated string days_of_week = 2; // Monday, Tuesday, Wednesday, Thursday, Friday, Saturday, Sunday
	repeated int32 minute_of_days = 4; // pair [0-4] [6-9]
}

message ChannelCondition {
	repeated string channels = 2; // default: all channel

	// for fb comment
	// for messenger
	// for zalo
	repeated string integration_ids = 3; // optional for subiz and email

	// for subiz only
	repeated LocationCondition locations = 4; // or
	repeated LocationCondition not_in_locations = 13; // or
	repeated string page_urls = 5;
	repeated string device_types = 7; // desktop, mobile, tablet

	// for email only
	repeated string email_tos = 10; // contains
	repeated string email_froms = 11; // contains
	repeated string email_subjects = 12;  // contains
}

message LocationCondition {
	string city_name = 3; // must equal
	string country_code = 4; // must equal
}

message Route {
	common.Context ctx = 1;
	repeated Rule rules = 2;
}

message RouteResult {
	string rule_id = 1;
	string strategy = 3;
	repeated string agent_ids = 4;
	string group_id = 5;
	string state = 6;
	int64 assigned = 7; // ms

	string bot_id = 8; // strategy == bot
}

message ConversationMember {
	common.Context ctx = 1;
	string account_id = 2;
	string type = 3; // type

	string subiz_id = 8;
	string id = 4;
	string name = 10;
	string avatar_url = 6;

	string conversation_id = 13;
	repeated common.KV fields = 14;
	string last_page_view_url = 15;
	string membership = 12;
	enum State {
		active = 0;
		left = 1;
		observer = 2; // assigned
	};
	common.By invited_by = 16;

	int64 left_at = 17;
	int64 joined_at = 18; // ms
	int64 first_message_at = 19; // ms
}

message ListConversationsRequest {
	common.Context ctx = 1;
	string account_id = 3;
	//   string state = 4; // empty or unassigned
	string member_id = 8; // ignore
	//   string group_by = 9;
	string integration_id = 10;
	string user_id = 11;
	int32 limit = 5;
	string anchor = 6;

	string agent_id = 12; // list conversations of agent

	repeated string user_ids = 13; // for live, only return id and state

	string state = 14;
}

message ListConversationEventsRequest {
	common.Context ctx = 1;
	string account_id = 2;
	string conversation_id = 3;
	string start_id = 4;
	int32 limit = 6;
}

message Chain {
	string account_id = 2;
	string id = 3;
	string conversation_id = 4;
}

enum ConvoState {
	none = 0; // convo
	unassigned = 2; // convo
	active = 6; // convo
	ended = 8; // convo
	pending = 9; // ticket and convo

	all = 10; // ticket
	open = 11; // ticket
	resolved = 13; // ticket
	closed = 14; // ticket

	waiting_for_reply = 15; // waiting for reply
}

message Conversation {
	common.Context ctx = 1;
	string id = 2;
	string account_id = 3;
	int64 created = 4;
	repeated ConversationMember members = 7;
	repeated Tag tags = 10;
	int64 ended = 12;
	string state = 11; // converation state

	Integration integration = 18;
	int64 actived = 19;
	string last_message_id = 21; // internal use only
	Message last_message = 20;

	Event last_message_sent = 23;
	string initial_by = 25; // agent_id || popup || user || bot

	int64 response_sec = 22;

	string chain_id = 24;
	conversation.Ticket ticket = 27;
	string ticket_id = 28; // remove
	RouteResult assigned_to = 30;

	string first_message = 31;
	string subject = 32;

	repeated common.KV fields = 33;
	repeated Rating ratings = 35;

	string source = 36; // indicate where does the conversation happended (url)

	// my field
	string agent_id = 40;
	bool mute = 41; // true, false
	bool read = 42; // true, false
	bool watch = 44; // true

	int64 updated = 43;
}

message Rating {
	int64 rated = 35; // rated time ms
	int32 rating = 36; // 1-poor 2 3-average 4 5-great
	string rated_by = 37; // must be an user id
	bool no_rating = 38; // use dont want to rate
	string comment = 39;
}

message Conversations {
	common.Context ctx = 1;
	repeated Conversation conversations = 3;
	string anchor = 4;
	repeated string user_ids = 5;
	repeated common.Error errors = 6;
}

message Message {
	common.Context ctx = 1;
	string account_id = 5;
	string conversation_id = 14;
	string id = 11;
	string text = 2;
	common.I18nText i18n_text = 19;

	string format = 3;
	repeated Attachment attachments = 4;

	repeated common.KV fields =	10;

	string integration_id = 15;
	string chain_id = 16;

	// used for reaction and delivery status, could be ignore
	repeated MessagePong pongs = 17;

	string quill_delta = 20;
}

message MessagePong {
	string member_id = 3;

	enum Type {
		n = 0;
		ack = 1;
		seen = 2;
		receive = 3; // deliverd to client machine
		delete = 4;
		like = 5;
		love = 6;
		haha = 7;
		wow = 8;
		sad = 9;
		angry = 10;
		remove_like = 11;
		remove_love = 12;
		remove_wow = 13;
		remove_haha = 14;
		remove_sad = 15;
		remove_angry = 16;
		hide = 17;
		remove_hide = 18;
		open = 19; // email opened
	}
	string type = 4;

	int64 created = 5;
	string ack_error = 6; // used in ack
	int64 count =  7;
}

message MessageButton {
	enum ButtonType {
		unknown = 0;
		url_button = 2;
		postback_button = 3;
		message_button = 4;
		call_button = 5;
		widget_ask_desktop_notify_button = 6;
		widget_ask_contact_info_button = 7;
	}

	string type = 2;

	string id = 15;
	// post back
	string title = 3;
	string payload = 4;
	string image_url = 5;
	string content_id = 10;
	//	optional RawEvent event = 12;
	string url = 14;

	string phone_number = 16;
	Message message = 17;
	string webview_size = 18; // fb
}

message AskInfomationAnswer {
	string message_id = 2;
	string answer = 3;
}

message AskInfomation {
	string question = 2;
	string input_type = 3;
	string key = 4; // user.name user.phone
	string answer = 5;
	int64 answered = 6;
	enum InputType {
		phone = 0;
		email = 1;
		text = 2;
		password = 3;
		number = 4;
		date = 5;
		color = 6;
		location = 7;
		time = 8;
		url = 9;
	}
}

message ContentTemplate {
	string image_url = 2;
	string description = 5;
	string title = 6;
	string url = 7;
	repeated string labels = 8;
	enum Availability {
		in_stock = 0;
		out_of_stock = 1;
		preorder = 2;
		discontinued = 3;
	}
	string availability = 9;

	float price = 10;
	string currency = 11;
	float sale_price = 12;

	repeated string categories = 14;
	repeated string attachment_urls = 20;
	repeated string related_ids = 21; // releated content ids

	MessageButton default_action = 22;
	repeated MessageButton buttons = 23;
	string id = 24;
}

message GenericElementTemplate {
	string title = 2;
	string image_url = 3;
	string subtitle = 4;
	MessageButton default_action = 5;
	repeated MessageButton buttons = 6;

	string id = 7; // fb product id
}

enum AttachmentType {
	nothing = 0;
	file = 2;
	generic = 3;
	preview = 4;
	button = 5;
	input = 6;
	ask_info_form = 7;
	ask_info_form_answer = 8;
	form = 9;
	form_submit = 10;
	fallback = 11;
	content_template = 12;
	quick_replies = 13;
	command = 14; // request_user_info
	link = 15;
}

message Attachment {
	string type = 12;
	// file
	string mimetype = 2;
	string url = 3;
	string thumbnail_url = 4;
	string name = 5;
	string description = 6;
	//  string data = 7; // for custom data
	int32 length = 15;
	int32 size = 13; // byte

	// generic
	repeated GenericElementTemplate elements = 8;

	// preview
	string title = 9;
	string color = 10;
	string pretext = 11;

	repeated MessageButton buttons = 16;
	AskInfomation ask_info = 17;
	AskInfomationAnswer ask_info_answer = 18;
	//repeated string inputtype = 17;

	MessageForm form = 20;
	MessageFormSubmit form_submit = 21;

	// content template
	repeated ContentTemplate contents = 22;

	repeated QuickReply quick_replies = 23;
	bool lock_input = 24; // lock input while has quick replies
}

message QuickReply {
	string content_type = 2; // should be 'text'
	string title = 3;
	string payload = 4;
	string image_url = 5;
}

message MessageForm {
	string title = 2;
	string state = 3;
	repeated MessageFormField fields = 4;
	string submit_url = 5;
}

message MessageFormSubmit {
	string form_message_id = 2;
	repeated MessageFormField fields = 3;
	string state = 4;
}

message MessageFormField {
	enum InputType {
		text = 0;
		datetime = 1;
		list = 2;
		number = 3;
		boolean = 4;
	}
	string input_type = 2;
	repeated string items = 3;
	string state = 4;
	string title = 5;
	string image_url = 6;
	string name = 7;
	string answer = 8;
	int64 answered = 9;
}

message Tag {
	common.Context ctx = 1;
	string id = 2;
	string account_id = 3;
	string title = 4;
	int64 created = 5;
	int64 modified = 6;
	string creator_id = 7;
	string color = 8;
}

message TemplateData {
	string type = 4;
	string key = 2;
	repeated string ids = 3;
}

message Template {
	common.Context ctx = 1;
	string id = 2;
	string account_id = 3;
	repeated string keys = 6;
	string channel_type = 17;
	Message message = 8;
	repeated TemplateData data = 18;
	bool is_public = 11;
	int64 created = 12;
	int64 modified = 13;
	string creator = 14;
	int64 latest_picked = 15;
}

message SearchTemplate {
	common.Context ctx = 1;
	string anchor = 2;
	int32 limit = 3;
	string account_id = 5;
	string order_by = 6; // latest_picked
}

message Templates {
	common.Context ctx = 1;
	repeated Template templates = 2;
	string anchor = 3;
	int64 total = 4;
}

message Tags {
	common.Context ctx = 1;
	repeated Tag tags = 4;
}

message Postback {
	Message message = 2;
	MessageButton button = 3;
}

message Integrations {
	common.Context ctx = 1;
	string account_id = 2;
	repeated Integration integrations = 3;
}

message Integration {
	common.Context ctx = 1;
	string account_id = 2;
	string connector_id = 3;
	string logo_url = 4;
	string name = 5;

	string connector_type = 12; // see client.Client_ChannelType
	int64 integrated = 6;
	// int64 updated = 7;

	string state = 8;
	enum State {
		disabled = 0;
		activated = 1; // activeated and insync
		failed = 2;
		deleted = 3;
	}
	string id = 10; // generated by connector, must be format of accid.XXX.connectorid

	int64 created = 11;
	string integrated_by = 13;
	int64 last_failed = 14;
}

message SearchMessageRequest {
	common.Context ctx = 1;
	string account_id = 2;
	string conversation_id = 3;
	string user_ids = 4;
	string query = 5;
	string anchor = 6;
	int32 limit = 7;
}

message TagRequest {
	common.Context ctx = 1;
	string account_id = 2;
	string conversation_id = 3;
	string id = 4;
}

message AssignRequest {
	common.Context ctx = 1;
	string account_id = 2;
	string conversation_id = 3;
	string user_id = 4;
	bool use_rule = 5;

	string strategy = 6;
	repeated string assign_tos = 7;
	bool available_agents_only = 8; // strategy

	int64 agent_reply_timeout = 9; // sec
}

message EndchatConnectorSetting {
	string connector_id = 3;
	bool at_midnight = 4;
	int64 after_inactivity_mins = 6;
	bool enabled = 11;
	bool custom = 12;
}

message EndchatSetting {
	string account_id = 2;
	repeated EndchatConnectorSetting connector_settings = 3;
	EndchatConnectorSetting global_setting = 4;
	int64 updated = 5;
}

message Trigger {
	string type = 3; // conversation_assigned, conversation_start, area_clicked (web only), scrolling_percentage (web only), inactivity_duration (web only), after_pageview (web only), after_js_event (web only)
	string area_clicked_css_selector = 4; // .user_name #user
	float scrolling_percentage = 6; // 0.55
	int64 inactivity_sec = 8; // 50s
	int64 after_pageview_sec = 9; // 50s
	bool disabled = 10;
}

message BotRequest {
	common.Context ctx = 1;
	string account_id = 2;
	string bot_id = 3;
	string conversation_id = 4;
	string user_id = 5;
	string event_id = 6;
	string type = 7; // start, terminate
	int64 created = 8; // in millisecond
}

message BotCondition {
	string key = 1; // url, browser, location, returning_visitor, device_type, referer, source, user_attribute, timming, integration_id, offline, user_is_a_contact

	enum Source {
		direct = 0;
		google_ads = 1;
		organic = 2;
	}

	repeated string sources = 2;

	enum DeviveType {
		desktop = 0;
		mobile = 1;
		tablet = 2;
	}
	repeated string device_types = 3;

	enum Browser {
		all = 0;
		chrome = 1;
		firefox = 2;
		edge = 3;
		ie = 4;
		safari = 5;
		other = 6;
	}
	repeated string browsers = 4;

	repeated string referers = 6; // referer
	repeated string exclude_referers = 9; // referrer

	repeated string urls = 10; // url, url_term, url_medium, ... (or only)
	repeated string exclude_urls = 11; // url (or only)

	repeated string has_visited_url = 12; // url (or only)
	repeated string has_not_visited_urls = 13; // url (or only)

	repeated LocationCondition locations = 14; // or
	repeated LocationCondition exclude_locations = 15; // or

	// timming
	string business_hour = 20; // [in, notIn] if this is true, ignore all other timming conditions
	repeated string days_of_week = 21; // Monday, Tuesday, Wednesday, Thursday, Friday, Saturday, Sunday
	repeated int32 minutes_of_day = 22; // pair [0-4] [6-9]

	// user
	UserAttributeCondition user = 23; // user_attribute

	repeated string integration_ids = 24; // optional for subiz and email

	// offline
	bool offline = 25; // only run when there is no online agent

	bool returning_visitor = 26;

	bool user_is_a_contact = 27; // has a way to re-connnect to user (email or phone)
}

message UserAttributeCondition {
	string key = 2;
	string operator = 3;
	string value = 4;
}

message Bot {
	common.Context ctx = 1;
	string account_id = 2;
	string id = 3;
	string fullname = 4;
	string job_title = 19;
	string avatar_url = 5;

	string category = 6;

	string state = 7; // like agent state: active, inactive, deleted

	Action action = 9; // point to root action

	int64 created = 10;
	string created_by = 11;

	int64 updated = 12;
	string updated_by = 13;

	repeated Trigger triggers = 14;

	Frequently initiative_frequency = 15;

	repeated BotCondition conditions = 16;
	repeated string channels = 17; // default: all channel

	string bot_state = 18; // active, inactive

	int64 last_executed = 20; // ms
	string bot_type = 21; // hello, lead, operator
	string action_hash = 22; // hex of sha1

	string version = 23;
	string template_data = 24;
	int64 count_lead_in_last_7_days = 25;
	int64 count_conv_in_last_7_days = 26;
}

message Bots {
	common.Context ctx = 1;
	repeated Bot bots = 2;
}

enum BotCategory {
	users = 0;
	systems = 1;
	conversations = 2;
}

enum ActionType {
	nil = 0;
	condition = 1;
	sleep = 2;
	send_message = 3;
	jump = 4;
	send_email = 5;
	convert_to_ticket = 7;
	send_webhook = 8;
	update_conversation = 11;
	question = 12;
	update_user = 13;
	assign = 14;
	send_http = 15;
	switch_language = 16;
	ask_question = 18;
	end_bot = 19;

	reply_facebook_comment = 20;
	like_facebook_comment = 21;
	hide_facebook_comment = 22;
	send_facebook_private_reply = 23;
}

message NextAction {
	Condition condition = 2;
	Action action = 3; // pointed to the next action or used for branching to multiple actions
}

message Action {
	string account_id = 2;
	string bot_id = 3;
	string id = 4;
	string name = 5;

	// first action require trigger
	repeated NextAction nexts = 8;
	string type = 9; // send_email, tag, convert_to_ticket, condition, sleep, send_webhook

	ActionSleep sleep = 13; // deprecated

	ActionJump jump = 15;
	ActionSwitchLanguage switch_language = 16;
	ActionSendHttp send_http = 17;
	ActionAskQuestion ask_question = 18;
	AssignRequest assign = 19;

	int64 delay_sec = 20;
	ActionUpdateConversation update_conversation = 21;
	bytes internal_state = 30;

	ActionReplyFacebookComment reply_facebook_comment = 22;
	ActionSendFacebookPrivateReply send_facebook_private_reply = 23;
}

message ActionReplyFacebookComment {
	Message message = 3;
}

message ActionSendFacebookPrivateReply {
	Message message = 3;
}

message ActionUpdateConversation {
	repeated string tag_ids = 2;
	repeated string untag_ids = 3;
	bool end_conversation = 4;
}

message ActionJump {
	string action_id = 2;
	bool to_first_action = 3;
}

message ActionSwitchLanguage {
}

message ActionSendHttp {
	string url = 2;
	// string payload = 3;
	string method = 4;
	repeated common.KV header = 5;
	string quill_delta = 6;
}

message ActionAskQuestion {
	bool wait_for_user_response = 2;

	repeated Message messages = 3;
	bool allow_open_response = 4;

	string save_to_attribute = 5;

	string validation = 6; // none, email, phone, date, link, number, regex
	string validation_regex = 7;

	bool skip_if_attribute_already_existed = 11;

	Message resume_message = 15;
	int64 resume_interval = 16; // sec
	bool use_resume_message = 17;

	// retry forever

	int32 retry = 18; // != 1 => 0 retry, 1 retry forever
}

message ActionSleep {
	int64 duration = 4;
}

message Condition {
	enum Group {
		single = 0;
		all = 1;
		any = 2;
	}
	string group = 2;
	repeated Condition conditions = 3; // only availabe if group is all or any

	// only avaiable if group is single
	string key = 5; // unique, path to properties, for example: last_response, agent_reply, data.conversation.text, global.agent.avaliablitiy...
	string type = 6; // string, number, boolean

	common.NumberParams number = 7;
	common.StringParams string = 8;
	common.BooleanParams boolean = 9;

	enum Function {
		minute_of_day = 0;
		hour_of_day = 1;
		day_of_week = 2;
		day_ago = 3;
		valid = 5;
	}

	string transform_function = 19; // used to transform value of left side before evaluate expression
	string name  = 20; // front end used only
}

message Actions {
	common.Context ctx = 1;
	repeated Action actions = 2;
}

message Metric {
	repeated Metric submetrics = 5;
	int64 date_dim = 2;
	string object_type = 3; // all if empty
	int64 count = 4;
	int64 object_count = 6;
	int64 lead_count = 7;
}

message ReportBotRequest {
	string account_id = 2;
	string bot_id = 3;
	int64 day_from = 4;
	int64 day_to = 5;
}

message ReportBotResponse {
	repeated Metric metrics = 2;
}

message ListObjectId {
	string object_type = 2;
	repeated string object_ids = 5;
}

message ListObjectsRequest {
	string account_id = 2;
	string bot_id = 3;
	int64 day_from = 4;
	int64 day_to = 5;
}

message ListObjectsResponse {
	repeated ListObjectId list = 2;
}

message Frequently {
	bool once_per_user = 2;
	bool once_per_session = 3;
	int64 interval_sec = 4; // dont do twice between those seconds
}


////////////////////

message RealtimeSubscription {
	common.Context ctx = 1;
	string initial_token = 2;
	repeated string events = 3;

	string host = 5; // notify client about the wrong host
}

message PollResult {
	repeated Event events = 4;
	string sequential_token = 6;

	string host = 7; // notify client about the wrong host
}

message RealtimeMeta {
	common.Context ctx = 1;
	enum Type {
		tombstone = 0; // mark that connection is dead
	}
	string type = 2;
	int64 created = 3;
	int64 expired = 4; // unix_sec

	string connection_id = 10;
}

message RealtimeToken {
	string account_id = 2;
	string connection_id = 4;
	int64 last_offset = 5;
	int64 created = 6;
	int64 expired = 7;

	int64 last_polled = 8;
	int64 package_size = 9;

	string group_id = 10;
	string group_par = 11;
}

message PublishMessage {
	common.Context ctx = 1;

	repeated string topics = 2;
	bytes payload = 4;

	string account_id = 5;
}


// SEARCH
message SearchUsersRequest {
	common.Context ctx = 1;
	string account_id = 2;
	int64 limit = 3;
	string anchor = 4;
	user.SCondition condition = 7;
}

message SearchUsersResponse {
	int64 total = 2;
	string anchor = 3;
	repeated User users = 4;
}

message SearchNotesRequest {
	common.Context ctx = 1;
	string account_id = 2;
	int64 limit = 7;
	string anchor = 8;
	user.SCondition condition = 9;
}

message SearchNotesResponse {
	int64 total = 2;
	string anchor = 3;
	repeated Note notes = 4;
}

message SearchTicketsRequest {
	common.Context ctx = 1;
	string account_id = 2;
	string order_by = 3; // created, duedate
	string anchor = 4;
	int64 limit = 5;
	user.SCondition condition = 6;
}

message SearchTicketsResponse {
	int64 total = 2;
	string anchor = 3;
	repeated conversation.Ticket tickets = 4;
}

message ExportUsersRequest {
	common.Context ctx = 1;
	string account_id = 2;
	repeated string emails = 3; // send to this emails
	repeated string attribute_keys = 4; // exported attributes
	string email_subject = 5;
	string language_code = 6;
	user.SCondition condition = 8;
	repeated string ids = 9; // export selected users only, ignore condition
}

// widget
message WidgetUserSetting {
	common.Context ctx = 1;
	account.Account account = 3;
	string account_id = 2; // subiz use only
	User user = 4;
	string user_id = 7; // subiz use only
	bool sound_enabled = 5;
	string language = 6;
	bool send_transcript = 8;
	WidgetSetting account_setting = 9;
	bool desktop_notification = 10;
	repeated Campaign campaigns = 13;
	repeated Bot bots = 14; // remove action
}

message SocialLink {
	string type = 1; // facebook, viber, subiz, email, ...
	string url = 2;
}

message WidgetHeader {
	string layout = 2;
	enum HeaderLayout {
		team = 0;
		social = 1;
	}

	// for social layout only
	repeated SocialLink links = 3;

	// agents whose avatar will be display in the header
	repeated string agent_ids = 4;
}

message WidgetSetting {
	common.Context ctx = 1;
	string account_id = 2;
	string widget_version = 3;
	string language = 5;
	string custom_language = 6; // write-only
	repeated account.Agent agents = 7;
	repeated string agent_ids = 8; // subiz only
	//   string css_url = 9; // old version
	//   string custom_css_url = 10; // deprecated
	int32 replytime = 11; // deprecated
	// k  string css = 12; // communication client to server
	//   string style_url = 13;
	// read-only, tell whether account is ready for chat or not
	bool is_online = 14;
	bool is_in_business_hour = 34;

	string window_mode = 15;
	enum WindowMode {
		mini = 0;
		full = 1;
	}

	WidgetHeader header = 16;
	int32 height = 17;
	int32 width = 18;
	string primary_color = 19;
	string secondary_color = 20;
	string background = 21;
	string text_color = 22;
	WidgetForm offline_form = 23;
	WidgetForm prechat_form = 24;
	WidgetChatButton desktop_button = 25;
	WidgetChatButton mobile_button = 26;
	WidgetGreeting greeting = 27;
	string title = 28;
	string introduction = 29;
	string custom_language_url = 31;
	string language_url = 32;
	bool auto_request_rating = 33;
}

message WidgetField {
	string key = 1;
	string label = 2;
	bool is_required = 3;

	// so front end dont have to download attribute definitions
	string type = 5;

	repeated string list = 6; // available option for field

	string subtype = 8; // phone, email, rating
	bool multiple_choice = 9;
	bool multiline_text = 10;
	string placeholder = 11;

	bool is_user_attribute = 12;

	string value = 13;
}

message WidgetGroup {
	string id = 1;
	string name = 2;
}

message WidgetForm {
	repeated WidgetField fields = 1;

	bool group_required = 2;
	repeated WidgetGroup groups = 3;
	string group_label = 4;

	string title = 5;
	bool enabled = 6;
	bool end_conversation_after_submit = 7;
	string enable_when = 8;
	enum When {
		all_agents_offline = 0;
		out_of_bussiness_hour = 1;
	}

	bool question_required = 10;
	string question_label = 11;
}

message WidgetChatButton {
	string background_image_url = 1;
	string background_mask_url = 11;

	int32 width = 2;
	int32 height = 3;
	string background = 4;
	int32 margin_x  = 5;
	int32 margin_y = 6;
	string position = 7;

	enum ButtonPosition {
		left = 0;
		right = 1;
	}
	bool default_style = 8;
	string background_border_radius = 9;
	bool hidden = 10;
}

message WidgetGreeting {
	string message = 2;
	bool enabled = 4;
	string agent_id = 5;
}

////////////// CAMPAIGN //////////////
message CampaignTrigger {
	string type = 3; // exit_intent, area_clicked, scrolling_percentage, inactivity_duration, after_pageview, after_js_event
	string area_clicked_css_selector = 4; // .user_name #user
	float scrolling_percentage = 6; // 0.55
	int64 inactivity_sec = 8; // 50s
	int64 after_pageview_sec = 9; // 50s
	bool disabled = 10;
}

message CampaignSchedulerCondition {
	int64 start_time = 4;
	int64 end_time = 5;
	repeated string days_of_week = 6; // Monday, Tuesday, Wednesday, Thursday, Friday, Saturday, Sunday

	int64 start_minute_day = 7; // minute of day
	int64 end_minute_day = 8; // minute of day

	string timezone_offset = 9; // if empty, take current timezone
}

message CampaignCondition {
	string key = 3; // url, browser, country_code, city, returning_visitor, page_view_count, os, device, device_type, referrer, source, source_referer, /*ip_ranges*/, language, utm_campaign, utm_content, utm_medium, utm_source, utm_term, time_on_page, user_attribute

	enum Source {
		direct = 0;
		google_ads = 1;
		organic = 2;
	}

	enum DeviveType {
		desktop = 0;
		mobile = 1;
		tablet = 2;
	}

	enum Browser {
		all = 0;
		chrome = 1;
		firefox = 2;
		edge = 3;
		ie = 4;
		safari = 5;
		other = 6;
	}

	// for rate limiting
	// int64 frequency_times = 11; // number of time display the message
	// int64 frequency_duration = 11; // per duration (1 message per hour || 10 messages per day)


	string user_attribute_key = 34;

	string operator = 40; // eq, ne, con, notCon, in, gt, gte, lt, lte, inRange, notInRange, begin, end
	string value = 41;
}

message CampaignSegmentation {
	repeated CampaignCondition conditions = 4;
	repeated CampaignCondition source_conditions = 6; // source, source_referer (or only)
	repeated CampaignCondition location_conditions = 7; // city, country_code (or only)

	repeated CampaignCondition url_conditions = 8; // url, url_term, url_medium, ... (or only)
	repeated CampaignCondition exclude_url_conditions = 9; // url (or only)

	repeated CampaignCondition has_visited_url_conditions = 10; // url (or only)
	repeated CampaignCondition has_not_visited_url_conditions = 11; // url (or only)

	string join = 5; // and | or

	bool disabled = 12;
	repeated CampaignCondition exclude_location_conditions = 13; // city, country_code (or only)

}

message Campaigns {
	repeated Campaign campaigns = 3;
}

message CampaignNotification {
	//   email.Email email = 1;
	bool enabled = 2;
	string sender_id = 4;
	string from = 5;
	repeated string to = 7;
	string subject = 9;
	string body = 10;

	repeated string agents = 12;
	bool all_agents = 13;

  Message user_email = 14;
}

message Campaign {
	common.Context ctx = 1;
	string id = 2;
	string account_id = 3;

	repeated string url_expressions = 4;
	repeated string exclude_url_expressions = 6;

	repeated CampaignTrigger triggers = 10; // any

	string segmentation_join = 11; // and | or
	repeated CampaignSegmentation segmentations = 12;

	string template_id = 14;
	string page_type = 15; // modal, slide_in, bar, panel, fullscreen
	repeated CampaignPage pages = 17;

	int64 created = 18;
	string name = 19;
	string thumbnail_url = 20;
	bool enabled = 21;

	// stop showing pop up after showing x times
	int64 impression_limit = 23;
	repeated CampaignSchedulerCondition schedulers = 24;
	string scheduler_join = 25;
	CampaignNotification notification = 26;

	int64 updated = 27;

	int64 num_impression = 30;
	int64 num_conversion = 31;

	Frequently impression_frequency = 32;
}

message Impression {
	common.Context ctx = 1;
	string account_id = 2;
	string campaign_id = 3;
	string id = 4;
	string user_id = 5;

	string url = 7;
	common.Device device = 8;
	int64 created = 9;

	string by_trigger = 10;
	string impression_token = 11;  // for request submit only
}

message ConversionRequest {
	common.Context ctx = 1;
	string account_id = 2;
	string campaign_id = 3;
	string anchor = 4;
	int32 limit = 5;

	int32 from_hour = 7;
	int32 to_hour = 8;
}

message Conversions {
	common.Context ctx = 1;
	repeated Conversion conversions = 2;
	string anchor = 4;
}

message Conversion {
	common.Context ctx = 1;
	string account_id = 2;
	string campaign_id = 3;
	string impression_id = 4;
	string user_id = 5;

	string url = 7;
	common.Device device = 8;

	string by_trigger = 10;

	CampaignSubmission submission = 12;
	int64 created = 13;

	int64 week = 14; // internal use only
	string impression_token = 15; // for request submit only
}

message UserCampaignStatus {
	common.Context ctx = 1;
	string account_id = 2;
	string campaign_id = 3;
	string user_id = 5;

	string status = 8; // goal_reached || failed || nothing
	enum Status {
		goal_reached = 0;
		failed = 1;
	}
	int64 created = 10;
}

message CampaignPage {
	string title = 4;
	string subtitle = 9;
	string description = 5;

	WidgetForm form = 6;

	CampaignButton primary_button = 7;
	CampaignButton secondary_button = 8;
	CampaignButton background_click = 10;
	CampaignCountdown countdown = 11;

	CampaignVideo video = 12;

	string animation = 20;
	CampaignAppearance desktop_appearance = 24;
	CampaignAppearance mobile_appearance = 25;
}

message CampaignAppearance {
	string title_color = 2;
	string description_color = 3;

	string background = 4; // color or gradient
	string background_image = 5;

	string primary_button_background = 7;
	string primary_button_color = 8;

	string secondary_button_background = 9;
	string secondary_button_color = 10;

	// not supported yet
	string input_color = 11;
	string input_background = 12;

	string overlay = 13;

	// sizing, not supported yet
	string width = 20;
	string min_height = 21;
	string padding_left = 22;
	string padding_right = 23;
	string padding_top = 24;
	string padding_bottom = 25;

	string title_font_family = 30;
	string title_font_size = 31;
	string title_font_style = 32;
	string title_font_weight = 33;
	string title_text_transform = 34;

	string description_font_family = 35;
	string description_font_size = 36;
	string description_font_style = 37;
	string description_font_weight = 38;
	string description_text_transform = 39;

	string input_label_color = 40;
	string input_border_color = 41;
}

message CampaignSubmission  {
	common.Context ctx = 1;
	string account_id = 2;
	string campaign_id = 3;
	string user_id = 5;

	repeated WidgetField fields = 6;
}

message CampaignButtonAction {
	string action = 3; // open_url, close, open_widget, submit, next, goal_reach

	string url = 5; // url to open
	bool new_tab = 6; // open new url on new tab
}

message CampaignButton {
	bool enabled = 2;
	repeated CampaignButtonAction actions = 3;
	string text = 6;
}

message CampaignCountdown {
	bool enabled = 3;
	int64 end_time = 4; // unix sec
	string daily_end_time = 5; // 8:40:30 reset every day
}

message CampaignVideo {
	bool enabled = 1;
	string url = 2;

	//   string width = 4; // alway full
	string max_height = 5;
	string padding_left = 7;
	string padding_right = 8;
	string padding_top = 9;
	string padding_bottom = 10;
}

message ImpressionCount {
	string account_id = 3;
	string campaign_id = 4;
	int32 count = 5;
	int32 hour = 6;
	int32 month = 7;
}

message ConversionCount {
	string account_id = 3;
	string campaign_id = 4;
	int32 count = 5;
	int32 hour = 6;
	int32 month = 7;
}

message ReportCampaignRequest {
	common.Context ctx = 1;
	string account_id = 3;
	string campaign_id = 4;
	int32 from_hour = 5;
	int32 to_hour = 6;
	string range = 7;
	enum Range {
		hour = 0; // default
		day = 1;
	}
}

message ReportCampaignResponse {
	common.Context ctx = 1;
	repeated int32 impressions_count = 3;
	repeated int32 conversions_count = 4;
}

message ConversionsExported {
	string url = 6;
}

message SearchLocationsRequest {
	common.Context ctx = 1;
	string query = 2;
	int64 limit = 4;
}

message UploadedImage {
	common.Context ctx = 1;
	string account_id = 3;
	string url = 4;
	string thumbnail_url = 5;
	int64 width = 10;
	int64 height = 11;
  int64 created = 12;
}

message UploadedImages {
	common.Context ctx = 1;
	repeated UploadedImage images = 2;
}

message Clients {
	common.Context ctx = 1;
	repeated Client clients = 2;
}

enum ChannelType {
	subiz = 0;
	email = 1;
	facebook = 2; // ott
	viber = 3;
	facebook_comment = 4; // public, dont close conversation
	zalo = 5;
	call = 6;
}

message Client {
	common.Context ctx = 1;
	string id = 3;
	// secret used to authorize client with oauth2 server
	string secret = 4;
	// LogoUrl is url to logo of the client, should be 256x256 and lessthan 256KB
	string logo_url = 5;
	string account_id = 6;
	// IsVerified will be true if client is verified by the authority
	bool is_verified = 8;
	int64 verified = 9;
	// List of URLs which client must register for oauth redirection
	string redirect_uri = 10;
	string type = 11;
	enum Type {
		app = 0;
		connector = 1;
		bot = 3;
	}
	string name = 12;
	string display_name = 13;
	// Version number of the client.
	string version = 14;
	bool is_enabled = 15;
	int64 created = 17;
	int64 modified = 18;
	string webhook_uri = 20;
	repeated string events = 19; // subscribed event

	// for connector only
	string channel_type = 21;

	string availability_uri = 22;
	string ping_uri = 23;
	bool is_internal = 24;
	string unsubscribe_uri = 25;
	repeated string scopes = 26;

	string bot_default_job_title = 28;
	string bot_default_fullname = 29;
	bool bot_is_supervisor = 30;
}

message AuthorizedClient {
	common.Context ctx = 1;
	Client client  = 2;
	string issue_account_id = 3;
	string issuer = 4;
	repeated string scopes = 5;
	string kind = 6;
}

message Webhooks {
	common.Context ctx = 1;
	repeated Webhook webhooks = 2;
}

message Webhook {
	common.Context ctx = 1;
	string account_id = 12;
	string id = 2;
	string url = 3;
	string secret = 4;

	repeated string events = 6;
	string state = 7;
	enum State {
		active = 0;
		backoff_sleep = 1;
		dead = 2;
	}

	int64 modified = 19; // update when url, events or secret updated
	int64 created = 20;
	string creator = 21;
	bool is_enabled = 22; // deprecated
	bool is_protected = 23; // deprecated

	string avatar_url =  27; // favicon for the domain

	int64 total_deliveries_in_last_7_days = 30;
	int64 total_failed_deliveries_in_last_7_days = 31;
	bool is_disabled = 33;
	int64 last_delivery_at = 34;
	int64 last_success_delivery_at = 35;
	int64 next_retry_at = 36;
}

message WebhookDeliveries {
	common.Context ctx = 1;
	repeated WebhookDelivery deliveries = 2;
}

message WebhookDelivery {
	common.Context ctx = 1;
	string account_id = 2;
	string webhook_id = 3;
	int32 id = 4;
	string url = 5;
	// string method = 6; no need this field since the method is alway POST
	repeated common.KV resquest_headers = 7;
	string request_payload = 8;
	repeated common.KV response_headers = 9;
	string response_body = 10;
	string status = 11;
	int32 status_code = 12;
	int64 begin_at = 13;
	int64 end_at = 14;
	repeated string errs = 15;
}

message RecentIndexDeliveryRequest {
	common.Context ctx = 1;
	string client_id = 2;
	int32 limit = 3;
}

message WebhookPayload {
	common.Context ctx = 1;
	string account_id = 2;
	string hub_id = 3;
	bytes payload = 4; //json format
	string event = 5;
	string webhook_id = 6; // internal use only
	string key = 9; // kafka key, internal use only
	bool is_direct = 10;
}

message WebhookTestResult {
	common.Context ctx = 1;
	string account_id = 2;
	string client_id = 3;
	string response_body = 14;
	int32 status = 15;
	string payload = 16;
	int64 latency = 17; // seconds
}

message Email {
	common.Context ctx = 1;
	string from = 3;
	//string to = 4;
	string subject = 5;
	string body = 6;
	map<string, string> header = 7;
	repeated EmailAttachment attachments = 8; // s3 links
	repeated string to = 9;
	repeated string cc = 10;
	repeated string bcc = 11;
	string encoding = 12;
}

message EmailAttachment {
	string url = 2;
	string name = 3;
	string mimetype = 4;
}

message FileHeader {
	common.Context ctx = 1;
	string account_id = 2;
	string name = 3;
	string type = 4;
	int64 size = 5;
	string md5 = 6;
	string description = 7;
}

message PresignResult {
	common.Context ctx = 1;
	string account_id = 3;
	string url = 4;
	string id = 6;
	string signed_url = 5;
}

message FileRequest {
	common.Context ctx = 1;
	string account_id = 2;
	string id = 3;
}

message File {
	common.Context ctx = 1;
	string account_id = 2;
	string name = 3;
	string type = 4;
	int64 size = 5;
	string md5 = 6;
	string description = 10;
	int64 created = 7;
	string url = 8;
	string creator = 9;
	string id = 11;
}

message FileMeta {
	string account_id = 2;
	string id = 3;
	int64 uploaded = 4;
	string name = 5;
	int64 size = 6;
	string full_url = 7;
	string mime_type = 8;
	int64 downloaded = 10;
}

message BotTerminated {
	common.Context ctx = 1;
	string account_id = 2;
	string bot_id = 3;
	string conversation_id = 4;

	bool success = 5;
	string code = 6;
	enum TerminatedCode {
		complete = 0;
		start = 1;
		error = 3;
		force = 4;
		expire = 5;
		self = 6;
	}
}

enum RealtimeType {
	a = 0;
	account_deleted = 10;
	account_updated = 11;

	group_deleted = 12;
	group_updated = 13;

	invitation_accepted = 14;
	agent_deleted = 15;
	agent_updated = 16;

	agent_permission_updated = 17;
	limit_updated = 18;
	my_user_upserted = 19;
	user_info_updated = 20;

	user_created = 22;
	note_created = 23;
	presence_updated = 24;
	content_viewed = 25;
	content_searched = 26;
	content_addedtocart = 27;
	content_checkedout = 28;
	content_purchased = 29;
	topic_read = 30;
	subscribed_topic_updated = 31;
	user_topic_updated = 32;
	user_attribute_updated = 33;
	user_attribute_deleted = 34;

	automation_fired = 36;

	notibox_notification_upserted = 37;
	notibox_upserted = 38;

	notification_setting_updated = 39;

	conversation_updated = 40;
	message_sent = 41; // event.data.message
	conversation_state_updated = 42; // event.data.conversation

	message_pong = 43; // event.data.message.pongs.0

	conversation_joined = 44; // event.data.conversation.memebers.0
	conversation_invited = 45;
	conversation_left =46 ;
	conversation_tagged = 47;
	conversation_untagged = 48;

	integration_updated = 49;

	conversation_typing = 54;
	conversation_postbacked = 55;
	conversation_unassigned = 56;
	conversation_assigned = 57;
	message_updated = 58; // event.data.message.revisions.0

	conversation_rating_requested = 60; // event.data.conversation
	conversation_rated = 61; // event.data.conversation

	ticket_created = 63;
	ticket_updated = 64;
	ticket_deleted = 65;

	my_conversation_mute_updated = 66; // conversation
	my_conversation_read_updated = 67; // conversation
	my_conversation_unsubscribed = 68; // conversation

	tag_updated = 70;
	tag_deleted = 71;

	message_template_updated = 72;
	message_template_deleted = 73;

	live_act_user_num = 82;
	live_top_source = 83;
	live_top_location = 84;
	live_top_page = 85;

	user_select_product = 86;
	user_like_content = 87;

	agent_notification_created = 88;

	bot_deleted = 89;
	bot_updated = 90;
	bot_debug_end = 91;
	bot_debug_begin_action = 92;

	user_campaign_converted = 95;
	user_returned = 96;
	user_first_visited = 97;

	bot_terminated = 98;
}