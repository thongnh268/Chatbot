// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.23.0
// 	protoc        v3.11.2
// source: service.proto

package header

import (
	context "context"
	proto "github.com/golang/protobuf/proto"
	account "github.com/subiz/header/account"
	api "github.com/subiz/header/api"
	bqreport "github.com/subiz/header/bqreport"
	common "github.com/subiz/header/common"
	content "github.com/subiz/header/content"
	conversation "github.com/subiz/header/conversation"
	noti5 "github.com/subiz/header/noti5"
	notibox "github.com/subiz/header/notibox"
	payment "github.com/subiz/header/payment"
	user "github.com/subiz/header/user"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

var File_service_proto protoreflect.FileDescriptor

var file_service_proto_rawDesc = []byte{
	0x0a, 0x0d, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x1a, 0x0c, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0a, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x12, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0d, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0d, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x0d, 0x6e, 0x6f, 0x74, 0x69, 0x62, 0x6f, 0x78, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x0b, 0x6e, 0x6f, 0x74, 0x69, 0x35, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x0d, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x09,
	0x61, 0x70, 0x69, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0e, 0x62, 0x71, 0x72, 0x65, 0x70,
	0x6f, 0x72, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0c, 0x68, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x32, 0x30, 0x0a, 0x09, 0x41, 0x70, 0x69, 0x53, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x12, 0x23, 0x0a, 0x04, 0x43, 0x61, 0x6c, 0x6c, 0x12, 0x0c, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0d, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x32, 0x96, 0x0b, 0x0a, 0x0a, 0x41, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4d, 0x67, 0x72, 0x12, 0x37, 0x0a, 0x0b, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x13, 0x2e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x2e, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x1a, 0x13, 0x2e, 0x61,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2e, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x12, 0x37, 0x0a, 0x0b, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x12, 0x13, 0x2e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2e, 0x41, 0x67, 0x65, 0x6e, 0x74,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x1a, 0x13, 0x2e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2e,
	0x41, 0x67, 0x65, 0x6e, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x2b, 0x0a, 0x08, 0x47, 0x65,
	0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x0a, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e,
	0x49, 0x64, 0x1a, 0x13, 0x2e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2e, 0x41, 0x67, 0x65,
	0x6e, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x44, 0x0a, 0x14, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x52, 0x65, 0x73, 0x65, 0x74, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12,
	0x1d, 0x2e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2e, 0x52, 0x65, 0x73, 0x65, 0x74, 0x50,
	0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0d,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x36, 0x0a,
	0x0e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12,
	0x14, 0x2e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2e, 0x4e, 0x65, 0x77, 0x50, 0x61, 0x73,
	0x73, 0x77, 0x6f, 0x72, 0x64, 0x1a, 0x0e, 0x2e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2e,
	0x41, 0x67, 0x65, 0x6e, 0x74, 0x12, 0x2d, 0x0a, 0x0b, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41,
	0x67, 0x65, 0x6e, 0x74, 0x12, 0x0e, 0x2e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2e, 0x41,
	0x67, 0x65, 0x6e, 0x74, 0x1a, 0x0e, 0x2e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2e, 0x41,
	0x67, 0x65, 0x6e, 0x74, 0x12, 0x29, 0x0a, 0x0b, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x67,
	0x65, 0x6e, 0x74, 0x12, 0x0a, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x49, 0x64, 0x1a,
	0x0e, 0x2e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2e, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x12,
	0x33, 0x0a, 0x12, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x45, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x0e, 0x2e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2e,
	0x41, 0x67, 0x65, 0x6e, 0x74, 0x1a, 0x0d, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x45,
	0x6d, 0x70, 0x74, 0x79, 0x12, 0x34, 0x0a, 0x12, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x43,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x0e, 0x2e, 0x61, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x2e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x1a, 0x0e, 0x2e, 0x61, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x2e, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x12, 0x38, 0x0a, 0x10, 0x41, 0x63,
	0x63, 0x65, 0x70, 0x74, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x14,
	0x2e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2e, 0x4e, 0x65, 0x77, 0x50, 0x61, 0x73, 0x73,
	0x77, 0x6f, 0x72, 0x64, 0x1a, 0x0e, 0x2e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2e, 0x41,
	0x67, 0x65, 0x6e, 0x74, 0x12, 0x2f, 0x0a, 0x0d, 0x47, 0x65, 0x74, 0x49, 0x6e, 0x76, 0x69, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x0e, 0x2e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2e,
	0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x1a, 0x0e, 0x2e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2e,
	0x41, 0x67, 0x65, 0x6e, 0x74, 0x12, 0x2d, 0x0a, 0x0b, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x41,
	0x67, 0x65, 0x6e, 0x74, 0x12, 0x0e, 0x2e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2e, 0x41,
	0x67, 0x65, 0x6e, 0x74, 0x1a, 0x0e, 0x2e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2e, 0x41,
	0x67, 0x65, 0x6e, 0x74, 0x12, 0x26, 0x0a, 0x08, 0x47, 0x65, 0x74, 0x41, 0x67, 0x65, 0x6e, 0x74,
	0x12, 0x0a, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x49, 0x64, 0x1a, 0x0e, 0x2e, 0x61,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2e, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x12, 0x32, 0x0a, 0x0e,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x0e,
	0x2e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x1a, 0x10,
	0x2e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x2a, 0x0a, 0x0a, 0x47, 0x65, 0x74, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x0a,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x49, 0x64, 0x1a, 0x10, 0x2e, 0x61, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x33, 0x0a, 0x0d,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x10, 0x2e,
	0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x1a,
	0x10, 0x2e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x40, 0x0a, 0x0d, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x1d, 0x2e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2e, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x10, 0x2e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2e, 0x41, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x29, 0x0a, 0x0a, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x67, 0x65, 0x6e, 0x74,
	0x73, 0x12, 0x0a, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x49, 0x64, 0x1a, 0x0f, 0x2e,
	0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2e, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x35,
	0x0a, 0x0c, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x15,
	0x2e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0e, 0x2e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2e,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x28, 0x0a, 0x0b, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x12, 0x0a, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x49, 0x64,
	0x1a, 0x0d, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12,
	0x2e, 0x0a, 0x0a, 0x4c, 0x69, 0x73, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x12, 0x0a, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x49, 0x64, 0x1a, 0x14, 0x2e, 0x61, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x2e, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x12,
	0x36, 0x0a, 0x0f, 0x41, 0x64, 0x64, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x12, 0x14, 0x2e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2e, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x1a, 0x0d, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x3b, 0x0a, 0x14, 0x52, 0x65, 0x6d, 0x6f, 0x76,
	0x65, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x46, 0x72, 0x6f, 0x6d, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12,
	0x14, 0x2e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4d,
	0x65, 0x6d, 0x62, 0x65, 0x72, 0x1a, 0x0d, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x45,
	0x6d, 0x70, 0x74, 0x79, 0x12, 0x2d, 0x0a, 0x0b, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x45, 0x6d,
	0x61, 0x69, 0x6c, 0x12, 0x0e, 0x2e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2e, 0x41, 0x67,
	0x65, 0x6e, 0x74, 0x1a, 0x0e, 0x2e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2e, 0x41, 0x67,
	0x65, 0x6e, 0x74, 0x12, 0x2e, 0x0a, 0x0c, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x65,
	0x42, 0x6f, 0x74, 0x12, 0x0e, 0x2e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2e, 0x41, 0x67,
	0x65, 0x6e, 0x74, 0x1a, 0x0e, 0x2e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2e, 0x41, 0x67,
	0x65, 0x6e, 0x74, 0x12, 0x50, 0x0a, 0x12, 0x53, 0x79, 0x6e, 0x63, 0x50, 0x75, 0x62, 0x6c, 0x69,
	0x63, 0x48, 0x6f, 0x6c, 0x69, 0x64, 0x61, 0x79, 0x73, 0x12, 0x22, 0x2e, 0x61, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x2e, 0x53, 0x79, 0x6e, 0x63, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x48, 0x6f,
	0x6c, 0x69, 0x64, 0x61, 0x79, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e,
	0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2e, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73,
	0x48, 0x6f, 0x75, 0x72, 0x73, 0x12, 0x2b, 0x0a, 0x0d, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65,
	0x72, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x12, 0x0a, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e,
	0x49, 0x64, 0x1a, 0x0e, 0x2e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2e, 0x41, 0x67, 0x65,
	0x6e, 0x74, 0x32, 0xa8, 0x04, 0x0a, 0x0b, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x4d,
	0x67, 0x72, 0x12, 0x34, 0x0a, 0x0e, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x63, 0x69, 0x65, 0x73, 0x12, 0x0d, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x45, 0x6d,
	0x70, 0x74, 0x79, 0x1a, 0x13, 0x2e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2e, 0x43, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x63, 0x69, 0x65, 0x73, 0x12, 0x2c, 0x0a, 0x0b, 0x47, 0x65, 0x74, 0x43,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x0a, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2e, 0x49, 0x64, 0x1a, 0x11, 0x2e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2e, 0x43, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x36, 0x0a, 0x0e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x11, 0x2e, 0x61, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x2e, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x1a, 0x11, 0x2e, 0x61, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2e, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x36,
	0x0a, 0x0e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79,
	0x12, 0x11, 0x2e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2e, 0x43, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x63, 0x79, 0x1a, 0x11, 0x2e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2e, 0x43, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x2b, 0x0a, 0x0e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x0a, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2e, 0x49, 0x64, 0x1a, 0x0d, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x45, 0x6d,
	0x70, 0x74, 0x79, 0x12, 0x49, 0x0a, 0x11, 0x4c, 0x69, 0x73, 0x74, 0x45, 0x78, 0x63, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x52, 0x61, 0x74, 0x65, 0x73, 0x12, 0x1c, 0x2e, 0x61, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x2e, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x61, 0x74, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x2e, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x61, 0x74, 0x65, 0x73, 0x12, 0x46,
	0x0a, 0x0f, 0x47, 0x65, 0x74, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x61, 0x74,
	0x65, 0x12, 0x1c, 0x2e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2e, 0x45, 0x78, 0x63, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x52, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x15, 0x2e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2e, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x52, 0x61, 0x74, 0x65, 0x12, 0x42, 0x0a, 0x12, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x61, 0x74, 0x65, 0x12, 0x15, 0x2e, 0x61,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2e, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52,
	0x61, 0x74, 0x65, 0x1a, 0x15, 0x2e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2e, 0x45, 0x78,
	0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x61, 0x74, 0x65, 0x12, 0x41, 0x0a, 0x12, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x61, 0x74, 0x65,
	0x12, 0x1c, 0x2e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2e, 0x45, 0x78, 0x63, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x52, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0d,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x32, 0xe6, 0x04,
	0x0a, 0x07, 0x55, 0x73, 0x65, 0x72, 0x4d, 0x67, 0x72, 0x12, 0x40, 0x0a, 0x0b, 0x53, 0x65, 0x61,
	0x72, 0x63, 0x68, 0x55, 0x73, 0x65, 0x72, 0x73, 0x12, 0x17, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e,
	0x55, 0x73, 0x65, 0x72, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x18, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x53,
	0x65, 0x61, 0x72, 0x63, 0x68, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x42, 0x0a, 0x0b, 0x53,
	0x65, 0x61, 0x72, 0x63, 0x68, 0x4c, 0x65, 0x61, 0x64, 0x73, 0x12, 0x19, 0x2e, 0x68, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x2e, 0x4c, 0x65, 0x61, 0x64, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x18, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x4c,
	0x65, 0x61, 0x64, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12,
	0x40, 0x0a, 0x09, 0x4c, 0x69, 0x73, 0x74, 0x4c, 0x65, 0x61, 0x64, 0x73, 0x12, 0x19, 0x2e, 0x68,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x4c, 0x65, 0x61, 0x64, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x18, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x2e, 0x4c, 0x65, 0x61, 0x64, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x12, 0x26, 0x0a, 0x0a, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x12,
	0x0c, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x1a, 0x0a, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x0a, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x12, 0x0c, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x2e, 0x55, 0x73, 0x65, 0x72, 0x1a, 0x0a, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x49,
	0x64, 0x12, 0x24, 0x0a, 0x08, 0x52, 0x65, 0x61, 0x64, 0x55, 0x73, 0x65, 0x72, 0x12, 0x0a, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x49, 0x64, 0x1a, 0x0c, 0x2e, 0x68, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x12, 0x42, 0x0a, 0x0b, 0x52, 0x65, 0x70, 0x6f, 0x72,
	0x74, 0x55, 0x73, 0x65, 0x72, 0x73, 0x12, 0x19, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e,
	0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x18, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x52,
	0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x43, 0x0a, 0x0a, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x19, 0x2e, 0x68, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x2e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x29, 0x0a, 0x04, 0x50, 0x69, 0x6e, 0x67, 0x12, 0x13, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2e, 0x50, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0c, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x50, 0x6f, 0x6e, 0x67, 0x12, 0x3f, 0x0a, 0x0a, 0x53,
	0x65, 0x61, 0x72, 0x63, 0x68, 0x4e, 0x6f, 0x74, 0x65, 0x12, 0x17, 0x2e, 0x75, 0x73, 0x65, 0x72,
	0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x4e, 0x6f, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x18, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68,
	0x4e, 0x6f, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x28, 0x0a, 0x0a,
	0x4d, 0x61, 0x74, 0x63, 0x68, 0x55, 0x73, 0x65, 0x72, 0x73, 0x12, 0x0b, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2e, 0x49, 0x64, 0x73, 0x1a, 0x0d, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x2e, 0x55, 0x73, 0x65, 0x72, 0x73, 0x32, 0xbe, 0x03, 0x0a, 0x07, 0x4c, 0x69, 0x76, 0x65, 0x4d,
	0x67, 0x72, 0x12, 0x3c, 0x0a, 0x0f, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x4c, 0x6f, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x16, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x4c,
	0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x1a, 0x11, 0x2e,
	0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x12, 0x3a, 0x0a, 0x11, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65,
	0x55, 0x73, 0x65, 0x72, 0x73, 0x12, 0x16, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x55,
	0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x1a, 0x0d, 0x2e,
	0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x73, 0x12, 0x30, 0x0a, 0x09,
	0x54, 0x6f, 0x70, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x13, 0x2e, 0x68, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x1a, 0x0e,
	0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x33,
	0x0a, 0x0c, 0x54, 0x6f, 0x70, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x0a,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x49, 0x64, 0x1a, 0x17, 0x2e, 0x68, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x74, 0x72,
	0x69, 0x63, 0x73, 0x12, 0x2b, 0x0a, 0x08, 0x54, 0x6f, 0x70, 0x50, 0x61, 0x67, 0x65, 0x73, 0x12,
	0x0a, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x49, 0x64, 0x1a, 0x13, 0x2e, 0x68, 0x65,
	0x61, 0x64, 0x65, 0x72, 0x2e, 0x50, 0x61, 0x67, 0x65, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73,
	0x12, 0x2f, 0x0a, 0x0a, 0x54, 0x6f, 0x70, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x12, 0x0a,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x49, 0x64, 0x1a, 0x15, 0x2e, 0x68, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x2e, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63,
	0x73, 0x12, 0x32, 0x0a, 0x10, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65,
	0x55, 0x73, 0x65, 0x72, 0x73, 0x12, 0x0a, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x49,
	0x64, 0x1a, 0x12, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x4d,
	0x65, 0x74, 0x72, 0x69, 0x63, 0x12, 0x40, 0x0a, 0x09, 0x50, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x63,
	0x65, 0x73, 0x12, 0x18, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x50, 0x72, 0x65, 0x73,
	0x65, 0x6e, 0x63, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x19, 0x2e, 0x68,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x50, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x32, 0xba, 0x02, 0x0a, 0x07, 0x4e, 0x6f, 0x74, 0x65,
	0x4d, 0x67, 0x72, 0x12, 0x34, 0x0a, 0x09, 0x4c, 0x69, 0x73, 0x74, 0x4e, 0x6f, 0x74, 0x65, 0x73,
	0x12, 0x18, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4e, 0x6f,
	0x74, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0d, 0x2e, 0x68, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x2e, 0x4e, 0x6f, 0x74, 0x65, 0x73, 0x12, 0x25, 0x0a, 0x07, 0x41, 0x64, 0x64,
	0x4e, 0x6f, 0x74, 0x65, 0x12, 0x0c, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x4e, 0x6f,
	0x74, 0x65, 0x1a, 0x0c, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x4e, 0x6f, 0x74, 0x65,
	0x12, 0x28, 0x0a, 0x0a, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4e, 0x6f, 0x74, 0x65, 0x12, 0x0c,
	0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x4e, 0x6f, 0x74, 0x65, 0x1a, 0x0c, 0x2e, 0x68,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x4e, 0x6f, 0x74, 0x65, 0x12, 0x36, 0x0a, 0x0a, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x4e, 0x6f, 0x74, 0x65, 0x12, 0x19, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4e, 0x6f, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x0d, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x45, 0x6d, 0x70,
	0x74, 0x79, 0x12, 0x2f, 0x0a, 0x07, 0x47, 0x65, 0x74, 0x4e, 0x6f, 0x74, 0x65, 0x12, 0x16, 0x2e,
	0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x4e, 0x6f, 0x74, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0c, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x4e,
	0x6f, 0x74, 0x65, 0x12, 0x3f, 0x0a, 0x0a, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x4e, 0x6f, 0x74,
	0x65, 0x12, 0x17, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x4e,
	0x6f, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x18, 0x2e, 0x75, 0x73, 0x65,
	0x72, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x4e, 0x6f, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x32, 0x9c, 0x02, 0x0a, 0x0d, 0x41, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x4d, 0x67, 0x72, 0x12, 0x32, 0x0a, 0x0f, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x75,
	0x74, 0x6f, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x0a, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2e, 0x49, 0x64, 0x1a, 0x13, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x41,
	0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x3a, 0x0a, 0x10, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x41, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12,
	0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x41, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x1a, 0x12, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x41, 0x75, 0x74, 0x6f,
	0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2d, 0x0a, 0x10, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x41, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x0a, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2e, 0x49, 0x64, 0x1a, 0x0d, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e,
	0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x30, 0x0a, 0x0e, 0x52, 0x65, 0x61, 0x64, 0x41, 0x75, 0x74,
	0x6f, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x0a, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2e, 0x49, 0x64, 0x1a, 0x12, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x41, 0x75, 0x74,
	0x6f, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3a, 0x0a, 0x10, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x41, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x2e, 0x68, 0x65,
	0x61, 0x64, 0x65, 0x72, 0x2e, 0x41, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x1a,
	0x12, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x41, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x32, 0xcc, 0x02, 0x0a, 0x0c, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74,
	0x65, 0x4d, 0x67, 0x72, 0x12, 0x47, 0x0a, 0x18, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x74, 0x74, 0x72,
	0x69, 0x62, 0x75, 0x74, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x12, 0x0d, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a,
	0x1c, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75,
	0x74, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x55, 0x0a,
	0x19, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65,
	0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1b, 0x2e, 0x68, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x2e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x44, 0x65, 0x66,
	0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x1b, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x2e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x55, 0x0a, 0x19, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x74,
	0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x1b, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x41, 0x74, 0x74, 0x72, 0x69,
	0x62, 0x75, 0x74, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x1b,
	0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74,
	0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x45, 0x0a, 0x19, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x44, 0x65,
	0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x19, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x74, 0x74, 0x72, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x0d, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x45, 0x6d, 0x70,
	0x74, 0x79, 0x32, 0xad, 0x01, 0x0a, 0x04, 0x50, 0x65, 0x72, 0x6d, 0x12, 0x32, 0x0a, 0x06, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x19, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x65, 0x72, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x0d, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12,
	0x38, 0x0a, 0x0b, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x1a,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0d, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x37, 0x0a, 0x08, 0x52, 0x65, 0x61,
	0x64, 0x50, 0x65, 0x72, 0x6d, 0x12, 0x17, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x52,
	0x65, 0x61, 0x64, 0x50, 0x65, 0x72, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x12,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x32, 0xd8, 0x04, 0x0a, 0x14, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x12, 0x5f, 0x0a, 0x18, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x42, 0x79, 0x54, 0x61, 0x67, 0x73, 0x12, 0x20, 0x2e, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72,
	0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x79, 0x54, 0x61,
	0x67, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x63, 0x6f, 0x6e, 0x76,
	0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x79,
	0x54, 0x61, 0x67, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x62, 0x0a, 0x13,
	0x47, 0x65, 0x74, 0x41, 0x76, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x12, 0x24, 0x2e, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x2e, 0x41, 0x76, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x54, 0x69,
	0x6d, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x25, 0x2e, 0x63, 0x6f, 0x6e, 0x76,
	0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x41, 0x76, 0x67, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x65, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x6f, 0x6e, 0x76,
	0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x24, 0x2e, 0x63, 0x6f, 0x6e, 0x76, 0x65,
	0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x41, 0x76, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x27,
	0x2e, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x54, 0x6f,
	0x74, 0x61, 0x6c, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x55, 0x0a, 0x13, 0x52, 0x65, 0x70, 0x6f, 0x72,
	0x74, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x20,
	0x2e, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x1c, 0x2e, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e,
	0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5e,
	0x0a, 0x14, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x32, 0x12, 0x28, 0x2e, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x43, 0x6f, 0x6e, 0x76,
	0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x1c, 0x2e, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e,
	0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5d,
	0x0a, 0x14, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x69, 0x62, 0x69,
	0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0x12, 0x27, 0x2e, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x69, 0x62, 0x69, 0x6c, 0x69,
	0x74, 0x79, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x1c, 0x2e, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x52,
	0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x32, 0x72, 0x0a,
	0x10, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x50, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x63, 0x65, 0x4d, 0x67,
	0x72, 0x12, 0x2d, 0x0a, 0x0c, 0x52, 0x65, 0x61, 0x64, 0x50, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x63,
	0x65, 0x12, 0x0a, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x49, 0x64, 0x1a, 0x11, 0x2e,
	0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2e, 0x50, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x63, 0x65,
	0x12, 0x2f, 0x0a, 0x0e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x72, 0x65, 0x73, 0x65, 0x6e,
	0x63, 0x65, 0x12, 0x0a, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x49, 0x64, 0x1a, 0x11,
	0x2e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2e, 0x50, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x63,
	0x65, 0x32, 0xd4, 0x01, 0x0a, 0x07, 0x52, 0x75, 0x6c, 0x65, 0x4d, 0x67, 0x72, 0x12, 0x28, 0x0a,
	0x0a, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x75, 0x6c, 0x65, 0x12, 0x0c, 0x2e, 0x68, 0x65,
	0x61, 0x64, 0x65, 0x72, 0x2e, 0x52, 0x75, 0x6c, 0x65, 0x1a, 0x0c, 0x2e, 0x68, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x2e, 0x52, 0x75, 0x6c, 0x65, 0x12, 0x28, 0x0a, 0x0a, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x52, 0x75, 0x6c, 0x65, 0x12, 0x0c, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x52,
	0x75, 0x6c, 0x65, 0x1a, 0x0c, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x52, 0x75, 0x6c,
	0x65, 0x12, 0x27, 0x0a, 0x0a, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x75, 0x6c, 0x65, 0x12,
	0x0a, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x49, 0x64, 0x1a, 0x0d, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x24, 0x0a, 0x08, 0x52, 0x65,
	0x61, 0x64, 0x52, 0x75, 0x6c, 0x65, 0x12, 0x0a, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e,
	0x49, 0x64, 0x1a, 0x0c, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x52, 0x75, 0x6c, 0x65,
	0x12, 0x26, 0x0a, 0x09, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x12, 0x0a, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x49, 0x64, 0x1a, 0x0d, 0x2e, 0x68, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x32, 0xea, 0x0a, 0x0a, 0x0f, 0x43, 0x6f, 0x6e,
	0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x67, 0x72, 0x12, 0x38, 0x0a, 0x0a,
	0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x52, 0x75, 0x6c, 0x65, 0x12, 0x15, 0x2e, 0x68, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x2e, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x13, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x2b, 0x0a, 0x0b, 0x50, 0x6f, 0x6e, 0x67, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x0d, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x1a, 0x0d, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x12, 0x3f, 0x0a, 0x11, 0x53, 0x74, 0x61, 0x72, 0x74, 0x43, 0x6f, 0x6e, 0x76,
	0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x2e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x14,
	0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x33, 0x0a, 0x0f, 0x45, 0x6e, 0x64, 0x43, 0x6f, 0x6e, 0x76, 0x65,
	0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x0a, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2e, 0x49, 0x64, 0x1a, 0x14, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x43, 0x6f, 0x6e,
	0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x33, 0x0a, 0x0f, 0x47, 0x65, 0x74,
	0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x0a, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x49, 0x64, 0x1a, 0x14, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x2e, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x4c,
	0x0a, 0x11, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x12, 0x20, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x4c, 0x69, 0x73,
	0x74, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x15, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x43,
	0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x38, 0x0a, 0x12,
	0x4d, 0x61, 0x74, 0x63, 0x68, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x12, 0x0b, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x49, 0x64, 0x73, 0x1a,
	0x15, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x34, 0x0a, 0x0f, 0x54, 0x61, 0x67, 0x43, 0x6f, 0x6e,
	0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x2e, 0x68, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x2e, 0x54, 0x61, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0d, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x36, 0x0a, 0x11,
	0x55, 0x6e, 0x74, 0x61, 0x67, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x12, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x54, 0x61, 0x67, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0d, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x45,
	0x6d, 0x70, 0x74, 0x79, 0x12, 0x3d, 0x0a, 0x10, 0x4a, 0x6f, 0x69, 0x6e, 0x43, 0x6f, 0x6e, 0x76,
	0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x2e, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65,
	0x6d, 0x62, 0x65, 0x72, 0x1a, 0x0d, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x45, 0x6d,
	0x70, 0x74, 0x79, 0x12, 0x3d, 0x0a, 0x10, 0x4c, 0x65, 0x66, 0x74, 0x43, 0x6f, 0x6e, 0x76, 0x65,
	0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x2e, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x6d,
	0x62, 0x65, 0x72, 0x1a, 0x0d, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x45, 0x6d, 0x70,
	0x74, 0x79, 0x12, 0x23, 0x0a, 0x06, 0x54, 0x79, 0x70, 0x69, 0x6e, 0x67, 0x12, 0x0a, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x49, 0x64, 0x1a, 0x0d, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x29, 0x0a, 0x04, 0x50, 0x69, 0x6e, 0x67, 0x12,
	0x13, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x50, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x0c, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x50, 0x6f,
	0x6e, 0x67, 0x12, 0x44, 0x0a, 0x16, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x76,
	0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x14, 0x2e, 0x68,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x1a, 0x14, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x43, 0x6f, 0x6e, 0x76,
	0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x67, 0x0a, 0x12, 0x53, 0x65, 0x61, 0x72,
	0x63, 0x68, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x27,
	0x2e, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x53, 0x65,
	0x61, 0x72, 0x63, 0x68, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x28, 0x2e, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72,
	0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x43, 0x6f, 0x6e,
	0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x63, 0x0a, 0x12, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x32, 0x12, 0x25, 0x2e, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72,
	0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x26,
	0x2e, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x43, 0x6f,
	0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3d, 0x0a, 0x16, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x4d, 0x75, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x14, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72,
	0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x0d, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e,
	0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x3a, 0x0a, 0x13, 0x55, 0x6e, 0x77, 0x61, 0x74, 0x63, 0x68,
	0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x2e, 0x68,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x1a, 0x0d, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x45, 0x6d, 0x70, 0x74,
	0x79, 0x12, 0x3b, 0x0a, 0x14, 0x4d, 0x61, 0x72, 0x6b, 0x52, 0x65, 0x61, 0x64, 0x43, 0x6f, 0x6e,
	0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x2e, 0x68, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x2e, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x1a,
	0x0d, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x46,
	0x0a, 0x14, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x45, 0x6e, 0x64, 0x63, 0x68, 0x61, 0x74, 0x53,
	0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x16, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e,
	0x45, 0x6e, 0x64, 0x63, 0x68, 0x61, 0x74, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x1a, 0x16,
	0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x45, 0x6e, 0x64, 0x63, 0x68, 0x61, 0x74, 0x53,
	0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x37, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x45, 0x6e, 0x64,
	0x63, 0x68, 0x61, 0x74, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x0a, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x49, 0x64, 0x1a, 0x16, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x2e, 0x45, 0x6e, 0x64, 0x63, 0x68, 0x61, 0x74, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x12,
	0x34, 0x0a, 0x0c, 0x54, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x42, 0x6f, 0x74, 0x12,
	0x15, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x42, 0x6f, 0x74, 0x54, 0x65, 0x72, 0x6d,
	0x69, 0x6e, 0x61, 0x74, 0x65, 0x64, 0x1a, 0x0d, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x32, 0xe0, 0x01, 0x0a, 0x13, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72,
	0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x79, 0x6e, 0x63, 0x4d, 0x67, 0x72, 0x12, 0x3b, 0x0a,
	0x11, 0x46, 0x69, 0x72, 0x65, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x74, 0x54, 0x69, 0x63, 0x6b,
	0x65, 0x74, 0x12, 0x17, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x41, 0x75, 0x74, 0x6f,
	0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x1a, 0x0d, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x45, 0x0a, 0x1b, 0x46, 0x69,
	0x72, 0x65, 0x53, 0x65, 0x6e, 0x64, 0x43, 0x68, 0x61, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x17, 0x2e, 0x68, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x2e, 0x41, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x1a, 0x0d, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x45, 0x6d, 0x70, 0x74,
	0x79, 0x12, 0x45, 0x0a, 0x1b, 0x46, 0x69, 0x72, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43,
	0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x12, 0x17, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x41, 0x75, 0x74, 0x6f, 0x6d, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x1a, 0x0d, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x32, 0xba, 0x02, 0x0a, 0x0b, 0x54, 0x65, 0x6d,
	0x70, 0x6c, 0x61, 0x74, 0x65, 0x4d, 0x67, 0x72, 0x12, 0x34, 0x0a, 0x0e, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x12, 0x10, 0x2e, 0x68, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x2e, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x1a, 0x10, 0x2e, 0x68,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x12, 0x34,
	0x0a, 0x0e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65,
	0x12, 0x10, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61,
	0x74, 0x65, 0x1a, 0x10, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x54, 0x65, 0x6d, 0x70,
	0x6c, 0x61, 0x74, 0x65, 0x12, 0x2b, 0x0a, 0x0e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x65,
	0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x12, 0x0a, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e,
	0x49, 0x64, 0x1a, 0x0d, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x45, 0x6d, 0x70, 0x74,
	0x79, 0x12, 0x2b, 0x0a, 0x0b, 0x47, 0x65, 0x74, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65,
	0x12, 0x0a, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x49, 0x64, 0x1a, 0x10, 0x2e, 0x68,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x12, 0x3a,
	0x0a, 0x0d, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x12,
	0x16, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x54,
	0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x1a, 0x11, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x2e, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x12, 0x29, 0x0a, 0x0c, 0x50, 0x69,
	0x63, 0x6b, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x12, 0x0a, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2e, 0x49, 0x64, 0x1a, 0x0d, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e,
	0x45, 0x6d, 0x70, 0x74, 0x79, 0x32, 0xc7, 0x01, 0x0a, 0x06, 0x54, 0x61, 0x67, 0x4d, 0x67, 0x72,
	0x12, 0x25, 0x0a, 0x09, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x61, 0x67, 0x12, 0x0b, 0x2e,
	0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x54, 0x61, 0x67, 0x1a, 0x0b, 0x2e, 0x68, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x2e, 0x54, 0x61, 0x67, 0x12, 0x25, 0x0a, 0x09, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x54, 0x61, 0x67, 0x12, 0x0b, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x54, 0x61,
	0x67, 0x1a, 0x0b, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x54, 0x61, 0x67, 0x12, 0x26,
	0x0a, 0x09, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x61, 0x67, 0x12, 0x0a, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x49, 0x64, 0x1a, 0x0d, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x24, 0x0a, 0x08, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x61,
	0x67, 0x73, 0x12, 0x0a, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x49, 0x64, 0x1a, 0x0c,
	0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x54, 0x61, 0x67, 0x73, 0x12, 0x21, 0x0a, 0x06,
	0x47, 0x65, 0x74, 0x54, 0x61, 0x67, 0x12, 0x0a, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e,
	0x49, 0x64, 0x1a, 0x0b, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x54, 0x61, 0x67, 0x32,
	0xff, 0x01, 0x0a, 0x0e, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d,
	0x67, 0x72, 0x12, 0x28, 0x0a, 0x0b, 0x44, 0x65, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74,
	0x65, 0x12, 0x0a, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x49, 0x64, 0x1a, 0x0d, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x34, 0x0a, 0x10,
	0x4c, 0x69, 0x73, 0x74, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x12, 0x0a, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x49, 0x64, 0x1a, 0x14, 0x2e, 0x68,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x12, 0x35, 0x0a, 0x09, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x65, 0x12,
	0x13, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x13, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x49, 0x6e,
	0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x56, 0x0a, 0x11, 0x43, 0x68, 0x65,
	0x63, 0x6b, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x20,
	0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x69,
	0x6c, 0x69, 0x74, 0x79, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x1f, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61,
	0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x32, 0xd9, 0x06, 0x0a, 0x09, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x4d, 0x67, 0x72, 0x12,
	0x3a, 0x0a, 0x0c, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x12,
	0x14, 0x2e, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x54,
	0x69, 0x63, 0x6b, 0x65, 0x74, 0x1a, 0x14, 0x2e, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x12, 0x3a, 0x0a, 0x0c, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x12, 0x14, 0x2e, 0x63, 0x6f,
	0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x54, 0x69, 0x63, 0x6b, 0x65,
	0x74, 0x1a, 0x14, 0x2e, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x2e, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x12, 0x40, 0x0a, 0x0c, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x12, 0x21, 0x2e, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72,
	0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x69, 0x63,
	0x6b, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0d, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x41, 0x0a, 0x09, 0x47, 0x65, 0x74,
	0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x12, 0x1e, 0x2e, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x14, 0x2e, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x12, 0x48, 0x0a, 0x0c,
	0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x12, 0x1f, 0x2e, 0x63,
	0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x54, 0x69, 0x63, 0x6b,
	0x65, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x17, 0x2e,
	0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x45, 0x53, 0x54,
	0x69, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x12, 0x3f, 0x0a, 0x08, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x4c,
	0x41, 0x73, 0x12, 0x0d, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x45, 0x6d, 0x70, 0x74,
	0x79, 0x1a, 0x24, 0x2e, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x41, 0x67, 0x72,
	0x65, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x39, 0x0a, 0x06, 0x47, 0x65, 0x74, 0x53, 0x4c,
	0x41, 0x12, 0x0a, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x49, 0x64, 0x1a, 0x23, 0x2e,
	0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x41, 0x67, 0x72, 0x65, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x12, 0x55, 0x0a, 0x09, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x4c, 0x41, 0x12,
	0x23, 0x2e, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x41, 0x67, 0x72, 0x65, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x1a, 0x23, 0x2e, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4c, 0x65, 0x76, 0x65, 0x6c,
	0x41, 0x67, 0x72, 0x65, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x55, 0x0a, 0x09, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x53, 0x4c, 0x41, 0x12, 0x23, 0x2e, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4c, 0x65, 0x76,
	0x65, 0x6c, 0x41, 0x67, 0x72, 0x65, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x1a, 0x23, 0x2e, 0x63, 0x6f,
	0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x41, 0x67, 0x72, 0x65, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x12, 0x26, 0x0a, 0x09, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x4c, 0x41, 0x12, 0x0a, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x49, 0x64, 0x1a, 0x0d, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x52, 0x0a, 0x0b, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x12, 0x20, 0x2e, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72,
	0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x54, 0x69, 0x63, 0x6b,
	0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x63, 0x6f, 0x6e, 0x76,
	0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x54, 0x69,
	0x63, 0x6b, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5f, 0x0a, 0x12,
	0x47, 0x65, 0x74, 0x41, 0x76, 0x67, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x12, 0x23, 0x2e, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x2e, 0x41, 0x76, 0x67, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x54, 0x69, 0x6d, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72,
	0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x41, 0x76, 0x67, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x76,
	0x65, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x32, 0x85, 0x02,
	0x0a, 0x09, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4d, 0x67, 0x72, 0x12, 0x28, 0x0a, 0x06, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x12, 0x0e, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x43,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x1a, 0x0e, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x43,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x12, 0x28, 0x0a, 0x06, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12,
	0x0e, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x1a,
	0x0e, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x12,
	0x26, 0x0a, 0x04, 0x52, 0x65, 0x61, 0x64, 0x12, 0x0e, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x2e, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x1a, 0x0e, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x2e, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x12, 0x3d, 0x0a, 0x15, 0x4c, 0x69, 0x73, 0x74, 0x49,
	0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x65, 0x64, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x73,
	0x12, 0x0a, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x49, 0x64, 0x1a, 0x18, 0x2e, 0x68,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x64,
	0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x12, 0x3d, 0x0a, 0x15, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x75,
	0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x64, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x73, 0x12,
	0x0a, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x49, 0x64, 0x1a, 0x18, 0x2e, 0x68, 0x65,
	0x61, 0x64, 0x65, 0x72, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x64, 0x43,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x32, 0xe4, 0x02, 0x0a, 0x15, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x12,
	0x33, 0x0a, 0x0d, 0x55, 0x70, 0x73, 0x65, 0x72, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74,
	0x12, 0x10, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65,
	0x6e, 0x74, 0x1a, 0x10, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2e, 0x43, 0x6f, 0x6e,
	0x74, 0x65, 0x6e, 0x74, 0x12, 0x2a, 0x0a, 0x0d, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x6f,
	0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x0a, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x49,
	0x64, 0x1a, 0x0d, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79,
	0x12, 0x2a, 0x0a, 0x0a, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x0a,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x49, 0x64, 0x1a, 0x10, 0x2e, 0x63, 0x6f, 0x6e,
	0x74, 0x65, 0x6e, 0x74, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x42, 0x0a, 0x0e,
	0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x1d,
	0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x43,
	0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x11, 0x2e,
	0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x73,
	0x12, 0x40, 0x0a, 0x13, 0x4c, 0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x73, 0x42, 0x79, 0x55, 0x72, 0x6c, 0x12, 0x16, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x2e, 0x4c, 0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x11, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x73, 0x12, 0x38, 0x0a, 0x11, 0x4c, 0x69, 0x6e, 0x6b, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x73, 0x54, 0x6f, 0x55, 0x72, 0x6c, 0x12, 0x14, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x2e, 0x4c, 0x69, 0x6e, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0d, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x32, 0x7a, 0x0a, 0x08,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x4d, 0x67, 0x72, 0x12, 0x3d, 0x0a, 0x0c, 0x53, 0x65, 0x61, 0x72,
	0x63, 0x68, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x1d, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x55, 0x73, 0x65, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0e, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x2f, 0x0a, 0x0b, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x11, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e,
	0x55, 0x73, 0x65, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x1a, 0x0d, 0x2e, 0x68, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x32, 0xf8, 0x01, 0x0a, 0x17, 0x43, 0x6f, 0x6e,
	0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x65,
	0x61, 0x64, 0x65, 0x72, 0x12, 0x2b, 0x0a, 0x0b, 0x53, 0x65, 0x6e, 0x64, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x12, 0x0d, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x1a, 0x0d, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x12, 0x2d, 0x0a, 0x0d, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x12, 0x0d, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x1a, 0x0d, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x12, 0x43, 0x0a, 0x0a, 0x4c, 0x69, 0x73, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x25,
	0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x6e, 0x76,
	0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0e, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x3c, 0x0a, 0x0c, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x1c, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x53,
	0x65, 0x61, 0x72, 0x63, 0x68, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x0e, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x73, 0x32, 0x99, 0x01, 0x0a, 0x07, 0x46, 0x69, 0x6c, 0x65, 0x4d, 0x67, 0x72, 0x12,
	0x34, 0x0a, 0x07, 0x50, 0x72, 0x65, 0x73, 0x69, 0x67, 0x6e, 0x12, 0x12, 0x2e, 0x68, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x1a, 0x15,
	0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x50, 0x72, 0x65, 0x73, 0x69, 0x67, 0x6e, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x29, 0x0a, 0x04, 0x52, 0x65, 0x61, 0x64, 0x12, 0x13, 0x2e,
	0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x0c, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x46, 0x69, 0x6c, 0x65,
	0x12, 0x2d, 0x0a, 0x08, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x65, 0x64, 0x12, 0x13, 0x2e, 0x68,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x0c, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x32,
	0xb0, 0x02, 0x0a, 0x0c, 0x4e, 0x6f, 0x74, 0x69, 0x35, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x12, 0x35, 0x0a, 0x17, 0x52, 0x65, 0x61, 0x64, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x0a, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x49, 0x64, 0x1a, 0x0e, 0x2e, 0x6e, 0x6f, 0x74, 0x69, 0x35, 0x2e,
	0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x3b, 0x0a, 0x19, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x74,
	0x74, 0x69, 0x6e, 0x67, 0x12, 0x0e, 0x2e, 0x6e, 0x6f, 0x74, 0x69, 0x35, 0x2e, 0x53, 0x65, 0x74,
	0x74, 0x69, 0x6e, 0x67, 0x1a, 0x0e, 0x2e, 0x6e, 0x6f, 0x74, 0x69, 0x35, 0x2e, 0x53, 0x65, 0x74,
	0x74, 0x69, 0x6e, 0x67, 0x12, 0x26, 0x0a, 0x04, 0x4e, 0x6f, 0x74, 0x69, 0x12, 0x0f, 0x2e, 0x6e,
	0x6f, 0x74, 0x69, 0x35, 0x2e, 0x50, 0x75, 0x73, 0x68, 0x4e, 0x6f, 0x74, 0x69, 0x1a, 0x0d, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x27, 0x0a, 0x08,
	0x41, 0x64, 0x64, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x0c, 0x2e, 0x6e, 0x6f, 0x74, 0x69, 0x35,
	0x2e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x1a, 0x0d, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e,
	0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x2a, 0x0a, 0x0b, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x54,
	0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x0c, 0x2e, 0x6e, 0x6f, 0x74, 0x69, 0x35, 0x2e, 0x54, 0x6f, 0x6b,
	0x65, 0x6e, 0x1a, 0x0d, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x45, 0x6d, 0x70, 0x74,
	0x79, 0x12, 0x2f, 0x0a, 0x10, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x45,
	0x78, 0x69, 0x73, 0x74, 0x73, 0x12, 0x0c, 0x2e, 0x6e, 0x6f, 0x74, 0x69, 0x35, 0x2e, 0x54, 0x6f,
	0x6b, 0x65, 0x6e, 0x1a, 0x0d, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x45, 0x6d, 0x70,
	0x74, 0x79, 0x32, 0xa2, 0x01, 0x0a, 0x0e, 0x4e, 0x6f, 0x74, 0x69, 0x62, 0x6f, 0x78, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x29, 0x0a, 0x0c, 0x52, 0x65, 0x61, 0x64, 0x41, 0x6c, 0x6c,
	0x4e, 0x6f, 0x74, 0x69, 0x73, 0x12, 0x0a, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x49,
	0x64, 0x1a, 0x0d, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79,
	0x12, 0x39, 0x0a, 0x09, 0x4c, 0x69, 0x73, 0x74, 0x4e, 0x6f, 0x74, 0x69, 0x73, 0x12, 0x14, 0x2e,
	0x6e, 0x6f, 0x74, 0x69, 0x62, 0x6f, 0x78, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x6e, 0x6f, 0x74, 0x69, 0x62, 0x6f, 0x78, 0x2e, 0x4e, 0x6f,
	0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x2a, 0x0a, 0x0a, 0x47,
	0x65, 0x74, 0x4e, 0x6f, 0x74, 0x69, 0x62, 0x6f, 0x78, 0x12, 0x0a, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2e, 0x49, 0x64, 0x1a, 0x10, 0x2e, 0x6e, 0x6f, 0x74, 0x69, 0x62, 0x6f, 0x78, 0x2e,
	0x4e, 0x6f, 0x74, 0x69, 0x62, 0x6f, 0x78, 0x32, 0x89, 0x01, 0x0a, 0x17, 0x53, 0x75, 0x62, 0x69,
	0x7a, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74,
	0x4d, 0x67, 0x72, 0x12, 0x2a, 0x0a, 0x0a, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x42, 0x69, 0x6c,
	0x6c, 0x12, 0x0d, 0x2e, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x42, 0x69, 0x6c, 0x6c,
	0x1a, 0x0d, 0x2e, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x42, 0x69, 0x6c, 0x6c, 0x12,
	0x42, 0x0a, 0x12, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x52, 0x61, 0x74, 0x65, 0x12, 0x15, 0x2e, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x2e,
	0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x61, 0x74, 0x65, 0x1a, 0x15, 0x2e, 0x70,
	0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52,
	0x61, 0x74, 0x65, 0x32, 0xc2, 0x11, 0x0a, 0x0a, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x4d,
	0x67, 0x72, 0x12, 0x38, 0x0a, 0x09, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x53, 0x75, 0x62, 0x12,
	0x19, 0x2e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68,
	0x53, 0x75, 0x62, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x10, 0x2e, 0x61, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x2e, 0x41, 0x63, 0x63, 0x53, 0x75, 0x62, 0x73, 0x12, 0x33, 0x0a, 0x08,
	0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x12, 0x15, 0x2e, 0x70, 0x61, 0x79, 0x6d, 0x65,
	0x6e, 0x74, 0x2e, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x1a,
	0x10, 0x2e, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x49, 0x6e, 0x76, 0x6f, 0x69, 0x63,
	0x65, 0x12, 0x42, 0x0a, 0x12, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x75, 0x62, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x15, 0x2e, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e,
	0x74, 0x2e, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x15,
	0x2e, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x34, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x53, 0x75, 0x62, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x0a, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2e, 0x49, 0x64, 0x1a, 0x15, 0x2e, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x53,
	0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x42, 0x0a, 0x10, 0x41,
	0x64, 0x64, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x12,
	0x16, 0x2e, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e,
	0x74, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x1a, 0x16, 0x2e, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e,
	0x74, 0x2e, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x12,
	0x45, 0x0a, 0x13, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74,
	0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x16, 0x2e, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74,
	0x2e, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x1a, 0x16,
	0x2e, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74,
	0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x30, 0x0a, 0x13, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x0a, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x49, 0x64, 0x1a, 0x0d, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x39, 0x0a, 0x12, 0x4c, 0x69, 0x73, 0x74,
	0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x73, 0x12, 0x0a,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x49, 0x64, 0x1a, 0x17, 0x2e, 0x70, 0x61, 0x79,
	0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x74, 0x68,
	0x6f, 0x64, 0x73, 0x12, 0x29, 0x0a, 0x03, 0x50, 0x61, 0x79, 0x12, 0x13, 0x2e, 0x70, 0x61, 0x79,
	0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x50, 0x61, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x0d, 0x2e, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x42, 0x69, 0x6c, 0x6c, 0x12, 0x2d,
	0x0a, 0x0c, 0x4c, 0x69, 0x73, 0x74, 0x49, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x73, 0x12, 0x0a,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x49, 0x64, 0x1a, 0x11, 0x2e, 0x70, 0x61, 0x79,
	0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x49, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x73, 0x12, 0x33, 0x0a,
	0x0d, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x12, 0x10,
	0x2e, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x49, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65,
	0x1a, 0x10, 0x2e, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x49, 0x6e, 0x76, 0x6f, 0x69,
	0x63, 0x65, 0x12, 0x33, 0x0a, 0x0d, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x76, 0x6f,
	0x69, 0x63, 0x65, 0x12, 0x10, 0x2e, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x49, 0x6e,
	0x76, 0x6f, 0x69, 0x63, 0x65, 0x1a, 0x10, 0x2e, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x2e,
	0x49, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x12, 0x40, 0x0a, 0x0e, 0x46, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x49, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x73, 0x12, 0x1b, 0x2e, 0x70, 0x61, 0x79, 0x6d,
	0x65, 0x6e, 0x74, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x49, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x11, 0x2e, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74,
	0x2e, 0x49, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x73, 0x12, 0x37, 0x0a, 0x0c, 0x44, 0x72, 0x61,
	0x66, 0x74, 0x49, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x12, 0x15, 0x2e, 0x70, 0x61, 0x79, 0x6d,
	0x65, 0x6e, 0x74, 0x2e, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x1a, 0x10, 0x2e, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x49, 0x6e, 0x76, 0x6f, 0x69,
	0x63, 0x65, 0x12, 0x3e, 0x0a, 0x11, 0x44, 0x69, 0x66, 0x66, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x17, 0x2e, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e,
	0x74, 0x2e, 0x44, 0x69, 0x66, 0x66, 0x53, 0x75, 0x62, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x10, 0x2e, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x49, 0x6e, 0x76, 0x6f, 0x69,
	0x63, 0x65, 0x12, 0x3f, 0x0a, 0x0c, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e,
	0x74, 0x73, 0x12, 0x1c, 0x2e, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x4c, 0x69, 0x73,
	0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x11, 0x2e, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x65,
	0x6e, 0x74, 0x73, 0x12, 0x30, 0x0a, 0x0a, 0x41, 0x64, 0x64, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e,
	0x74, 0x12, 0x10, 0x2e, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x43, 0x6f, 0x6d, 0x6d,
	0x65, 0x6e, 0x74, 0x1a, 0x10, 0x2e, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x43, 0x6f,
	0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x2a, 0x0a, 0x09, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x6c, 0x61,
	0x6e, 0x73, 0x12, 0x0d, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x45, 0x6d, 0x70, 0x74,
	0x79, 0x1a, 0x0e, 0x2e, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x50, 0x6c, 0x61, 0x6e,
	0x73, 0x12, 0x2c, 0x0a, 0x0d, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x49, 0x6e, 0x76, 0x6f, 0x69,
	0x63, 0x65, 0x12, 0x0a, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x49, 0x64, 0x1a, 0x0f,
	0x2e, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x12,
	0x39, 0x0a, 0x14, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x74, 0x49, 0x6e, 0x76, 0x6f, 0x69, 0x63,
	0x65, 0x54, 0x6f, 0x48, 0x74, 0x6d, 0x6c, 0x12, 0x10, 0x2e, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e,
	0x74, 0x2e, 0x49, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x1a, 0x0f, 0x2e, 0x70, 0x61, 0x79, 0x6d,
	0x65, 0x6e, 0x74, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x3f, 0x0a, 0x0f, 0x47, 0x65,
	0x74, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x61, 0x74, 0x65, 0x12, 0x15, 0x2e,
	0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x52, 0x61, 0x74, 0x65, 0x1a, 0x15, 0x2e, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x45,
	0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x61, 0x74, 0x65, 0x12, 0x33, 0x0a, 0x0d, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x12, 0x13, 0x2e, 0x70,
	0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x50, 0x61, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x0d, 0x2e, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x42, 0x69, 0x6c, 0x6c,
	0x12, 0x33, 0x0a, 0x08, 0x4c, 0x69, 0x73, 0x74, 0x4c, 0x6f, 0x67, 0x73, 0x12, 0x18, 0x2e, 0x70,
	0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4c, 0x6f, 0x67, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0d, 0x2e, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74,
	0x2e, 0x4c, 0x6f, 0x67, 0x73, 0x12, 0x45, 0x0a, 0x13, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50,
	0x72, 0x6f, 0x6d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x16, 0x2e, 0x70,
	0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x50, 0x72, 0x6f, 0x6d, 0x6f, 0x74, 0x69, 0x6f, 0x6e,
	0x43, 0x6f, 0x64, 0x65, 0x1a, 0x16, 0x2e, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x50,
	0x72, 0x6f, 0x6d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x3b, 0x0a, 0x10,
	0x47, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x6d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65,
	0x12, 0x0f, 0x2e, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x1a, 0x16, 0x2e, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x50, 0x72, 0x6f, 0x6d,
	0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x40, 0x0a, 0x10, 0x55, 0x73, 0x65,
	0x50, 0x72, 0x6f, 0x6d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1d, 0x2e,
	0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x50, 0x72, 0x6f, 0x6d, 0x6f, 0x74, 0x69, 0x6f,
	0x6e, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0d, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x4e, 0x0a, 0x15, 0x56,
	0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x6d, 0x6f, 0x74, 0x69, 0x6f, 0x6e,
	0x43, 0x6f, 0x64, 0x65, 0x12, 0x1d, 0x2e, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x50,
	0x72, 0x6f, 0x6d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x50, 0x72,
	0x6f, 0x6d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x4f, 0x0a, 0x11, 0x4c,
	0x69, 0x73, 0x74, 0x50, 0x72, 0x6f, 0x6d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65,
	0x12, 0x21, 0x2e, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x50,
	0x72, 0x6f, 0x6d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x17, 0x2e, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x50, 0x72,
	0x6f, 0x6d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x73, 0x12, 0x30, 0x0a, 0x13,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x6d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x43,
	0x6f, 0x64, 0x65, 0x12, 0x0a, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x49, 0x64, 0x1a,
	0x0d, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x43,
	0x0a, 0x0e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x52, 0x65, 0x66, 0x65, 0x72, 0x72, 0x61, 0x6c,
	0x12, 0x1e, 0x2e, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63,
	0x68, 0x52, 0x65, 0x66, 0x65, 0x72, 0x72, 0x65, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x11, 0x2e, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72,
	0x72, 0x61, 0x6c, 0x12, 0x2c, 0x0a, 0x0b, 0x47, 0x65, 0x74, 0x52, 0x65, 0x66, 0x65, 0x72, 0x72,
	0x61, 0x6c, 0x12, 0x0a, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x49, 0x64, 0x1a, 0x11,
	0x2e, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x72, 0x61,
	0x6c, 0x12, 0x3b, 0x0a, 0x0f, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x6f, 0x70, 0x52, 0x65, 0x66, 0x65,
	0x72, 0x72, 0x61, 0x6c, 0x12, 0x0d, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x45, 0x6d,
	0x70, 0x74, 0x79, 0x1a, 0x19, 0x2e, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x52, 0x65,
	0x66, 0x65, 0x72, 0x72, 0x61, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x36,
	0x0a, 0x0e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x66, 0x65, 0x72, 0x72, 0x61, 0x6c,
	0x12, 0x11, 0x2e, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72,
	0x72, 0x61, 0x6c, 0x1a, 0x11, 0x2e, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x52, 0x65,
	0x66, 0x65, 0x72, 0x72, 0x61, 0x6c, 0x12, 0x3f, 0x0a, 0x13, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x66, 0x65, 0x72, 0x72, 0x65, 0x64, 0x12, 0x0a, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x49, 0x64, 0x1a, 0x1c, 0x2e, 0x70, 0x61, 0x79, 0x6d,
	0x65, 0x6e, 0x74, 0x2e, 0x4c, 0x6f, 0x67, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65,
	0x66, 0x65, 0x72, 0x72, 0x65, 0x64, 0x73, 0x12, 0x4b, 0x0a, 0x19, 0x4c, 0x69, 0x73, 0x74, 0x42,
	0x69, 0x6c, 0x6c, 0x42, 0x79, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x66, 0x65,
	0x72, 0x72, 0x65, 0x64, 0x12, 0x0a, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x49, 0x64,
	0x1a, 0x22, 0x2e, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x4c, 0x6f, 0x67, 0x42, 0x69,
	0x6c, 0x6c, 0x42, 0x79, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x66, 0x65, 0x72,
	0x72, 0x65, 0x64, 0x73, 0x12, 0x49, 0x0a, 0x18, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x61, 0x69, 0x64,
	0x46, 0x6f, 0x72, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x66, 0x65, 0x72, 0x72, 0x65, 0x72,
	0x12, 0x0a, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x49, 0x64, 0x1a, 0x21, 0x2e, 0x70,
	0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x4c, 0x6f, 0x67, 0x50, 0x61, 0x69, 0x64, 0x46, 0x6f,
	0x72, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x66, 0x65, 0x72, 0x72, 0x65, 0x72, 0x73, 0x12,
	0x47, 0x0a, 0x14, 0x50, 0x61, 0x69, 0x64, 0x46, 0x6f, 0x72, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x52,
	0x65, 0x66, 0x65, 0x72, 0x72, 0x65, 0x72, 0x12, 0x20, 0x2e, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e,
	0x74, 0x2e, 0x4c, 0x6f, 0x67, 0x50, 0x61, 0x69, 0x64, 0x46, 0x6f, 0x72, 0x41, 0x67, 0x65, 0x6e,
	0x74, 0x52, 0x65, 0x66, 0x65, 0x72, 0x72, 0x65, 0x72, 0x1a, 0x0d, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x32, 0x3a, 0x0a, 0x06, 0x50, 0x75, 0x62, 0x73,
	0x75, 0x62, 0x12, 0x30, 0x0a, 0x07, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x12, 0x16, 0x2e,
	0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x1a, 0x0d, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x45,
	0x6d, 0x70, 0x74, 0x79, 0x32, 0x3e, 0x0a, 0x08, 0x52, 0x65, 0x61, 0x6c, 0x74, 0x69, 0x6d, 0x65,
	0x12, 0x32, 0x0a, 0x09, 0x53, 0x68, 0x61, 0x72, 0x64, 0x53, 0x65, 0x6e, 0x64, 0x12, 0x16, 0x2e,
	0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x1a, 0x0d, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x45,
	0x6d, 0x70, 0x74, 0x79, 0x32, 0x89, 0x08, 0x0a, 0x0d, 0x57, 0x69, 0x64, 0x67, 0x65, 0x74, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x29, 0x0a, 0x04, 0x52, 0x65, 0x61, 0x64, 0x12, 0x0a,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x49, 0x64, 0x1a, 0x15, 0x2e, 0x68, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x2e, 0x57, 0x69, 0x64, 0x67, 0x65, 0x74, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e,
	0x67, 0x12, 0x36, 0x0a, 0x06, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x15, 0x2e, 0x68, 0x65,
	0x61, 0x64, 0x65, 0x72, 0x2e, 0x57, 0x69, 0x64, 0x67, 0x65, 0x74, 0x53, 0x65, 0x74, 0x74, 0x69,
	0x6e, 0x67, 0x1a, 0x15, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x57, 0x69, 0x64, 0x67,
	0x65, 0x74, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x38, 0x0a, 0x0f, 0x52, 0x65, 0x61,
	0x64, 0x55, 0x73, 0x65, 0x72, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x0a, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x49, 0x64, 0x1a, 0x19, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x2e, 0x57, 0x69, 0x64, 0x67, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x53, 0x65, 0x74, 0x74,
	0x69, 0x6e, 0x67, 0x12, 0x2c, 0x0a, 0x0c, 0x52, 0x65, 0x61, 0x64, 0x43, 0x61, 0x6d, 0x70, 0x61,
	0x69, 0x67, 0x6e, 0x12, 0x0a, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x49, 0x64, 0x1a,
	0x10, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x43, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67,
	0x6e, 0x12, 0x2e, 0x0a, 0x0d, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67,
	0x6e, 0x73, 0x12, 0x0a, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x49, 0x64, 0x1a, 0x11,
	0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x43, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e,
	0x73, 0x12, 0x34, 0x0a, 0x0e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x61, 0x6d, 0x70, 0x61,
	0x69, 0x67, 0x6e, 0x12, 0x10, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x43, 0x61, 0x6d,
	0x70, 0x61, 0x69, 0x67, 0x6e, 0x1a, 0x10, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x43,
	0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x12, 0x34, 0x0a, 0x0e, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x43, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x12, 0x10, 0x2e, 0x68, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x2e, 0x43, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x1a, 0x10, 0x2e, 0x68, 0x65,
	0x61, 0x64, 0x65, 0x72, 0x2e, 0x43, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x12, 0x31, 0x0a,
	0x0e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x12,
	0x10, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x43, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67,
	0x6e, 0x1a, 0x0d, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79,
	0x12, 0x3a, 0x0a, 0x10, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x49, 0x6d, 0x70, 0x72, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x49, 0x6d,
	0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x1a, 0x12, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x2e, 0x49, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x3a, 0x0a, 0x10,
	0x53, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x12, 0x12, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x1a, 0x12, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x43, 0x6f,
	0x6e, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x52, 0x0a, 0x18, 0x53, 0x75, 0x62, 0x6d,
	0x69, 0x74, 0x55, 0x73, 0x65, 0x72, 0x43, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x1a, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x55, 0x73,
	0x65, 0x72, 0x43, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x1a, 0x1a, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x43, 0x61,
	0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x4f, 0x0a, 0x0e,
	0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x43, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x12, 0x1d,
	0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x43, 0x61,
	0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e,
	0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x43, 0x61, 0x6d,
	0x70, 0x61, 0x69, 0x67, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x41, 0x0a,
	0x0f, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73,
	0x12, 0x19, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x13, 0x2e, 0x68, 0x65,
	0x61, 0x64, 0x65, 0x72, 0x2e, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73,
	0x12, 0x4b, 0x0a, 0x11, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x19, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x43,
	0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x1b, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x12, 0x3b, 0x0a,
	0x0b, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x15, 0x2e, 0x68,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x65, 0x64, 0x49, 0x6d,
	0x61, 0x67, 0x65, 0x1a, 0x15, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x55, 0x70, 0x6c,
	0x6f, 0x61, 0x64, 0x65, 0x64, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x37, 0x0a, 0x11, 0x4c, 0x69,
	0x73, 0x74, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x65, 0x64, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x12,
	0x0a, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x49, 0x64, 0x1a, 0x16, 0x2e, 0x68, 0x65,
	0x61, 0x64, 0x65, 0x72, 0x2e, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x65, 0x64, 0x49, 0x6d, 0x61,
	0x67, 0x65, 0x73, 0x12, 0x3b, 0x0a, 0x13, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x55, 0x70, 0x6c,
	0x6f, 0x61, 0x64, 0x65, 0x64, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x15, 0x2e, 0x68, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x2e, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x65, 0x64, 0x49, 0x6d, 0x61, 0x67,
	0x65, 0x1a, 0x0d, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79,
	0x32, 0x98, 0x01, 0x0a, 0x06, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x12, 0x46, 0x0a, 0x0b, 0x53,
	0x65, 0x61, 0x72, 0x63, 0x68, 0x55, 0x73, 0x65, 0x72, 0x73, 0x12, 0x1a, 0x2e, 0x68, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x55, 0x73, 0x65, 0x72, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1b, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e,
	0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x55, 0x73, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x46, 0x0a, 0x0b, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x4e, 0x6f, 0x74,
	0x65, 0x73, 0x12, 0x1a, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x53, 0x65, 0x61, 0x72,
	0x63, 0x68, 0x4e, 0x6f, 0x74, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1b,
	0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x4e, 0x6f,
	0x74, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x32, 0xae, 0x04, 0x0a, 0x08,
	0x42, 0x71, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x54, 0x0a, 0x16, 0x41, 0x67, 0x67, 0x72,
	0x65, 0x67, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x12, 0x1c, 0x2e, 0x62, 0x71, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x43, 0x6f,
	0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x1a, 0x1c, 0x2e, 0x62, 0x71, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x43, 0x6f, 0x6e, 0x76,
	0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x59,
	0x0a, 0x1a, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x76, 0x65,
	0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x61, 0x74, 0x65, 0x73, 0x12, 0x19, 0x2e, 0x62,
	0x71, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x44, 0x69, 0x6d, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x1a, 0x20, 0x2e, 0x62, 0x71, 0x72, 0x65, 0x70, 0x6f,
	0x72, 0x74, 0x2e, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x61, 0x74, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x57, 0x0a, 0x19, 0x41, 0x67, 0x67,
	0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x54, 0x61, 0x67, 0x73, 0x12, 0x19, 0x2e, 0x62, 0x71, 0x72, 0x65, 0x70, 0x6f, 0x72,
	0x74, 0x2e, 0x44, 0x69, 0x6d, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x46, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x1a, 0x1f, 0x2e, 0x62, 0x71, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x43, 0x6f, 0x6e,
	0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x61, 0x67, 0x52, 0x65, 0x70, 0x6f,
	0x72, 0x74, 0x12, 0x63, 0x0a, 0x1b, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x43,
	0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x67, 0x65, 0x6e, 0x74,
	0x73, 0x12, 0x21, 0x2e, 0x62, 0x71, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x43, 0x6f, 0x6e,
	0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x46, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x1a, 0x21, 0x2e, 0x62, 0x71, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x2e,
	0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x67, 0x65, 0x6e,
	0x74, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x55, 0x0a, 0x18, 0x41, 0x67, 0x67, 0x72, 0x65,
	0x67, 0x61, 0x74, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x4f, 0x66, 0x41, 0x67, 0x65,
	0x6e, 0x74, 0x73, 0x12, 0x19, 0x2e, 0x62, 0x71, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x44,
	0x69, 0x6d, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x1a, 0x1e,
	0x2e, 0x62, 0x71, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x4f, 0x66, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x5c,
	0x0a, 0x1c, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x41, 0x67, 0x65, 0x6e, 0x74,
	0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0x12, 0x19,
	0x2e, 0x62, 0x71, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x44, 0x69, 0x6d, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x1a, 0x21, 0x2e, 0x62, 0x71, 0x72, 0x65,
	0x70, 0x6f, 0x72, 0x74, 0x2e, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61,
	0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x32, 0xc9, 0x05, 0x0a,
	0x06, 0x42, 0x69, 0x7a, 0x62, 0x6f, 0x74, 0x12, 0x24, 0x0a, 0x08, 0x4c, 0x69, 0x73, 0x74, 0x42,
	0x6f, 0x74, 0x73, 0x12, 0x0a, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x49, 0x64, 0x1a,
	0x0c, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x42, 0x6f, 0x74, 0x73, 0x12, 0x21, 0x0a,
	0x06, 0x47, 0x65, 0x74, 0x42, 0x6f, 0x74, 0x12, 0x0a, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2e, 0x49, 0x64, 0x1a, 0x0b, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x42, 0x6f, 0x74,
	0x12, 0x2d, 0x0a, 0x11, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x42, 0x6f, 0x74, 0x52, 0x75, 0x6e,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x0b, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x42,
	0x6f, 0x74, 0x1a, 0x0b, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x42, 0x6f, 0x74, 0x12,
	0x25, 0x0a, 0x09, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x42, 0x6f, 0x74, 0x12, 0x0b, 0x2e, 0x68,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x42, 0x6f, 0x74, 0x1a, 0x0b, 0x2e, 0x68, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x2e, 0x42, 0x6f, 0x74, 0x12, 0x25, 0x0a, 0x09, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x42, 0x6f, 0x74, 0x12, 0x0b, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x42, 0x6f, 0x74,
	0x1a, 0x0b, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x42, 0x6f, 0x74, 0x12, 0x26, 0x0a,
	0x09, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x42, 0x6f, 0x74, 0x12, 0x0a, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2e, 0x49, 0x64, 0x1a, 0x0d, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e,
	0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x2c, 0x0a, 0x07, 0x4f, 0x6e, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x12, 0x12, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x52, 0x75, 0x6e, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x0d, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x45, 0x6d,
	0x70, 0x74, 0x79, 0x12, 0x2d, 0x0a, 0x08, 0x53, 0x74, 0x61, 0x72, 0x74, 0x42, 0x6f, 0x74, 0x12,
	0x12, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x52, 0x75, 0x6e, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x0d, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x45, 0x6d, 0x70,
	0x74, 0x79, 0x12, 0x2c, 0x0a, 0x07, 0x53, 0x74, 0x6f, 0x70, 0x42, 0x6f, 0x74, 0x12, 0x12, 0x2e,
	0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x52, 0x75, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x0d, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79,
	0x12, 0x2e, 0x0a, 0x09, 0x54, 0x72, 0x79, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x2e,
	0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x52, 0x75, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x0d, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79,
	0x12, 0x2f, 0x0a, 0x08, 0x44, 0x6f, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x2e, 0x68,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x52, 0x75, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x0f, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x12, 0x40, 0x0a, 0x09, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x42, 0x6f, 0x74, 0x12, 0x18,
	0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x42, 0x6f,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x19, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x42, 0x6f, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x46, 0x0a, 0x0b, 0x4c, 0x69, 0x73, 0x74, 0x4f, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x73, 0x12, 0x1a, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x4c, 0x69, 0x73, 0x74,
	0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1b,
	0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4f, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2d, 0x0a, 0x11, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x42, 0x6f, 0x74, 0x52, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e,
	0x12, 0x0b, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x42, 0x6f, 0x74, 0x1a, 0x0b, 0x2e,
	0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x42, 0x6f, 0x74, 0x12, 0x2c, 0x0a, 0x10, 0x4c, 0x69,
	0x73, 0x74, 0x42, 0x6f, 0x74, 0x52, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x0a,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x49, 0x64, 0x1a, 0x0c, 0x2e, 0x68, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x2e, 0x42, 0x6f, 0x74, 0x73, 0x32, 0xba, 0x03, 0x0a, 0x08, 0x53, 0x65, 0x6e,
	0x64, 0x62, 0x61, 0x63, 0x6b, 0x12, 0x31, 0x0a, 0x0d, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x57,
	0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x12, 0x0f, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e,
	0x57, 0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x1a, 0x0f, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x2e, 0x57, 0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x12, 0x34, 0x0a, 0x0b, 0x50, 0x69, 0x6e, 0x67,
	0x57, 0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x12, 0x0a, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2e, 0x49, 0x64, 0x1a, 0x19, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x57, 0x65, 0x62,
	0x68, 0x6f, 0x6f, 0x6b, 0x54, 0x65, 0x73, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x2a,
	0x0a, 0x0d, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x57, 0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x12,
	0x0a, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x49, 0x64, 0x1a, 0x0d, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x2c, 0x0a, 0x0c, 0x4c, 0x69,
	0x73, 0x74, 0x57, 0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x73, 0x12, 0x0a, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2e, 0x49, 0x64, 0x1a, 0x10, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e,
	0x57, 0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x73, 0x12, 0x2a, 0x0a, 0x0b, 0x52, 0x65, 0x61, 0x64,
	0x57, 0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x12, 0x0a, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2e, 0x49, 0x64, 0x1a, 0x0f, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x57, 0x65, 0x62,
	0x68, 0x6f, 0x6f, 0x6b, 0x12, 0x31, 0x0a, 0x0d, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x57, 0x65,
	0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x12, 0x0f, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x57,
	0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x1a, 0x0f, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e,
	0x57, 0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x12, 0x5a, 0x0a, 0x19, 0x4c, 0x69, 0x73, 0x74, 0x52,
	0x65, 0x63, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65,
	0x72, 0x69, 0x65, 0x73, 0x12, 0x22, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x52, 0x65,
	0x63, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72,
	0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x19, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x2e, 0x57, 0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72,
	0x69, 0x65, 0x73, 0x12, 0x30, 0x0a, 0x10, 0x53, 0x65, 0x6e, 0x64, 0x57, 0x65, 0x62, 0x68, 0x6f,
	0x6f, 0x6b, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x0d, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x1a, 0x0d, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e,
	0x45, 0x6d, 0x70, 0x74, 0x79, 0x42, 0x19, 0x5a, 0x17, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e,
	0x63, 0x6f, 0x6d, 0x2f, 0x73, 0x75, 0x62, 0x69, 0x7a, 0x2f, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var file_service_proto_goTypes = []interface{}{
	(*api.Request)(nil),                             // 0: api.Request
	(*account.AgentGroup)(nil),                      // 1: account.AgentGroup
	(*common.Id)(nil),                               // 2: common.Id
	(*account.ResetPasswordRequest)(nil),            // 3: account.ResetPasswordRequest
	(*account.NewPassword)(nil),                     // 4: account.NewPassword
	(*account.Agent)(nil),                           // 5: account.Agent
	(*account.Token)(nil),                           // 6: account.Token
	(*account.Account)(nil),                         // 7: account.Account
	(*account.CreateAccountRequest)(nil),            // 8: account.CreateAccountRequest
	(*account.CountRequest)(nil),                    // 9: account.CountRequest
	(*account.GroupMember)(nil),                     // 10: account.GroupMember
	(*account.SyncPublicHolidaysRequest)(nil),       // 11: account.SyncPublicHolidaysRequest
	(*common.Empty)(nil),                            // 12: common.Empty
	(*account.Currency)(nil),                        // 13: account.Currency
	(*account.ExchangeRateRequest)(nil),             // 14: account.ExchangeRateRequest
	(*account.ExchangeRate)(nil),                    // 15: account.ExchangeRate
	(*user.UserSearchRequest)(nil),                  // 16: user.UserSearchRequest
	(*LeadSearchRequest)(nil),                       // 17: header.LeadSearchRequest
	(*User)(nil),                                    // 18: header.User
	(*UserReportRequest)(nil),                       // 19: header.UserReportRequest
	(*CountTotalRequest)(nil),                       // 20: header.CountTotalRequest
	(*common.PingRequest)(nil),                      // 21: common.PingRequest
	(*user.SearchNoteRequest)(nil),                  // 22: user.SearchNoteRequest
	(*common.Ids)(nil),                              // 23: common.Ids
	(*LocationParams)(nil),                          // 24: header.LocationParams
	(*UserInfoParams)(nil),                          // 25: header.UserInfoParams
	(*EventParams)(nil),                             // 26: header.EventParams
	(*PresencesRequest)(nil),                        // 27: header.PresencesRequest
	(*ListNotesRequest)(nil),                        // 28: header.ListNotesRequest
	(*Note)(nil),                                    // 29: header.Note
	(*DeleteNoteRequest)(nil),                       // 30: header.DeleteNoteRequest
	(*GetNoteRequest)(nil),                          // 31: header.GetNoteRequest
	(*Automation)(nil),                              // 32: header.Automation
	(*AttributeDefinition)(nil),                     // 33: header.AttributeDefinition
	(*DeleteAttrRequest)(nil),                       // 34: header.DeleteAttrRequest
	(*common.UpdatePermRequest)(nil),                // 35: common.UpdatePermRequest
	(*common.UpdateStateRequest)(nil),               // 36: common.UpdateStateRequest
	(*common.ReadPermRequest)(nil),                  // 37: common.ReadPermRequest
	(*conversation.CountByTagsRequest)(nil),         // 38: conversation.CountByTagsRequest
	(*conversation.AvgResponseTimeRequest)(nil),     // 39: conversation.AvgResponseTimeRequest
	(*conversation.CountReportRequest)(nil),         // 40: conversation.CountReportRequest
	(*conversation.ReportConversationsRequest)(nil), // 41: conversation.ReportConversationsRequest
	(*conversation.AvailibilityReportRequest)(nil),  // 42: conversation.AvailibilityReportRequest
	(*Rule)(nil),                                    // 43: header.Rule
	(*AssignRequest)(nil),                           // 44: header.AssignRequest
	(*Event)(nil),                                   // 45: header.Event
	(*StartRequest)(nil),                            // 46: header.StartRequest
	(*ListConversationsRequest)(nil),                // 47: header.ListConversationsRequest
	(*TagRequest)(nil),                              // 48: header.TagRequest
	(*ConversationMember)(nil),                      // 49: header.ConversationMember
	(*Conversation)(nil),                            // 50: header.Conversation
	(*conversation.SearchConversationRequest)(nil),  // 51: conversation.SearchConversationRequest
	(*conversation.ConversationListRequest)(nil),    // 52: conversation.ConversationListRequest
	(*EndchatSetting)(nil),                          // 53: header.EndchatSetting
	(*BotTerminated)(nil),                           // 54: header.BotTerminated
	(*AutomationEvent)(nil),                         // 55: header.AutomationEvent
	(*Template)(nil),                                // 56: header.Template
	(*SearchTemplate)(nil),                          // 57: header.SearchTemplate
	(*Tag)(nil),                                     // 58: header.Tag
	(*Integration)(nil),                             // 59: header.Integration
	(*AvailabilityCheckRequest)(nil),                // 60: header.AvailabilityCheckRequest
	(*conversation.Ticket)(nil),                     // 61: conversation.Ticket
	(*conversation.DeleteTicketRequest)(nil),        // 62: conversation.DeleteTicketRequest
	(*conversation.GetTicketRequest)(nil),           // 63: conversation.GetTicketRequest
	(*conversation.TicketListRequest)(nil),          // 64: conversation.TicketListRequest
	(*conversation.ServiceLevelAgreement)(nil),      // 65: conversation.ServiceLevelAgreement
	(*conversation.CountTicketRequest)(nil),         // 66: conversation.CountTicketRequest
	(*conversation.AvgResolveTimeRequest)(nil),      // 67: conversation.AvgResolveTimeRequest
	(*Client)(nil),                                  // 68: header.Client
	(*content.Content)(nil),                         // 69: content.Content
	(*content.SearchContentRequest)(nil),            // 70: content.SearchContentRequest
	(*content.LookupRequest)(nil),                   // 71: content.LookupRequest
	(*content.LinkRequest)(nil),                     // 72: content.LinkRequest
	(*ListUserEventsRequest)(nil),                   // 73: header.ListUserEventsRequest
	(*UserEvent)(nil),                               // 74: header.UserEvent
	(*ListConversationEventsRequest)(nil),           // 75: header.ListConversationEventsRequest
	(*SearchMessageRequest)(nil),                    // 76: header.SearchMessageRequest
	(*FileHeader)(nil),                              // 77: header.FileHeader
	(*FileRequest)(nil),                             // 78: header.FileRequest
	(*noti5.Setting)(nil),                           // 79: noti5.Setting
	(*noti5.PushNoti)(nil),                          // 80: noti5.PushNoti
	(*noti5.Token)(nil),                             // 81: noti5.Token
	(*notibox.ListRequest)(nil),                     // 82: notibox.ListRequest
	(*payment.Bill)(nil),                            // 83: payment.Bill
	(*payment.ExchangeRate)(nil),                    // 84: payment.ExchangeRate
	(*account.SearchSubRequest)(nil),                // 85: account.SearchSubRequest
	(*payment.Subscription)(nil),                    // 86: payment.Subscription
	(*payment.PaymentMethod)(nil),                   // 87: payment.PaymentMethod
	(*payment.PayRequest)(nil),                      // 88: payment.PayRequest
	(*payment.Invoice)(nil),                         // 89: payment.Invoice
	(*payment.ListInvoiceRequest)(nil),              // 90: payment.ListInvoiceRequest
	(*payment.DiffSubRequest)(nil),                  // 91: payment.DiffSubRequest
	(*payment.ListCommentsRequest)(nil),             // 92: payment.ListCommentsRequest
	(*payment.Comment)(nil),                         // 93: payment.Comment
	(*payment.ListLogsRequest)(nil),                 // 94: payment.ListLogsRequest
	(*payment.PromotionCode)(nil),                   // 95: payment.PromotionCode
	(*payment.String)(nil),                          // 96: payment.String
	(*payment.PromotionCodeRequest)(nil),            // 97: payment.PromotionCodeRequest
	(*payment.ListPromotionCodeRequest)(nil),        // 98: payment.ListPromotionCodeRequest
	(*payment.SearchReferredRequest)(nil),           // 99: payment.SearchReferredRequest
	(*payment.Referral)(nil),                        // 100: payment.Referral
	(*payment.LogPaidForAgentReferrer)(nil),         // 101: payment.LogPaidForAgentReferrer
	(*PublishMessage)(nil),                          // 102: header.PublishMessage
	(*WidgetSetting)(nil),                           // 103: header.WidgetSetting
	(*Campaign)(nil),                                // 104: header.Campaign
	(*Impression)(nil),                              // 105: header.Impression
	(*Conversion)(nil),                              // 106: header.Conversion
	(*UserCampaignStatus)(nil),                      // 107: header.UserCampaignStatus
	(*ReportCampaignRequest)(nil),                   // 108: header.ReportCampaignRequest
	(*ConversionRequest)(nil),                       // 109: header.ConversionRequest
	(*UploadedImage)(nil),                           // 110: header.UploadedImage
	(*SearchUsersRequest)(nil),                      // 111: header.SearchUsersRequest
	(*SearchNotesRequest)(nil),                      // 112: header.SearchNotesRequest
	(*bqreport.ConversationFilter)(nil),             // 113: bqreport.ConversationFilter
	(*bqreport.DimensionFilter)(nil),                // 114: bqreport.DimensionFilter
	(*bqreport.ConversationAgentFilter)(nil),        // 115: bqreport.ConversationAgentFilter
	(*Bot)(nil),                                     // 116: header.Bot
	(*RunRequest)(nil),                              // 117: header.RunRequest
	(*ReportBotRequest)(nil),                        // 118: header.ReportBotRequest
	(*ListObjectsRequest)(nil),                      // 119: header.ListObjectsRequest
	(*Webhook)(nil),                                 // 120: header.Webhook
	(*RecentIndexDeliveryRequest)(nil),              // 121: header.RecentIndexDeliveryRequest
	(*api.Response)(nil),                            // 122: api.Response
	(*account.Agents)(nil),                          // 123: account.Agents
	(*account.Count)(nil),                           // 124: account.Count
	(*account.AgentGroups)(nil),                     // 125: account.AgentGroups
	(*account.BusinessHours)(nil),                   // 126: account.BusinessHours
	(*account.Currencies)(nil),                      // 127: account.Currencies
	(*account.ExchangeRates)(nil),                   // 128: account.ExchangeRates
	(*UserSearchResult)(nil),                        // 129: header.UserSearchResult
	(*LeadSearchResult)(nil),                        // 130: header.LeadSearchResult
	(*UserReportResult)(nil),                        // 131: header.UserReportResult
	(*CountTotalResponse)(nil),                      // 132: header.CountTotalResponse
	(*common.Pong)(nil),                             // 133: common.Pong
	(*user.SearchNoteResponse)(nil),                 // 134: user.SearchNoteResponse
	(*Users)(nil),                                   // 135: header.Users
	(*Locations)(nil),                               // 136: header.Locations
	(*Events)(nil),                                  // 137: header.Events
	(*LocationMetrics)(nil),                         // 138: header.LocationMetrics
	(*PageMetrics)(nil),                             // 139: header.PageMetrics
	(*SourceMetrics)(nil),                           // 140: header.SourceMetrics
	(*UserMetric)(nil),                              // 141: header.UserMetric
	(*PresencesResponse)(nil),                       // 142: header.PresencesResponse
	(*Notes)(nil),                                   // 143: header.Notes
	(*Automations)(nil),                             // 144: header.Automations
	(*AttributeDefinitions)(nil),                    // 145: header.AttributeDefinitions
	(*common.Permission)(nil),                       // 146: common.Permission
	(*conversation.CountByTagsResponse)(nil),        // 147: conversation.CountByTagsResponse
	(*conversation.AvgResponseTimeResponse)(nil),    // 148: conversation.AvgResponseTimeResponse
	(*conversation.TotalConversationResponse)(nil),  // 149: conversation.TotalConversationResponse
	(*conversation.ReportResponse)(nil),             // 150: conversation.ReportResponse
	(*account.Presence)(nil),                        // 151: account.Presence
	(*Route)(nil),                                   // 152: header.Route
	(*RouteResult)(nil),                             // 153: header.RouteResult
	(*Conversations)(nil),                           // 154: header.Conversations
	(*conversation.SearchConversationResponse)(nil), // 155: conversation.SearchConversationResponse
	(*conversation.ConversationListResponse)(nil),   // 156: conversation.ConversationListResponse
	(*Templates)(nil),                               // 157: header.Templates
	(*Tags)(nil),                                    // 158: header.Tags
	(*Integrations)(nil),                            // 159: header.Integrations
	(*AvailabilityCheckResult)(nil),                 // 160: header.AvailabilityCheckResult
	(*conversation.ESTickets)(nil),                  // 161: conversation.ESTickets
	(*conversation.ServiceLevelAgreements)(nil),     // 162: conversation.ServiceLevelAgreements
	(*conversation.CountTicketResponse)(nil),        // 163: conversation.CountTicketResponse
	(*conversation.AvgResolveTimeResponse)(nil),     // 164: conversation.AvgResolveTimeResponse
	(*AuthorizedClient)(nil),                        // 165: header.AuthorizedClient
	(*content.Contents)(nil),                        // 166: content.Contents
	(*PresignResult)(nil),                           // 167: header.PresignResult
	(*File)(nil),                                    // 168: header.File
	(*notibox.Notifications)(nil),                   // 169: notibox.Notifications
	(*notibox.Notibox)(nil),                         // 170: notibox.Notibox
	(*account.AccSubs)(nil),                         // 171: account.AccSubs
	(*payment.PaymentMethods)(nil),                  // 172: payment.PaymentMethods
	(*payment.Invoices)(nil),                        // 173: payment.Invoices
	(*payment.Comments)(nil),                        // 174: payment.Comments
	(*payment.Plans)(nil),                           // 175: payment.Plans
	(*payment.Logs)(nil),                            // 176: payment.Logs
	(*payment.PromotionCodes)(nil),                  // 177: payment.PromotionCodes
	(*payment.ReferralResponse)(nil),                // 178: payment.ReferralResponse
	(*payment.LogAccountReferreds)(nil),             // 179: payment.LogAccountReferreds
	(*payment.LogBillByAccountReferreds)(nil),       // 180: payment.LogBillByAccountReferreds
	(*payment.LogPaidForAgentReferrers)(nil),        // 181: payment.LogPaidForAgentReferrers
	(*WidgetUserSetting)(nil),                       // 182: header.WidgetUserSetting
	(*Campaigns)(nil),                               // 183: header.Campaigns
	(*ReportCampaignResponse)(nil),                  // 184: header.ReportCampaignResponse
	(*Conversions)(nil),                             // 185: header.Conversions
	(*ConversionsExported)(nil),                     // 186: header.ConversionsExported
	(*UploadedImages)(nil),                          // 187: header.UploadedImages
	(*SearchUsersResponse)(nil),                     // 188: header.SearchUsersResponse
	(*SearchNotesResponse)(nil),                     // 189: header.SearchNotesResponse
	(*bqreport.ConversationReport)(nil),             // 190: bqreport.ConversationReport
	(*bqreport.ConversationRateReport)(nil),         // 191: bqreport.ConversationRateReport
	(*bqreport.ConversationTagReport)(nil),          // 192: bqreport.ConversationTagReport
	(*bqreport.ConversationAgentReport)(nil),        // 193: bqreport.ConversationAgentReport
	(*bqreport.MessageOfAgentReport)(nil),           // 194: bqreport.MessageOfAgentReport
	(*bqreport.AgentAvailabilityReport)(nil),        // 195: bqreport.AgentAvailabilityReport
	(*Bots)(nil),                                    // 196: header.Bots
	(*Actions)(nil),                                 // 197: header.Actions
	(*ReportBotResponse)(nil),                       // 198: header.ReportBotResponse
	(*ListObjectsResponse)(nil),                     // 199: header.ListObjectsResponse
	(*WebhookTestResult)(nil),                       // 200: header.WebhookTestResult
	(*Webhooks)(nil),                                // 201: header.Webhooks
	(*WebhookDeliveries)(nil),                       // 202: header.WebhookDeliveries
}
var file_service_proto_depIdxs = []int32{
	0,   // 0: header.ApiServer.Call:input_type -> api.Request
	1,   // 1: header.AccountMgr.CreateGroup:input_type -> account.AgentGroup
	1,   // 2: header.AccountMgr.UpdateGroup:input_type -> account.AgentGroup
	2,   // 3: header.AccountMgr.GetGroup:input_type -> common.Id
	3,   // 4: header.AccountMgr.RequestResetPassword:input_type -> account.ResetPasswordRequest
	4,   // 5: header.AccountMgr.UpdatePassword:input_type -> account.NewPassword
	5,   // 6: header.AccountMgr.UpdateAgent:input_type -> account.Agent
	2,   // 7: header.AccountMgr.DeleteAgent:input_type -> common.Id
	5,   // 8: header.AccountMgr.RequestChangeEmail:input_type -> account.Agent
	6,   // 9: header.AccountMgr.ConfirmChangeEmail:input_type -> account.Token
	4,   // 10: header.AccountMgr.AcceptInvitation:input_type -> account.NewPassword
	6,   // 11: header.AccountMgr.GetInvitation:input_type -> account.Token
	5,   // 12: header.AccountMgr.InviteAgent:input_type -> account.Agent
	2,   // 13: header.AccountMgr.GetAgent:input_type -> common.Id
	6,   // 14: header.AccountMgr.ConfirmAccount:input_type -> account.Token
	2,   // 15: header.AccountMgr.GetAccount:input_type -> common.Id
	7,   // 16: header.AccountMgr.UpdateAccount:input_type -> account.Account
	8,   // 17: header.AccountMgr.CreateAccount:input_type -> account.CreateAccountRequest
	2,   // 18: header.AccountMgr.ListAgents:input_type -> common.Id
	9,   // 19: header.AccountMgr.CountAccount:input_type -> account.CountRequest
	2,   // 20: header.AccountMgr.DeleteGroup:input_type -> common.Id
	2,   // 21: header.AccountMgr.ListGroups:input_type -> common.Id
	10,  // 22: header.AccountMgr.AddAgentToGroup:input_type -> account.GroupMember
	10,  // 23: header.AccountMgr.RemoveAgentFromGroup:input_type -> account.GroupMember
	5,   // 24: header.AccountMgr.ChangeEmail:input_type -> account.Agent
	5,   // 25: header.AccountMgr.IntegrateBot:input_type -> account.Agent
	11,  // 26: header.AccountMgr.SyncPublicHolidays:input_type -> account.SyncPublicHolidaysRequest
	2,   // 27: header.AccountMgr.TransferOwner:input_type -> common.Id
	12,  // 28: header.CurrencyMgr.ListCurrencies:input_type -> common.Empty
	2,   // 29: header.CurrencyMgr.GetCurrency:input_type -> common.Id
	13,  // 30: header.CurrencyMgr.CreateCurrency:input_type -> account.Currency
	13,  // 31: header.CurrencyMgr.UpdateCurrency:input_type -> account.Currency
	2,   // 32: header.CurrencyMgr.DeleteCurrency:input_type -> common.Id
	14,  // 33: header.CurrencyMgr.ListExchangeRates:input_type -> account.ExchangeRateRequest
	14,  // 34: header.CurrencyMgr.GetExchangeRate:input_type -> account.ExchangeRateRequest
	15,  // 35: header.CurrencyMgr.CreateExchangeRate:input_type -> account.ExchangeRate
	14,  // 36: header.CurrencyMgr.DeleteExchangeRate:input_type -> account.ExchangeRateRequest
	16,  // 37: header.UserMgr.SearchUsers:input_type -> user.UserSearchRequest
	17,  // 38: header.UserMgr.SearchLeads:input_type -> header.LeadSearchRequest
	17,  // 39: header.UserMgr.ListLeads:input_type -> header.LeadSearchRequest
	18,  // 40: header.UserMgr.CreateUser:input_type -> header.User
	18,  // 41: header.UserMgr.UpdateUser:input_type -> header.User
	2,   // 42: header.UserMgr.ReadUser:input_type -> common.Id
	19,  // 43: header.UserMgr.ReportUsers:input_type -> header.UserReportRequest
	20,  // 44: header.UserMgr.CountTotal:input_type -> header.CountTotalRequest
	21,  // 45: header.UserMgr.Ping:input_type -> common.PingRequest
	22,  // 46: header.UserMgr.SearchNote:input_type -> user.SearchNoteRequest
	23,  // 47: header.UserMgr.MatchUsers:input_type -> common.Ids
	24,  // 48: header.LiveMgr.SearchLocations:input_type -> header.LocationParams
	25,  // 49: header.LiveMgr.FilterActiveUsers:input_type -> header.UserInfoParams
	26,  // 50: header.LiveMgr.TopEvents:input_type -> header.EventParams
	2,   // 51: header.LiveMgr.TopLocations:input_type -> common.Id
	2,   // 52: header.LiveMgr.TopPages:input_type -> common.Id
	2,   // 53: header.LiveMgr.TopSources:input_type -> common.Id
	2,   // 54: header.LiveMgr.CountActiveUsers:input_type -> common.Id
	27,  // 55: header.LiveMgr.Presences:input_type -> header.PresencesRequest
	28,  // 56: header.NoteMgr.ListNotes:input_type -> header.ListNotesRequest
	29,  // 57: header.NoteMgr.AddNote:input_type -> header.Note
	29,  // 58: header.NoteMgr.UpdateNote:input_type -> header.Note
	30,  // 59: header.NoteMgr.DeleteNote:input_type -> header.DeleteNoteRequest
	31,  // 60: header.NoteMgr.GetNote:input_type -> header.GetNoteRequest
	22,  // 61: header.NoteMgr.SearchNote:input_type -> user.SearchNoteRequest
	2,   // 62: header.AutomationMgr.ListAutomations:input_type -> common.Id
	32,  // 63: header.AutomationMgr.UpdateAutomation:input_type -> header.Automation
	2,   // 64: header.AutomationMgr.DeleteAutomation:input_type -> common.Id
	2,   // 65: header.AutomationMgr.ReadAutomation:input_type -> common.Id
	32,  // 66: header.AutomationMgr.CreateAutomation:input_type -> header.Automation
	12,  // 67: header.AttributeMgr.ListAttributeDefinitions:input_type -> common.Empty
	33,  // 68: header.AttributeMgr.CreateAttributeDefinition:input_type -> header.AttributeDefinition
	33,  // 69: header.AttributeMgr.UpdateAttributeDefinition:input_type -> header.AttributeDefinition
	34,  // 70: header.AttributeMgr.DeleteAttributeDefinition:input_type -> header.DeleteAttrRequest
	35,  // 71: header.Perm.Update:input_type -> common.UpdatePermRequest
	36,  // 72: header.Perm.UpdateState:input_type -> common.UpdateStateRequest
	37,  // 73: header.Perm.ReadPerm:input_type -> common.ReadPermRequest
	38,  // 74: header.ConversationReporter.CountConversationsByTags:input_type -> conversation.CountByTagsRequest
	39,  // 75: header.ConversationReporter.GetAvgResponseTimes:input_type -> conversation.AvgResponseTimeRequest
	39,  // 76: header.ConversationReporter.GetTotalConversation:input_type -> conversation.AvgResponseTimeRequest
	40,  // 77: header.ConversationReporter.ReportConversations:input_type -> conversation.CountReportRequest
	41,  // 78: header.ConversationReporter.ReportConversations2:input_type -> conversation.ReportConversationsRequest
	42,  // 79: header.ConversationReporter.ReportAvailibilities:input_type -> conversation.AvailibilityReportRequest
	2,   // 80: header.AgentPresenceMgr.ReadPresence:input_type -> common.Id
	2,   // 81: header.AgentPresenceMgr.UpdatePresence:input_type -> common.Id
	43,  // 82: header.RuleMgr.UpdateRule:input_type -> header.Rule
	43,  // 83: header.RuleMgr.CreateRule:input_type -> header.Rule
	2,   // 84: header.RuleMgr.DeleteRule:input_type -> common.Id
	2,   // 85: header.RuleMgr.ReadRule:input_type -> common.Id
	2,   // 86: header.RuleMgr.ListRules:input_type -> common.Id
	44,  // 87: header.ConversationMgr.AssignRule:input_type -> header.AssignRequest
	45,  // 88: header.ConversationMgr.PongMessage:input_type -> header.Event
	46,  // 89: header.ConversationMgr.StartConversation:input_type -> header.StartRequest
	2,   // 90: header.ConversationMgr.EndConversation:input_type -> common.Id
	2,   // 91: header.ConversationMgr.GetConversation:input_type -> common.Id
	47,  // 92: header.ConversationMgr.ListConversations:input_type -> header.ListConversationsRequest
	23,  // 93: header.ConversationMgr.MatchConversations:input_type -> common.Ids
	48,  // 94: header.ConversationMgr.TagConversation:input_type -> header.TagRequest
	48,  // 95: header.ConversationMgr.UntagConversation:input_type -> header.TagRequest
	49,  // 96: header.ConversationMgr.JoinConversation:input_type -> header.ConversationMember
	49,  // 97: header.ConversationMgr.LeftConversation:input_type -> header.ConversationMember
	2,   // 98: header.ConversationMgr.Typing:input_type -> common.Id
	21,  // 99: header.ConversationMgr.Ping:input_type -> common.PingRequest
	50,  // 100: header.ConversationMgr.UpdateConversationInfo:input_type -> header.Conversation
	51,  // 101: header.ConversationMgr.SearchConversation:input_type -> conversation.SearchConversationRequest
	52,  // 102: header.ConversationMgr.ListConversations2:input_type -> conversation.ConversationListRequest
	50,  // 103: header.ConversationMgr.UpdateMuteConversation:input_type -> header.Conversation
	50,  // 104: header.ConversationMgr.UnwatchConversation:input_type -> header.Conversation
	50,  // 105: header.ConversationMgr.MarkReadConversation:input_type -> header.Conversation
	53,  // 106: header.ConversationMgr.UpdateEndchatSetting:input_type -> header.EndchatSetting
	2,   // 107: header.ConversationMgr.GetEndchatSetting:input_type -> common.Id
	54,  // 108: header.ConversationMgr.TerminateBot:input_type -> header.BotTerminated
	55,  // 109: header.ConversationSyncMgr.FireConvertTicket:input_type -> header.AutomationEvent
	55,  // 110: header.ConversationSyncMgr.FireSendChatTranscriptEmail:input_type -> header.AutomationEvent
	55,  // 111: header.ConversationSyncMgr.FireUpdateConversationState:input_type -> header.AutomationEvent
	56,  // 112: header.TemplateMgr.CreateTemplate:input_type -> header.Template
	56,  // 113: header.TemplateMgr.UpdateTemplate:input_type -> header.Template
	2,   // 114: header.TemplateMgr.DeleteTemplate:input_type -> common.Id
	2,   // 115: header.TemplateMgr.GetTemplate:input_type -> common.Id
	57,  // 116: header.TemplateMgr.ListTemplates:input_type -> header.SearchTemplate
	2,   // 117: header.TemplateMgr.PickTemplate:input_type -> common.Id
	58,  // 118: header.TagMgr.CreateTag:input_type -> header.Tag
	58,  // 119: header.TagMgr.UpdateTag:input_type -> header.Tag
	2,   // 120: header.TagMgr.DeleteTag:input_type -> common.Id
	2,   // 121: header.TagMgr.ListTags:input_type -> common.Id
	2,   // 122: header.TagMgr.GetTag:input_type -> common.Id
	2,   // 123: header.IntegrationMgr.Deintegrate:input_type -> common.Id
	2,   // 124: header.IntegrationMgr.ListIntegrations:input_type -> common.Id
	59,  // 125: header.IntegrationMgr.Integrate:input_type -> header.Integration
	60,  // 126: header.IntegrationMgr.CheckAvailability:input_type -> header.AvailabilityCheckRequest
	61,  // 127: header.TicketMgr.CreateTicket:input_type -> conversation.Ticket
	61,  // 128: header.TicketMgr.UpdateTicket:input_type -> conversation.Ticket
	62,  // 129: header.TicketMgr.DeleteTicket:input_type -> conversation.DeleteTicketRequest
	63,  // 130: header.TicketMgr.GetTicket:input_type -> conversation.GetTicketRequest
	64,  // 131: header.TicketMgr.SearchTicket:input_type -> conversation.TicketListRequest
	12,  // 132: header.TicketMgr.ListSLAs:input_type -> common.Empty
	2,   // 133: header.TicketMgr.GetSLA:input_type -> common.Id
	65,  // 134: header.TicketMgr.CreateSLA:input_type -> conversation.ServiceLevelAgreement
	65,  // 135: header.TicketMgr.UpdateSLA:input_type -> conversation.ServiceLevelAgreement
	2,   // 136: header.TicketMgr.DeleteSLA:input_type -> common.Id
	66,  // 137: header.TicketMgr.CountTicket:input_type -> conversation.CountTicketRequest
	67,  // 138: header.TicketMgr.GetAvgResolveTimes:input_type -> conversation.AvgResolveTimeRequest
	68,  // 139: header.ClientMgr.Create:input_type -> header.Client
	68,  // 140: header.ClientMgr.Update:input_type -> header.Client
	68,  // 141: header.ClientMgr.Read:input_type -> header.Client
	2,   // 142: header.ClientMgr.ListIntegratedClients:input_type -> common.Id
	2,   // 143: header.ClientMgr.ListAuthorizedClients:input_type -> common.Id
	69,  // 144: header.ServiceContentManager.UpsertContent:input_type -> content.Content
	2,   // 145: header.ServiceContentManager.DeleteContent:input_type -> common.Id
	2,   // 146: header.ServiceContentManager.GetContent:input_type -> common.Id
	70,  // 147: header.ServiceContentManager.SearchContents:input_type -> content.SearchContentRequest
	71,  // 148: header.ServiceContentManager.LookupContentsByUrl:input_type -> content.LookupRequest
	72,  // 149: header.ServiceContentManager.LinkContentsToUrl:input_type -> content.LinkRequest
	73,  // 150: header.EventMgr.SearchEvents:input_type -> header.ListUserEventsRequest
	74,  // 151: header.EventMgr.CreateEvent:input_type -> header.UserEvent
	45,  // 152: header.ConversationEventReader.SendMessage:input_type -> header.Event
	45,  // 153: header.ConversationEventReader.UpdateMessage:input_type -> header.Event
	75,  // 154: header.ConversationEventReader.ListEvents:input_type -> header.ListConversationEventsRequest
	76,  // 155: header.ConversationEventReader.SearchEvents:input_type -> header.SearchMessageRequest
	77,  // 156: header.FileMgr.Presign:input_type -> header.FileHeader
	78,  // 157: header.FileMgr.Read:input_type -> header.FileRequest
	78,  // 158: header.FileMgr.Uploaded:input_type -> header.FileRequest
	2,   // 159: header.Noti5Service.ReadNotificationSetting:input_type -> common.Id
	79,  // 160: header.Noti5Service.UpdateNotificationSetting:input_type -> noti5.Setting
	80,  // 161: header.Noti5Service.Noti:input_type -> noti5.PushNoti
	81,  // 162: header.Noti5Service.AddToken:input_type -> noti5.Token
	81,  // 163: header.Noti5Service.RemoveToken:input_type -> noti5.Token
	81,  // 164: header.Noti5Service.CheckTokenExists:input_type -> noti5.Token
	2,   // 165: header.NotiboxService.ReadAllNotis:input_type -> common.Id
	82,  // 166: header.NotiboxService.ListNotis:input_type -> notibox.ListRequest
	2,   // 167: header.NotiboxService.GetNotibox:input_type -> common.Id
	83,  // 168: header.SubizInternalPaymentMgr.CreateBill:input_type -> payment.Bill
	84,  // 169: header.SubizInternalPaymentMgr.UpdateExchangeRate:input_type -> payment.ExchangeRate
	85,  // 170: header.PaymentMgr.SearchSub:input_type -> account.SearchSubRequest
	86,  // 171: header.PaymentMgr.Purchase:input_type -> payment.Subscription
	86,  // 172: header.PaymentMgr.UpdateSubscription:input_type -> payment.Subscription
	2,   // 173: header.PaymentMgr.GetSubscription:input_type -> common.Id
	87,  // 174: header.PaymentMgr.AddPaymentMethod:input_type -> payment.PaymentMethod
	87,  // 175: header.PaymentMgr.UpdatePaymentMethod:input_type -> payment.PaymentMethod
	2,   // 176: header.PaymentMgr.DeletePaymentMethod:input_type -> common.Id
	2,   // 177: header.PaymentMgr.ListPaymentMethods:input_type -> common.Id
	88,  // 178: header.PaymentMgr.Pay:input_type -> payment.PayRequest
	2,   // 179: header.PaymentMgr.ListInvoices:input_type -> common.Id
	89,  // 180: header.PaymentMgr.CreateInvoice:input_type -> payment.Invoice
	89,  // 181: header.PaymentMgr.UpdateInvoice:input_type -> payment.Invoice
	90,  // 182: header.PaymentMgr.FilterInvoices:input_type -> payment.ListInvoiceRequest
	86,  // 183: header.PaymentMgr.DraftInvoice:input_type -> payment.Subscription
	91,  // 184: header.PaymentMgr.DiffSubscriptions:input_type -> payment.DiffSubRequest
	92,  // 185: header.PaymentMgr.ListComments:input_type -> payment.ListCommentsRequest
	93,  // 186: header.PaymentMgr.AddComment:input_type -> payment.Comment
	12,  // 187: header.PaymentMgr.ListPlans:input_type -> common.Empty
	2,   // 188: header.PaymentMgr.ExportInvoice:input_type -> common.Id
	89,  // 189: header.PaymentMgr.ConvertInvoiceToHtml:input_type -> payment.Invoice
	84,  // 190: header.PaymentMgr.GetExchangeRate:input_type -> payment.ExchangeRate
	88,  // 191: header.PaymentMgr.TransferMoney:input_type -> payment.PayRequest
	94,  // 192: header.PaymentMgr.ListLogs:input_type -> payment.ListLogsRequest
	95,  // 193: header.PaymentMgr.CreatePromotionCode:input_type -> payment.PromotionCode
	96,  // 194: header.PaymentMgr.GetPromotionCode:input_type -> payment.String
	97,  // 195: header.PaymentMgr.UsePromotionCode:input_type -> payment.PromotionCodeRequest
	97,  // 196: header.PaymentMgr.ValidatePromotionCode:input_type -> payment.PromotionCodeRequest
	98,  // 197: header.PaymentMgr.ListPromotionCode:input_type -> payment.ListPromotionCodeRequest
	2,   // 198: header.PaymentMgr.DeletePromotionCode:input_type -> common.Id
	99,  // 199: header.PaymentMgr.SearchReferral:input_type -> payment.SearchReferredRequest
	2,   // 200: header.PaymentMgr.GetReferral:input_type -> common.Id
	12,  // 201: header.PaymentMgr.ListTopReferral:input_type -> common.Empty
	100, // 202: header.PaymentMgr.UpdateReferral:input_type -> payment.Referral
	2,   // 203: header.PaymentMgr.ListAccountReferred:input_type -> common.Id
	2,   // 204: header.PaymentMgr.ListBillByAccountReferred:input_type -> common.Id
	2,   // 205: header.PaymentMgr.ListPaidForAgentReferrer:input_type -> common.Id
	101, // 206: header.PaymentMgr.PaidForAgentReferrer:input_type -> payment.LogPaidForAgentReferrer
	102, // 207: header.Pubsub.Publish:input_type -> header.PublishMessage
	102, // 208: header.Realtime.ShardSend:input_type -> header.PublishMessage
	2,   // 209: header.WidgetService.Read:input_type -> common.Id
	103, // 210: header.WidgetService.Update:input_type -> header.WidgetSetting
	2,   // 211: header.WidgetService.ReadUserSetting:input_type -> common.Id
	2,   // 212: header.WidgetService.ReadCampaign:input_type -> common.Id
	2,   // 213: header.WidgetService.ListCampaigns:input_type -> common.Id
	104, // 214: header.WidgetService.CreateCampaign:input_type -> header.Campaign
	104, // 215: header.WidgetService.UpdateCampaign:input_type -> header.Campaign
	104, // 216: header.WidgetService.DeleteCampaign:input_type -> header.Campaign
	105, // 217: header.WidgetService.SubmitImpression:input_type -> header.Impression
	106, // 218: header.WidgetService.SubmitConversion:input_type -> header.Conversion
	107, // 219: header.WidgetService.SubmitUserCampaignStatus:input_type -> header.UserCampaignStatus
	108, // 220: header.WidgetService.ReportCampaign:input_type -> header.ReportCampaignRequest
	109, // 221: header.WidgetService.ListConversions:input_type -> header.ConversionRequest
	109, // 222: header.WidgetService.ExportConversions:input_type -> header.ConversionRequest
	110, // 223: header.WidgetService.UploadImage:input_type -> header.UploadedImage
	2,   // 224: header.WidgetService.ListUploadedImage:input_type -> common.Id
	110, // 225: header.WidgetService.DeleteUploadedImage:input_type -> header.UploadedImage
	111, // 226: header.Search.SearchUsers:input_type -> header.SearchUsersRequest
	112, // 227: header.Search.SearchNotes:input_type -> header.SearchNotesRequest
	113, // 228: header.Bqreport.AggregateConversations:input_type -> bqreport.ConversationFilter
	114, // 229: header.Bqreport.AggregateConversationRates:input_type -> bqreport.DimensionFilter
	114, // 230: header.Bqreport.AggregateConversationTags:input_type -> bqreport.DimensionFilter
	115, // 231: header.Bqreport.AggregateConversationAgents:input_type -> bqreport.ConversationAgentFilter
	114, // 232: header.Bqreport.AggregateMessageOfAgents:input_type -> bqreport.DimensionFilter
	114, // 233: header.Bqreport.AggregateAgentAvailabilities:input_type -> bqreport.DimensionFilter
	2,   // 234: header.Bizbot.ListBots:input_type -> common.Id
	2,   // 235: header.Bizbot.GetBot:input_type -> common.Id
	116, // 236: header.Bizbot.UpdateBotRunState:input_type -> header.Bot
	116, // 237: header.Bizbot.CreateBot:input_type -> header.Bot
	116, // 238: header.Bizbot.UpdateBot:input_type -> header.Bot
	2,   // 239: header.Bizbot.DeleteBot:input_type -> common.Id
	117, // 240: header.Bizbot.OnEvent:input_type -> header.RunRequest
	117, // 241: header.Bizbot.StartBot:input_type -> header.RunRequest
	117, // 242: header.Bizbot.StopBot:input_type -> header.RunRequest
	117, // 243: header.Bizbot.TryAction:input_type -> header.RunRequest
	117, // 244: header.Bizbot.DoAction:input_type -> header.RunRequest
	118, // 245: header.Bizbot.ReportBot:input_type -> header.ReportBotRequest
	119, // 246: header.Bizbot.ListObjects:input_type -> header.ListObjectsRequest
	116, // 247: header.Bizbot.CreateBotRevision:input_type -> header.Bot
	2,   // 248: header.Bizbot.ListBotRevisions:input_type -> common.Id
	120, // 249: header.Sendback.CreateWebhook:input_type -> header.Webhook
	2,   // 250: header.Sendback.PingWebhook:input_type -> common.Id
	2,   // 251: header.Sendback.DeleteWebhook:input_type -> common.Id
	2,   // 252: header.Sendback.ListWebhooks:input_type -> common.Id
	2,   // 253: header.Sendback.ReadWebhook:input_type -> common.Id
	120, // 254: header.Sendback.UpdateWebhook:input_type -> header.Webhook
	121, // 255: header.Sendback.ListRecentIndexDeliveries:input_type -> header.RecentIndexDeliveryRequest
	45,  // 256: header.Sendback.SendWebhookEvent:input_type -> header.Event
	122, // 257: header.ApiServer.Call:output_type -> api.Response
	1,   // 258: header.AccountMgr.CreateGroup:output_type -> account.AgentGroup
	1,   // 259: header.AccountMgr.UpdateGroup:output_type -> account.AgentGroup
	1,   // 260: header.AccountMgr.GetGroup:output_type -> account.AgentGroup
	12,  // 261: header.AccountMgr.RequestResetPassword:output_type -> common.Empty
	5,   // 262: header.AccountMgr.UpdatePassword:output_type -> account.Agent
	5,   // 263: header.AccountMgr.UpdateAgent:output_type -> account.Agent
	5,   // 264: header.AccountMgr.DeleteAgent:output_type -> account.Agent
	12,  // 265: header.AccountMgr.RequestChangeEmail:output_type -> common.Empty
	5,   // 266: header.AccountMgr.ConfirmChangeEmail:output_type -> account.Agent
	5,   // 267: header.AccountMgr.AcceptInvitation:output_type -> account.Agent
	5,   // 268: header.AccountMgr.GetInvitation:output_type -> account.Agent
	5,   // 269: header.AccountMgr.InviteAgent:output_type -> account.Agent
	5,   // 270: header.AccountMgr.GetAgent:output_type -> account.Agent
	7,   // 271: header.AccountMgr.ConfirmAccount:output_type -> account.Account
	7,   // 272: header.AccountMgr.GetAccount:output_type -> account.Account
	7,   // 273: header.AccountMgr.UpdateAccount:output_type -> account.Account
	7,   // 274: header.AccountMgr.CreateAccount:output_type -> account.Account
	123, // 275: header.AccountMgr.ListAgents:output_type -> account.Agents
	124, // 276: header.AccountMgr.CountAccount:output_type -> account.Count
	12,  // 277: header.AccountMgr.DeleteGroup:output_type -> common.Empty
	125, // 278: header.AccountMgr.ListGroups:output_type -> account.AgentGroups
	12,  // 279: header.AccountMgr.AddAgentToGroup:output_type -> common.Empty
	12,  // 280: header.AccountMgr.RemoveAgentFromGroup:output_type -> common.Empty
	5,   // 281: header.AccountMgr.ChangeEmail:output_type -> account.Agent
	5,   // 282: header.AccountMgr.IntegrateBot:output_type -> account.Agent
	126, // 283: header.AccountMgr.SyncPublicHolidays:output_type -> account.BusinessHours
	5,   // 284: header.AccountMgr.TransferOwner:output_type -> account.Agent
	127, // 285: header.CurrencyMgr.ListCurrencies:output_type -> account.Currencies
	13,  // 286: header.CurrencyMgr.GetCurrency:output_type -> account.Currency
	13,  // 287: header.CurrencyMgr.CreateCurrency:output_type -> account.Currency
	13,  // 288: header.CurrencyMgr.UpdateCurrency:output_type -> account.Currency
	12,  // 289: header.CurrencyMgr.DeleteCurrency:output_type -> common.Empty
	128, // 290: header.CurrencyMgr.ListExchangeRates:output_type -> account.ExchangeRates
	15,  // 291: header.CurrencyMgr.GetExchangeRate:output_type -> account.ExchangeRate
	15,  // 292: header.CurrencyMgr.CreateExchangeRate:output_type -> account.ExchangeRate
	12,  // 293: header.CurrencyMgr.DeleteExchangeRate:output_type -> common.Empty
	129, // 294: header.UserMgr.SearchUsers:output_type -> header.UserSearchResult
	130, // 295: header.UserMgr.SearchLeads:output_type -> header.LeadSearchResult
	130, // 296: header.UserMgr.ListLeads:output_type -> header.LeadSearchResult
	2,   // 297: header.UserMgr.CreateUser:output_type -> common.Id
	2,   // 298: header.UserMgr.UpdateUser:output_type -> common.Id
	18,  // 299: header.UserMgr.ReadUser:output_type -> header.User
	131, // 300: header.UserMgr.ReportUsers:output_type -> header.UserReportResult
	132, // 301: header.UserMgr.CountTotal:output_type -> header.CountTotalResponse
	133, // 302: header.UserMgr.Ping:output_type -> common.Pong
	134, // 303: header.UserMgr.SearchNote:output_type -> user.SearchNoteResponse
	135, // 304: header.UserMgr.MatchUsers:output_type -> header.Users
	136, // 305: header.LiveMgr.SearchLocations:output_type -> header.Locations
	135, // 306: header.LiveMgr.FilterActiveUsers:output_type -> header.Users
	137, // 307: header.LiveMgr.TopEvents:output_type -> header.Events
	138, // 308: header.LiveMgr.TopLocations:output_type -> header.LocationMetrics
	139, // 309: header.LiveMgr.TopPages:output_type -> header.PageMetrics
	140, // 310: header.LiveMgr.TopSources:output_type -> header.SourceMetrics
	141, // 311: header.LiveMgr.CountActiveUsers:output_type -> header.UserMetric
	142, // 312: header.LiveMgr.Presences:output_type -> header.PresencesResponse
	143, // 313: header.NoteMgr.ListNotes:output_type -> header.Notes
	29,  // 314: header.NoteMgr.AddNote:output_type -> header.Note
	29,  // 315: header.NoteMgr.UpdateNote:output_type -> header.Note
	12,  // 316: header.NoteMgr.DeleteNote:output_type -> common.Empty
	29,  // 317: header.NoteMgr.GetNote:output_type -> header.Note
	134, // 318: header.NoteMgr.SearchNote:output_type -> user.SearchNoteResponse
	144, // 319: header.AutomationMgr.ListAutomations:output_type -> header.Automations
	32,  // 320: header.AutomationMgr.UpdateAutomation:output_type -> header.Automation
	12,  // 321: header.AutomationMgr.DeleteAutomation:output_type -> common.Empty
	32,  // 322: header.AutomationMgr.ReadAutomation:output_type -> header.Automation
	32,  // 323: header.AutomationMgr.CreateAutomation:output_type -> header.Automation
	145, // 324: header.AttributeMgr.ListAttributeDefinitions:output_type -> header.AttributeDefinitions
	33,  // 325: header.AttributeMgr.CreateAttributeDefinition:output_type -> header.AttributeDefinition
	33,  // 326: header.AttributeMgr.UpdateAttributeDefinition:output_type -> header.AttributeDefinition
	12,  // 327: header.AttributeMgr.DeleteAttributeDefinition:output_type -> common.Empty
	12,  // 328: header.Perm.Update:output_type -> common.Empty
	12,  // 329: header.Perm.UpdateState:output_type -> common.Empty
	146, // 330: header.Perm.ReadPerm:output_type -> common.Permission
	147, // 331: header.ConversationReporter.CountConversationsByTags:output_type -> conversation.CountByTagsResponse
	148, // 332: header.ConversationReporter.GetAvgResponseTimes:output_type -> conversation.AvgResponseTimeResponse
	149, // 333: header.ConversationReporter.GetTotalConversation:output_type -> conversation.TotalConversationResponse
	150, // 334: header.ConversationReporter.ReportConversations:output_type -> conversation.ReportResponse
	150, // 335: header.ConversationReporter.ReportConversations2:output_type -> conversation.ReportResponse
	150, // 336: header.ConversationReporter.ReportAvailibilities:output_type -> conversation.ReportResponse
	151, // 337: header.AgentPresenceMgr.ReadPresence:output_type -> account.Presence
	151, // 338: header.AgentPresenceMgr.UpdatePresence:output_type -> account.Presence
	43,  // 339: header.RuleMgr.UpdateRule:output_type -> header.Rule
	43,  // 340: header.RuleMgr.CreateRule:output_type -> header.Rule
	12,  // 341: header.RuleMgr.DeleteRule:output_type -> common.Empty
	43,  // 342: header.RuleMgr.ReadRule:output_type -> header.Rule
	152, // 343: header.RuleMgr.ListRules:output_type -> header.Route
	153, // 344: header.ConversationMgr.AssignRule:output_type -> header.RouteResult
	45,  // 345: header.ConversationMgr.PongMessage:output_type -> header.Event
	50,  // 346: header.ConversationMgr.StartConversation:output_type -> header.Conversation
	50,  // 347: header.ConversationMgr.EndConversation:output_type -> header.Conversation
	50,  // 348: header.ConversationMgr.GetConversation:output_type -> header.Conversation
	154, // 349: header.ConversationMgr.ListConversations:output_type -> header.Conversations
	154, // 350: header.ConversationMgr.MatchConversations:output_type -> header.Conversations
	12,  // 351: header.ConversationMgr.TagConversation:output_type -> common.Empty
	12,  // 352: header.ConversationMgr.UntagConversation:output_type -> common.Empty
	12,  // 353: header.ConversationMgr.JoinConversation:output_type -> common.Empty
	12,  // 354: header.ConversationMgr.LeftConversation:output_type -> common.Empty
	12,  // 355: header.ConversationMgr.Typing:output_type -> common.Empty
	133, // 356: header.ConversationMgr.Ping:output_type -> common.Pong
	50,  // 357: header.ConversationMgr.UpdateConversationInfo:output_type -> header.Conversation
	155, // 358: header.ConversationMgr.SearchConversation:output_type -> conversation.SearchConversationResponse
	156, // 359: header.ConversationMgr.ListConversations2:output_type -> conversation.ConversationListResponse
	12,  // 360: header.ConversationMgr.UpdateMuteConversation:output_type -> common.Empty
	12,  // 361: header.ConversationMgr.UnwatchConversation:output_type -> common.Empty
	12,  // 362: header.ConversationMgr.MarkReadConversation:output_type -> common.Empty
	53,  // 363: header.ConversationMgr.UpdateEndchatSetting:output_type -> header.EndchatSetting
	53,  // 364: header.ConversationMgr.GetEndchatSetting:output_type -> header.EndchatSetting
	45,  // 365: header.ConversationMgr.TerminateBot:output_type -> header.Event
	12,  // 366: header.ConversationSyncMgr.FireConvertTicket:output_type -> common.Empty
	12,  // 367: header.ConversationSyncMgr.FireSendChatTranscriptEmail:output_type -> common.Empty
	12,  // 368: header.ConversationSyncMgr.FireUpdateConversationState:output_type -> common.Empty
	56,  // 369: header.TemplateMgr.CreateTemplate:output_type -> header.Template
	56,  // 370: header.TemplateMgr.UpdateTemplate:output_type -> header.Template
	12,  // 371: header.TemplateMgr.DeleteTemplate:output_type -> common.Empty
	56,  // 372: header.TemplateMgr.GetTemplate:output_type -> header.Template
	157, // 373: header.TemplateMgr.ListTemplates:output_type -> header.Templates
	12,  // 374: header.TemplateMgr.PickTemplate:output_type -> common.Empty
	58,  // 375: header.TagMgr.CreateTag:output_type -> header.Tag
	58,  // 376: header.TagMgr.UpdateTag:output_type -> header.Tag
	12,  // 377: header.TagMgr.DeleteTag:output_type -> common.Empty
	158, // 378: header.TagMgr.ListTags:output_type -> header.Tags
	58,  // 379: header.TagMgr.GetTag:output_type -> header.Tag
	12,  // 380: header.IntegrationMgr.Deintegrate:output_type -> common.Empty
	159, // 381: header.IntegrationMgr.ListIntegrations:output_type -> header.Integrations
	59,  // 382: header.IntegrationMgr.Integrate:output_type -> header.Integration
	160, // 383: header.IntegrationMgr.CheckAvailability:output_type -> header.AvailabilityCheckResult
	61,  // 384: header.TicketMgr.CreateTicket:output_type -> conversation.Ticket
	61,  // 385: header.TicketMgr.UpdateTicket:output_type -> conversation.Ticket
	12,  // 386: header.TicketMgr.DeleteTicket:output_type -> common.Empty
	61,  // 387: header.TicketMgr.GetTicket:output_type -> conversation.Ticket
	161, // 388: header.TicketMgr.SearchTicket:output_type -> conversation.ESTickets
	162, // 389: header.TicketMgr.ListSLAs:output_type -> conversation.ServiceLevelAgreements
	65,  // 390: header.TicketMgr.GetSLA:output_type -> conversation.ServiceLevelAgreement
	65,  // 391: header.TicketMgr.CreateSLA:output_type -> conversation.ServiceLevelAgreement
	65,  // 392: header.TicketMgr.UpdateSLA:output_type -> conversation.ServiceLevelAgreement
	12,  // 393: header.TicketMgr.DeleteSLA:output_type -> common.Empty
	163, // 394: header.TicketMgr.CountTicket:output_type -> conversation.CountTicketResponse
	164, // 395: header.TicketMgr.GetAvgResolveTimes:output_type -> conversation.AvgResolveTimeResponse
	68,  // 396: header.ClientMgr.Create:output_type -> header.Client
	68,  // 397: header.ClientMgr.Update:output_type -> header.Client
	68,  // 398: header.ClientMgr.Read:output_type -> header.Client
	165, // 399: header.ClientMgr.ListIntegratedClients:output_type -> header.AuthorizedClient
	165, // 400: header.ClientMgr.ListAuthorizedClients:output_type -> header.AuthorizedClient
	69,  // 401: header.ServiceContentManager.UpsertContent:output_type -> content.Content
	12,  // 402: header.ServiceContentManager.DeleteContent:output_type -> common.Empty
	69,  // 403: header.ServiceContentManager.GetContent:output_type -> content.Content
	166, // 404: header.ServiceContentManager.SearchContents:output_type -> content.Contents
	166, // 405: header.ServiceContentManager.LookupContentsByUrl:output_type -> content.Contents
	12,  // 406: header.ServiceContentManager.LinkContentsToUrl:output_type -> common.Empty
	137, // 407: header.EventMgr.SearchEvents:output_type -> header.Events
	45,  // 408: header.EventMgr.CreateEvent:output_type -> header.Event
	45,  // 409: header.ConversationEventReader.SendMessage:output_type -> header.Event
	45,  // 410: header.ConversationEventReader.UpdateMessage:output_type -> header.Event
	137, // 411: header.ConversationEventReader.ListEvents:output_type -> header.Events
	137, // 412: header.ConversationEventReader.SearchEvents:output_type -> header.Events
	167, // 413: header.FileMgr.Presign:output_type -> header.PresignResult
	168, // 414: header.FileMgr.Read:output_type -> header.File
	168, // 415: header.FileMgr.Uploaded:output_type -> header.File
	79,  // 416: header.Noti5Service.ReadNotificationSetting:output_type -> noti5.Setting
	79,  // 417: header.Noti5Service.UpdateNotificationSetting:output_type -> noti5.Setting
	12,  // 418: header.Noti5Service.Noti:output_type -> common.Empty
	12,  // 419: header.Noti5Service.AddToken:output_type -> common.Empty
	12,  // 420: header.Noti5Service.RemoveToken:output_type -> common.Empty
	12,  // 421: header.Noti5Service.CheckTokenExists:output_type -> common.Empty
	12,  // 422: header.NotiboxService.ReadAllNotis:output_type -> common.Empty
	169, // 423: header.NotiboxService.ListNotis:output_type -> notibox.Notifications
	170, // 424: header.NotiboxService.GetNotibox:output_type -> notibox.Notibox
	83,  // 425: header.SubizInternalPaymentMgr.CreateBill:output_type -> payment.Bill
	84,  // 426: header.SubizInternalPaymentMgr.UpdateExchangeRate:output_type -> payment.ExchangeRate
	171, // 427: header.PaymentMgr.SearchSub:output_type -> account.AccSubs
	89,  // 428: header.PaymentMgr.Purchase:output_type -> payment.Invoice
	86,  // 429: header.PaymentMgr.UpdateSubscription:output_type -> payment.Subscription
	86,  // 430: header.PaymentMgr.GetSubscription:output_type -> payment.Subscription
	87,  // 431: header.PaymentMgr.AddPaymentMethod:output_type -> payment.PaymentMethod
	87,  // 432: header.PaymentMgr.UpdatePaymentMethod:output_type -> payment.PaymentMethod
	12,  // 433: header.PaymentMgr.DeletePaymentMethod:output_type -> common.Empty
	172, // 434: header.PaymentMgr.ListPaymentMethods:output_type -> payment.PaymentMethods
	83,  // 435: header.PaymentMgr.Pay:output_type -> payment.Bill
	173, // 436: header.PaymentMgr.ListInvoices:output_type -> payment.Invoices
	89,  // 437: header.PaymentMgr.CreateInvoice:output_type -> payment.Invoice
	89,  // 438: header.PaymentMgr.UpdateInvoice:output_type -> payment.Invoice
	173, // 439: header.PaymentMgr.FilterInvoices:output_type -> payment.Invoices
	89,  // 440: header.PaymentMgr.DraftInvoice:output_type -> payment.Invoice
	89,  // 441: header.PaymentMgr.DiffSubscriptions:output_type -> payment.Invoice
	174, // 442: header.PaymentMgr.ListComments:output_type -> payment.Comments
	93,  // 443: header.PaymentMgr.AddComment:output_type -> payment.Comment
	175, // 444: header.PaymentMgr.ListPlans:output_type -> payment.Plans
	96,  // 445: header.PaymentMgr.ExportInvoice:output_type -> payment.String
	96,  // 446: header.PaymentMgr.ConvertInvoiceToHtml:output_type -> payment.String
	84,  // 447: header.PaymentMgr.GetExchangeRate:output_type -> payment.ExchangeRate
	83,  // 448: header.PaymentMgr.TransferMoney:output_type -> payment.Bill
	176, // 449: header.PaymentMgr.ListLogs:output_type -> payment.Logs
	95,  // 450: header.PaymentMgr.CreatePromotionCode:output_type -> payment.PromotionCode
	95,  // 451: header.PaymentMgr.GetPromotionCode:output_type -> payment.PromotionCode
	12,  // 452: header.PaymentMgr.UsePromotionCode:output_type -> common.Empty
	95,  // 453: header.PaymentMgr.ValidatePromotionCode:output_type -> payment.PromotionCode
	177, // 454: header.PaymentMgr.ListPromotionCode:output_type -> payment.PromotionCodes
	12,  // 455: header.PaymentMgr.DeletePromotionCode:output_type -> common.Empty
	100, // 456: header.PaymentMgr.SearchReferral:output_type -> payment.Referral
	100, // 457: header.PaymentMgr.GetReferral:output_type -> payment.Referral
	178, // 458: header.PaymentMgr.ListTopReferral:output_type -> payment.ReferralResponse
	100, // 459: header.PaymentMgr.UpdateReferral:output_type -> payment.Referral
	179, // 460: header.PaymentMgr.ListAccountReferred:output_type -> payment.LogAccountReferreds
	180, // 461: header.PaymentMgr.ListBillByAccountReferred:output_type -> payment.LogBillByAccountReferreds
	181, // 462: header.PaymentMgr.ListPaidForAgentReferrer:output_type -> payment.LogPaidForAgentReferrers
	12,  // 463: header.PaymentMgr.PaidForAgentReferrer:output_type -> common.Empty
	12,  // 464: header.Pubsub.Publish:output_type -> common.Empty
	12,  // 465: header.Realtime.ShardSend:output_type -> common.Empty
	103, // 466: header.WidgetService.Read:output_type -> header.WidgetSetting
	103, // 467: header.WidgetService.Update:output_type -> header.WidgetSetting
	182, // 468: header.WidgetService.ReadUserSetting:output_type -> header.WidgetUserSetting
	104, // 469: header.WidgetService.ReadCampaign:output_type -> header.Campaign
	183, // 470: header.WidgetService.ListCampaigns:output_type -> header.Campaigns
	104, // 471: header.WidgetService.CreateCampaign:output_type -> header.Campaign
	104, // 472: header.WidgetService.UpdateCampaign:output_type -> header.Campaign
	12,  // 473: header.WidgetService.DeleteCampaign:output_type -> common.Empty
	105, // 474: header.WidgetService.SubmitImpression:output_type -> header.Impression
	106, // 475: header.WidgetService.SubmitConversion:output_type -> header.Conversion
	107, // 476: header.WidgetService.SubmitUserCampaignStatus:output_type -> header.UserCampaignStatus
	184, // 477: header.WidgetService.ReportCampaign:output_type -> header.ReportCampaignResponse
	185, // 478: header.WidgetService.ListConversions:output_type -> header.Conversions
	186, // 479: header.WidgetService.ExportConversions:output_type -> header.ConversionsExported
	110, // 480: header.WidgetService.UploadImage:output_type -> header.UploadedImage
	187, // 481: header.WidgetService.ListUploadedImage:output_type -> header.UploadedImages
	12,  // 482: header.WidgetService.DeleteUploadedImage:output_type -> common.Empty
	188, // 483: header.Search.SearchUsers:output_type -> header.SearchUsersResponse
	189, // 484: header.Search.SearchNotes:output_type -> header.SearchNotesResponse
	190, // 485: header.Bqreport.AggregateConversations:output_type -> bqreport.ConversationReport
	191, // 486: header.Bqreport.AggregateConversationRates:output_type -> bqreport.ConversationRateReport
	192, // 487: header.Bqreport.AggregateConversationTags:output_type -> bqreport.ConversationTagReport
	193, // 488: header.Bqreport.AggregateConversationAgents:output_type -> bqreport.ConversationAgentReport
	194, // 489: header.Bqreport.AggregateMessageOfAgents:output_type -> bqreport.MessageOfAgentReport
	195, // 490: header.Bqreport.AggregateAgentAvailabilities:output_type -> bqreport.AgentAvailabilityReport
	196, // 491: header.Bizbot.ListBots:output_type -> header.Bots
	116, // 492: header.Bizbot.GetBot:output_type -> header.Bot
	116, // 493: header.Bizbot.UpdateBotRunState:output_type -> header.Bot
	116, // 494: header.Bizbot.CreateBot:output_type -> header.Bot
	116, // 495: header.Bizbot.UpdateBot:output_type -> header.Bot
	12,  // 496: header.Bizbot.DeleteBot:output_type -> common.Empty
	12,  // 497: header.Bizbot.OnEvent:output_type -> common.Empty
	12,  // 498: header.Bizbot.StartBot:output_type -> common.Empty
	12,  // 499: header.Bizbot.StopBot:output_type -> common.Empty
	12,  // 500: header.Bizbot.TryAction:output_type -> common.Empty
	197, // 501: header.Bizbot.DoAction:output_type -> header.Actions
	198, // 502: header.Bizbot.ReportBot:output_type -> header.ReportBotResponse
	199, // 503: header.Bizbot.ListObjects:output_type -> header.ListObjectsResponse
	116, // 504: header.Bizbot.CreateBotRevision:output_type -> header.Bot
	196, // 505: header.Bizbot.ListBotRevisions:output_type -> header.Bots
	120, // 506: header.Sendback.CreateWebhook:output_type -> header.Webhook
	200, // 507: header.Sendback.PingWebhook:output_type -> header.WebhookTestResult
	12,  // 508: header.Sendback.DeleteWebhook:output_type -> common.Empty
	201, // 509: header.Sendback.ListWebhooks:output_type -> header.Webhooks
	120, // 510: header.Sendback.ReadWebhook:output_type -> header.Webhook
	120, // 511: header.Sendback.UpdateWebhook:output_type -> header.Webhook
	202, // 512: header.Sendback.ListRecentIndexDeliveries:output_type -> header.WebhookDeliveries
	12,  // 513: header.Sendback.SendWebhookEvent:output_type -> common.Empty
	257, // [257:514] is the sub-list for method output_type
	0,   // [0:257] is the sub-list for method input_type
	0,   // [0:0] is the sub-list for extension type_name
	0,   // [0:0] is the sub-list for extension extendee
	0,   // [0:0] is the sub-list for field type_name
}

func init() { file_service_proto_init() }
func file_service_proto_init() {
	if File_service_proto != nil {
		return
	}
	file_header_proto_init()
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_service_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   0,
			NumExtensions: 0,
			NumServices:   34,
		},
		GoTypes:           file_service_proto_goTypes,
		DependencyIndexes: file_service_proto_depIdxs,
	}.Build()
	File_service_proto = out.File
	file_service_proto_rawDesc = nil
	file_service_proto_goTypes = nil
	file_service_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// ApiServerClient is the client API for ApiServer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ApiServerClient interface {
	Call(ctx context.Context, in *api.Request, opts ...grpc.CallOption) (*api.Response, error)
}

type apiServerClient struct {
	cc grpc.ClientConnInterface
}

func NewApiServerClient(cc grpc.ClientConnInterface) ApiServerClient {
	return &apiServerClient{cc}
}

func (c *apiServerClient) Call(ctx context.Context, in *api.Request, opts ...grpc.CallOption) (*api.Response, error) {
	out := new(api.Response)
	err := c.cc.Invoke(ctx, "/header.ApiServer/Call", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ApiServerServer is the server API for ApiServer service.
type ApiServerServer interface {
	Call(context.Context, *api.Request) (*api.Response, error)
}

// UnimplementedApiServerServer can be embedded to have forward compatible implementations.
type UnimplementedApiServerServer struct {
}

func (*UnimplementedApiServerServer) Call(context.Context, *api.Request) (*api.Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Call not implemented")
}

func RegisterApiServerServer(s *grpc.Server, srv ApiServerServer) {
	s.RegisterService(&_ApiServer_serviceDesc, srv)
}

func _ApiServer_Call_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(api.Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServerServer).Call(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.ApiServer/Call",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServerServer).Call(ctx, req.(*api.Request))
	}
	return interceptor(ctx, in, info, handler)
}

var _ApiServer_serviceDesc = grpc.ServiceDesc{
	ServiceName: "header.ApiServer",
	HandlerType: (*ApiServerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Call",
			Handler:    _ApiServer_Call_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "service.proto",
}

// AccountMgrClient is the client API for AccountMgr service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type AccountMgrClient interface {
	CreateGroup(ctx context.Context, in *account.AgentGroup, opts ...grpc.CallOption) (*account.AgentGroup, error)
	UpdateGroup(ctx context.Context, in *account.AgentGroup, opts ...grpc.CallOption) (*account.AgentGroup, error)
	GetGroup(ctx context.Context, in *common.Id, opts ...grpc.CallOption) (*account.AgentGroup, error)
	RequestResetPassword(ctx context.Context, in *account.ResetPasswordRequest, opts ...grpc.CallOption) (*common.Empty, error)
	UpdatePassword(ctx context.Context, in *account.NewPassword, opts ...grpc.CallOption) (*account.Agent, error)
	UpdateAgent(ctx context.Context, in *account.Agent, opts ...grpc.CallOption) (*account.Agent, error)
	DeleteAgent(ctx context.Context, in *common.Id, opts ...grpc.CallOption) (*account.Agent, error)
	RequestChangeEmail(ctx context.Context, in *account.Agent, opts ...grpc.CallOption) (*common.Empty, error)
	ConfirmChangeEmail(ctx context.Context, in *account.Token, opts ...grpc.CallOption) (*account.Agent, error)
	AcceptInvitation(ctx context.Context, in *account.NewPassword, opts ...grpc.CallOption) (*account.Agent, error)
	GetInvitation(ctx context.Context, in *account.Token, opts ...grpc.CallOption) (*account.Agent, error)
	InviteAgent(ctx context.Context, in *account.Agent, opts ...grpc.CallOption) (*account.Agent, error)
	GetAgent(ctx context.Context, in *common.Id, opts ...grpc.CallOption) (*account.Agent, error)
	ConfirmAccount(ctx context.Context, in *account.Token, opts ...grpc.CallOption) (*account.Account, error)
	GetAccount(ctx context.Context, in *common.Id, opts ...grpc.CallOption) (*account.Account, error)
	UpdateAccount(ctx context.Context, in *account.Account, opts ...grpc.CallOption) (*account.Account, error)
	CreateAccount(ctx context.Context, in *account.CreateAccountRequest, opts ...grpc.CallOption) (*account.Account, error)
	ListAgents(ctx context.Context, in *common.Id, opts ...grpc.CallOption) (*account.Agents, error)
	CountAccount(ctx context.Context, in *account.CountRequest, opts ...grpc.CallOption) (*account.Count, error)
	DeleteGroup(ctx context.Context, in *common.Id, opts ...grpc.CallOption) (*common.Empty, error)
	ListGroups(ctx context.Context, in *common.Id, opts ...grpc.CallOption) (*account.AgentGroups, error)
	AddAgentToGroup(ctx context.Context, in *account.GroupMember, opts ...grpc.CallOption) (*common.Empty, error)
	RemoveAgentFromGroup(ctx context.Context, in *account.GroupMember, opts ...grpc.CallOption) (*common.Empty, error)
	ChangeEmail(ctx context.Context, in *account.Agent, opts ...grpc.CallOption) (*account.Agent, error)
	IntegrateBot(ctx context.Context, in *account.Agent, opts ...grpc.CallOption) (*account.Agent, error)
	SyncPublicHolidays(ctx context.Context, in *account.SyncPublicHolidaysRequest, opts ...grpc.CallOption) (*account.BusinessHours, error)
	TransferOwner(ctx context.Context, in *common.Id, opts ...grpc.CallOption) (*account.Agent, error)
}

type accountMgrClient struct {
	cc grpc.ClientConnInterface
}

func NewAccountMgrClient(cc grpc.ClientConnInterface) AccountMgrClient {
	return &accountMgrClient{cc}
}

func (c *accountMgrClient) CreateGroup(ctx context.Context, in *account.AgentGroup, opts ...grpc.CallOption) (*account.AgentGroup, error) {
	out := new(account.AgentGroup)
	err := c.cc.Invoke(ctx, "/header.AccountMgr/CreateGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountMgrClient) UpdateGroup(ctx context.Context, in *account.AgentGroup, opts ...grpc.CallOption) (*account.AgentGroup, error) {
	out := new(account.AgentGroup)
	err := c.cc.Invoke(ctx, "/header.AccountMgr/UpdateGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountMgrClient) GetGroup(ctx context.Context, in *common.Id, opts ...grpc.CallOption) (*account.AgentGroup, error) {
	out := new(account.AgentGroup)
	err := c.cc.Invoke(ctx, "/header.AccountMgr/GetGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountMgrClient) RequestResetPassword(ctx context.Context, in *account.ResetPasswordRequest, opts ...grpc.CallOption) (*common.Empty, error) {
	out := new(common.Empty)
	err := c.cc.Invoke(ctx, "/header.AccountMgr/RequestResetPassword", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountMgrClient) UpdatePassword(ctx context.Context, in *account.NewPassword, opts ...grpc.CallOption) (*account.Agent, error) {
	out := new(account.Agent)
	err := c.cc.Invoke(ctx, "/header.AccountMgr/UpdatePassword", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountMgrClient) UpdateAgent(ctx context.Context, in *account.Agent, opts ...grpc.CallOption) (*account.Agent, error) {
	out := new(account.Agent)
	err := c.cc.Invoke(ctx, "/header.AccountMgr/UpdateAgent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountMgrClient) DeleteAgent(ctx context.Context, in *common.Id, opts ...grpc.CallOption) (*account.Agent, error) {
	out := new(account.Agent)
	err := c.cc.Invoke(ctx, "/header.AccountMgr/DeleteAgent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountMgrClient) RequestChangeEmail(ctx context.Context, in *account.Agent, opts ...grpc.CallOption) (*common.Empty, error) {
	out := new(common.Empty)
	err := c.cc.Invoke(ctx, "/header.AccountMgr/RequestChangeEmail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountMgrClient) ConfirmChangeEmail(ctx context.Context, in *account.Token, opts ...grpc.CallOption) (*account.Agent, error) {
	out := new(account.Agent)
	err := c.cc.Invoke(ctx, "/header.AccountMgr/ConfirmChangeEmail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountMgrClient) AcceptInvitation(ctx context.Context, in *account.NewPassword, opts ...grpc.CallOption) (*account.Agent, error) {
	out := new(account.Agent)
	err := c.cc.Invoke(ctx, "/header.AccountMgr/AcceptInvitation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountMgrClient) GetInvitation(ctx context.Context, in *account.Token, opts ...grpc.CallOption) (*account.Agent, error) {
	out := new(account.Agent)
	err := c.cc.Invoke(ctx, "/header.AccountMgr/GetInvitation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountMgrClient) InviteAgent(ctx context.Context, in *account.Agent, opts ...grpc.CallOption) (*account.Agent, error) {
	out := new(account.Agent)
	err := c.cc.Invoke(ctx, "/header.AccountMgr/InviteAgent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountMgrClient) GetAgent(ctx context.Context, in *common.Id, opts ...grpc.CallOption) (*account.Agent, error) {
	out := new(account.Agent)
	err := c.cc.Invoke(ctx, "/header.AccountMgr/GetAgent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountMgrClient) ConfirmAccount(ctx context.Context, in *account.Token, opts ...grpc.CallOption) (*account.Account, error) {
	out := new(account.Account)
	err := c.cc.Invoke(ctx, "/header.AccountMgr/ConfirmAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountMgrClient) GetAccount(ctx context.Context, in *common.Id, opts ...grpc.CallOption) (*account.Account, error) {
	out := new(account.Account)
	err := c.cc.Invoke(ctx, "/header.AccountMgr/GetAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountMgrClient) UpdateAccount(ctx context.Context, in *account.Account, opts ...grpc.CallOption) (*account.Account, error) {
	out := new(account.Account)
	err := c.cc.Invoke(ctx, "/header.AccountMgr/UpdateAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountMgrClient) CreateAccount(ctx context.Context, in *account.CreateAccountRequest, opts ...grpc.CallOption) (*account.Account, error) {
	out := new(account.Account)
	err := c.cc.Invoke(ctx, "/header.AccountMgr/CreateAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountMgrClient) ListAgents(ctx context.Context, in *common.Id, opts ...grpc.CallOption) (*account.Agents, error) {
	out := new(account.Agents)
	err := c.cc.Invoke(ctx, "/header.AccountMgr/ListAgents", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountMgrClient) CountAccount(ctx context.Context, in *account.CountRequest, opts ...grpc.CallOption) (*account.Count, error) {
	out := new(account.Count)
	err := c.cc.Invoke(ctx, "/header.AccountMgr/CountAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountMgrClient) DeleteGroup(ctx context.Context, in *common.Id, opts ...grpc.CallOption) (*common.Empty, error) {
	out := new(common.Empty)
	err := c.cc.Invoke(ctx, "/header.AccountMgr/DeleteGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountMgrClient) ListGroups(ctx context.Context, in *common.Id, opts ...grpc.CallOption) (*account.AgentGroups, error) {
	out := new(account.AgentGroups)
	err := c.cc.Invoke(ctx, "/header.AccountMgr/ListGroups", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountMgrClient) AddAgentToGroup(ctx context.Context, in *account.GroupMember, opts ...grpc.CallOption) (*common.Empty, error) {
	out := new(common.Empty)
	err := c.cc.Invoke(ctx, "/header.AccountMgr/AddAgentToGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountMgrClient) RemoveAgentFromGroup(ctx context.Context, in *account.GroupMember, opts ...grpc.CallOption) (*common.Empty, error) {
	out := new(common.Empty)
	err := c.cc.Invoke(ctx, "/header.AccountMgr/RemoveAgentFromGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountMgrClient) ChangeEmail(ctx context.Context, in *account.Agent, opts ...grpc.CallOption) (*account.Agent, error) {
	out := new(account.Agent)
	err := c.cc.Invoke(ctx, "/header.AccountMgr/ChangeEmail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountMgrClient) IntegrateBot(ctx context.Context, in *account.Agent, opts ...grpc.CallOption) (*account.Agent, error) {
	out := new(account.Agent)
	err := c.cc.Invoke(ctx, "/header.AccountMgr/IntegrateBot", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountMgrClient) SyncPublicHolidays(ctx context.Context, in *account.SyncPublicHolidaysRequest, opts ...grpc.CallOption) (*account.BusinessHours, error) {
	out := new(account.BusinessHours)
	err := c.cc.Invoke(ctx, "/header.AccountMgr/SyncPublicHolidays", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountMgrClient) TransferOwner(ctx context.Context, in *common.Id, opts ...grpc.CallOption) (*account.Agent, error) {
	out := new(account.Agent)
	err := c.cc.Invoke(ctx, "/header.AccountMgr/TransferOwner", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AccountMgrServer is the server API for AccountMgr service.
type AccountMgrServer interface {
	CreateGroup(context.Context, *account.AgentGroup) (*account.AgentGroup, error)
	UpdateGroup(context.Context, *account.AgentGroup) (*account.AgentGroup, error)
	GetGroup(context.Context, *common.Id) (*account.AgentGroup, error)
	RequestResetPassword(context.Context, *account.ResetPasswordRequest) (*common.Empty, error)
	UpdatePassword(context.Context, *account.NewPassword) (*account.Agent, error)
	UpdateAgent(context.Context, *account.Agent) (*account.Agent, error)
	DeleteAgent(context.Context, *common.Id) (*account.Agent, error)
	RequestChangeEmail(context.Context, *account.Agent) (*common.Empty, error)
	ConfirmChangeEmail(context.Context, *account.Token) (*account.Agent, error)
	AcceptInvitation(context.Context, *account.NewPassword) (*account.Agent, error)
	GetInvitation(context.Context, *account.Token) (*account.Agent, error)
	InviteAgent(context.Context, *account.Agent) (*account.Agent, error)
	GetAgent(context.Context, *common.Id) (*account.Agent, error)
	ConfirmAccount(context.Context, *account.Token) (*account.Account, error)
	GetAccount(context.Context, *common.Id) (*account.Account, error)
	UpdateAccount(context.Context, *account.Account) (*account.Account, error)
	CreateAccount(context.Context, *account.CreateAccountRequest) (*account.Account, error)
	ListAgents(context.Context, *common.Id) (*account.Agents, error)
	CountAccount(context.Context, *account.CountRequest) (*account.Count, error)
	DeleteGroup(context.Context, *common.Id) (*common.Empty, error)
	ListGroups(context.Context, *common.Id) (*account.AgentGroups, error)
	AddAgentToGroup(context.Context, *account.GroupMember) (*common.Empty, error)
	RemoveAgentFromGroup(context.Context, *account.GroupMember) (*common.Empty, error)
	ChangeEmail(context.Context, *account.Agent) (*account.Agent, error)
	IntegrateBot(context.Context, *account.Agent) (*account.Agent, error)
	SyncPublicHolidays(context.Context, *account.SyncPublicHolidaysRequest) (*account.BusinessHours, error)
	TransferOwner(context.Context, *common.Id) (*account.Agent, error)
}

// UnimplementedAccountMgrServer can be embedded to have forward compatible implementations.
type UnimplementedAccountMgrServer struct {
}

func (*UnimplementedAccountMgrServer) CreateGroup(context.Context, *account.AgentGroup) (*account.AgentGroup, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateGroup not implemented")
}
func (*UnimplementedAccountMgrServer) UpdateGroup(context.Context, *account.AgentGroup) (*account.AgentGroup, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateGroup not implemented")
}
func (*UnimplementedAccountMgrServer) GetGroup(context.Context, *common.Id) (*account.AgentGroup, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGroup not implemented")
}
func (*UnimplementedAccountMgrServer) RequestResetPassword(context.Context, *account.ResetPasswordRequest) (*common.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RequestResetPassword not implemented")
}
func (*UnimplementedAccountMgrServer) UpdatePassword(context.Context, *account.NewPassword) (*account.Agent, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePassword not implemented")
}
func (*UnimplementedAccountMgrServer) UpdateAgent(context.Context, *account.Agent) (*account.Agent, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAgent not implemented")
}
func (*UnimplementedAccountMgrServer) DeleteAgent(context.Context, *common.Id) (*account.Agent, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteAgent not implemented")
}
func (*UnimplementedAccountMgrServer) RequestChangeEmail(context.Context, *account.Agent) (*common.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RequestChangeEmail not implemented")
}
func (*UnimplementedAccountMgrServer) ConfirmChangeEmail(context.Context, *account.Token) (*account.Agent, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConfirmChangeEmail not implemented")
}
func (*UnimplementedAccountMgrServer) AcceptInvitation(context.Context, *account.NewPassword) (*account.Agent, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AcceptInvitation not implemented")
}
func (*UnimplementedAccountMgrServer) GetInvitation(context.Context, *account.Token) (*account.Agent, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetInvitation not implemented")
}
func (*UnimplementedAccountMgrServer) InviteAgent(context.Context, *account.Agent) (*account.Agent, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InviteAgent not implemented")
}
func (*UnimplementedAccountMgrServer) GetAgent(context.Context, *common.Id) (*account.Agent, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAgent not implemented")
}
func (*UnimplementedAccountMgrServer) ConfirmAccount(context.Context, *account.Token) (*account.Account, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConfirmAccount not implemented")
}
func (*UnimplementedAccountMgrServer) GetAccount(context.Context, *common.Id) (*account.Account, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAccount not implemented")
}
func (*UnimplementedAccountMgrServer) UpdateAccount(context.Context, *account.Account) (*account.Account, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAccount not implemented")
}
func (*UnimplementedAccountMgrServer) CreateAccount(context.Context, *account.CreateAccountRequest) (*account.Account, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAccount not implemented")
}
func (*UnimplementedAccountMgrServer) ListAgents(context.Context, *common.Id) (*account.Agents, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAgents not implemented")
}
func (*UnimplementedAccountMgrServer) CountAccount(context.Context, *account.CountRequest) (*account.Count, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CountAccount not implemented")
}
func (*UnimplementedAccountMgrServer) DeleteGroup(context.Context, *common.Id) (*common.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteGroup not implemented")
}
func (*UnimplementedAccountMgrServer) ListGroups(context.Context, *common.Id) (*account.AgentGroups, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListGroups not implemented")
}
func (*UnimplementedAccountMgrServer) AddAgentToGroup(context.Context, *account.GroupMember) (*common.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddAgentToGroup not implemented")
}
func (*UnimplementedAccountMgrServer) RemoveAgentFromGroup(context.Context, *account.GroupMember) (*common.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveAgentFromGroup not implemented")
}
func (*UnimplementedAccountMgrServer) ChangeEmail(context.Context, *account.Agent) (*account.Agent, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChangeEmail not implemented")
}
func (*UnimplementedAccountMgrServer) IntegrateBot(context.Context, *account.Agent) (*account.Agent, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IntegrateBot not implemented")
}
func (*UnimplementedAccountMgrServer) SyncPublicHolidays(context.Context, *account.SyncPublicHolidaysRequest) (*account.BusinessHours, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SyncPublicHolidays not implemented")
}
func (*UnimplementedAccountMgrServer) TransferOwner(context.Context, *common.Id) (*account.Agent, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TransferOwner not implemented")
}

func RegisterAccountMgrServer(s *grpc.Server, srv AccountMgrServer) {
	s.RegisterService(&_AccountMgr_serviceDesc, srv)
}

func _AccountMgr_CreateGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(account.AgentGroup)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountMgrServer).CreateGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.AccountMgr/CreateGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountMgrServer).CreateGroup(ctx, req.(*account.AgentGroup))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountMgr_UpdateGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(account.AgentGroup)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountMgrServer).UpdateGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.AccountMgr/UpdateGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountMgrServer).UpdateGroup(ctx, req.(*account.AgentGroup))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountMgr_GetGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountMgrServer).GetGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.AccountMgr/GetGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountMgrServer).GetGroup(ctx, req.(*common.Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountMgr_RequestResetPassword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(account.ResetPasswordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountMgrServer).RequestResetPassword(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.AccountMgr/RequestResetPassword",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountMgrServer).RequestResetPassword(ctx, req.(*account.ResetPasswordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountMgr_UpdatePassword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(account.NewPassword)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountMgrServer).UpdatePassword(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.AccountMgr/UpdatePassword",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountMgrServer).UpdatePassword(ctx, req.(*account.NewPassword))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountMgr_UpdateAgent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(account.Agent)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountMgrServer).UpdateAgent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.AccountMgr/UpdateAgent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountMgrServer).UpdateAgent(ctx, req.(*account.Agent))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountMgr_DeleteAgent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountMgrServer).DeleteAgent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.AccountMgr/DeleteAgent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountMgrServer).DeleteAgent(ctx, req.(*common.Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountMgr_RequestChangeEmail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(account.Agent)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountMgrServer).RequestChangeEmail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.AccountMgr/RequestChangeEmail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountMgrServer).RequestChangeEmail(ctx, req.(*account.Agent))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountMgr_ConfirmChangeEmail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(account.Token)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountMgrServer).ConfirmChangeEmail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.AccountMgr/ConfirmChangeEmail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountMgrServer).ConfirmChangeEmail(ctx, req.(*account.Token))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountMgr_AcceptInvitation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(account.NewPassword)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountMgrServer).AcceptInvitation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.AccountMgr/AcceptInvitation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountMgrServer).AcceptInvitation(ctx, req.(*account.NewPassword))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountMgr_GetInvitation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(account.Token)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountMgrServer).GetInvitation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.AccountMgr/GetInvitation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountMgrServer).GetInvitation(ctx, req.(*account.Token))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountMgr_InviteAgent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(account.Agent)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountMgrServer).InviteAgent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.AccountMgr/InviteAgent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountMgrServer).InviteAgent(ctx, req.(*account.Agent))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountMgr_GetAgent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountMgrServer).GetAgent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.AccountMgr/GetAgent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountMgrServer).GetAgent(ctx, req.(*common.Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountMgr_ConfirmAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(account.Token)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountMgrServer).ConfirmAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.AccountMgr/ConfirmAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountMgrServer).ConfirmAccount(ctx, req.(*account.Token))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountMgr_GetAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountMgrServer).GetAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.AccountMgr/GetAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountMgrServer).GetAccount(ctx, req.(*common.Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountMgr_UpdateAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(account.Account)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountMgrServer).UpdateAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.AccountMgr/UpdateAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountMgrServer).UpdateAccount(ctx, req.(*account.Account))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountMgr_CreateAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(account.CreateAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountMgrServer).CreateAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.AccountMgr/CreateAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountMgrServer).CreateAccount(ctx, req.(*account.CreateAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountMgr_ListAgents_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountMgrServer).ListAgents(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.AccountMgr/ListAgents",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountMgrServer).ListAgents(ctx, req.(*common.Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountMgr_CountAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(account.CountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountMgrServer).CountAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.AccountMgr/CountAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountMgrServer).CountAccount(ctx, req.(*account.CountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountMgr_DeleteGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountMgrServer).DeleteGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.AccountMgr/DeleteGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountMgrServer).DeleteGroup(ctx, req.(*common.Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountMgr_ListGroups_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountMgrServer).ListGroups(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.AccountMgr/ListGroups",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountMgrServer).ListGroups(ctx, req.(*common.Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountMgr_AddAgentToGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(account.GroupMember)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountMgrServer).AddAgentToGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.AccountMgr/AddAgentToGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountMgrServer).AddAgentToGroup(ctx, req.(*account.GroupMember))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountMgr_RemoveAgentFromGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(account.GroupMember)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountMgrServer).RemoveAgentFromGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.AccountMgr/RemoveAgentFromGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountMgrServer).RemoveAgentFromGroup(ctx, req.(*account.GroupMember))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountMgr_ChangeEmail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(account.Agent)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountMgrServer).ChangeEmail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.AccountMgr/ChangeEmail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountMgrServer).ChangeEmail(ctx, req.(*account.Agent))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountMgr_IntegrateBot_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(account.Agent)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountMgrServer).IntegrateBot(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.AccountMgr/IntegrateBot",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountMgrServer).IntegrateBot(ctx, req.(*account.Agent))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountMgr_SyncPublicHolidays_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(account.SyncPublicHolidaysRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountMgrServer).SyncPublicHolidays(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.AccountMgr/SyncPublicHolidays",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountMgrServer).SyncPublicHolidays(ctx, req.(*account.SyncPublicHolidaysRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountMgr_TransferOwner_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountMgrServer).TransferOwner(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.AccountMgr/TransferOwner",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountMgrServer).TransferOwner(ctx, req.(*common.Id))
	}
	return interceptor(ctx, in, info, handler)
}

var _AccountMgr_serviceDesc = grpc.ServiceDesc{
	ServiceName: "header.AccountMgr",
	HandlerType: (*AccountMgrServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateGroup",
			Handler:    _AccountMgr_CreateGroup_Handler,
		},
		{
			MethodName: "UpdateGroup",
			Handler:    _AccountMgr_UpdateGroup_Handler,
		},
		{
			MethodName: "GetGroup",
			Handler:    _AccountMgr_GetGroup_Handler,
		},
		{
			MethodName: "RequestResetPassword",
			Handler:    _AccountMgr_RequestResetPassword_Handler,
		},
		{
			MethodName: "UpdatePassword",
			Handler:    _AccountMgr_UpdatePassword_Handler,
		},
		{
			MethodName: "UpdateAgent",
			Handler:    _AccountMgr_UpdateAgent_Handler,
		},
		{
			MethodName: "DeleteAgent",
			Handler:    _AccountMgr_DeleteAgent_Handler,
		},
		{
			MethodName: "RequestChangeEmail",
			Handler:    _AccountMgr_RequestChangeEmail_Handler,
		},
		{
			MethodName: "ConfirmChangeEmail",
			Handler:    _AccountMgr_ConfirmChangeEmail_Handler,
		},
		{
			MethodName: "AcceptInvitation",
			Handler:    _AccountMgr_AcceptInvitation_Handler,
		},
		{
			MethodName: "GetInvitation",
			Handler:    _AccountMgr_GetInvitation_Handler,
		},
		{
			MethodName: "InviteAgent",
			Handler:    _AccountMgr_InviteAgent_Handler,
		},
		{
			MethodName: "GetAgent",
			Handler:    _AccountMgr_GetAgent_Handler,
		},
		{
			MethodName: "ConfirmAccount",
			Handler:    _AccountMgr_ConfirmAccount_Handler,
		},
		{
			MethodName: "GetAccount",
			Handler:    _AccountMgr_GetAccount_Handler,
		},
		{
			MethodName: "UpdateAccount",
			Handler:    _AccountMgr_UpdateAccount_Handler,
		},
		{
			MethodName: "CreateAccount",
			Handler:    _AccountMgr_CreateAccount_Handler,
		},
		{
			MethodName: "ListAgents",
			Handler:    _AccountMgr_ListAgents_Handler,
		},
		{
			MethodName: "CountAccount",
			Handler:    _AccountMgr_CountAccount_Handler,
		},
		{
			MethodName: "DeleteGroup",
			Handler:    _AccountMgr_DeleteGroup_Handler,
		},
		{
			MethodName: "ListGroups",
			Handler:    _AccountMgr_ListGroups_Handler,
		},
		{
			MethodName: "AddAgentToGroup",
			Handler:    _AccountMgr_AddAgentToGroup_Handler,
		},
		{
			MethodName: "RemoveAgentFromGroup",
			Handler:    _AccountMgr_RemoveAgentFromGroup_Handler,
		},
		{
			MethodName: "ChangeEmail",
			Handler:    _AccountMgr_ChangeEmail_Handler,
		},
		{
			MethodName: "IntegrateBot",
			Handler:    _AccountMgr_IntegrateBot_Handler,
		},
		{
			MethodName: "SyncPublicHolidays",
			Handler:    _AccountMgr_SyncPublicHolidays_Handler,
		},
		{
			MethodName: "TransferOwner",
			Handler:    _AccountMgr_TransferOwner_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "service.proto",
}

// CurrencyMgrClient is the client API for CurrencyMgr service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type CurrencyMgrClient interface {
	ListCurrencies(ctx context.Context, in *common.Empty, opts ...grpc.CallOption) (*account.Currencies, error)
	GetCurrency(ctx context.Context, in *common.Id, opts ...grpc.CallOption) (*account.Currency, error)
	CreateCurrency(ctx context.Context, in *account.Currency, opts ...grpc.CallOption) (*account.Currency, error)
	UpdateCurrency(ctx context.Context, in *account.Currency, opts ...grpc.CallOption) (*account.Currency, error)
	DeleteCurrency(ctx context.Context, in *common.Id, opts ...grpc.CallOption) (*common.Empty, error)
	ListExchangeRates(ctx context.Context, in *account.ExchangeRateRequest, opts ...grpc.CallOption) (*account.ExchangeRates, error)
	GetExchangeRate(ctx context.Context, in *account.ExchangeRateRequest, opts ...grpc.CallOption) (*account.ExchangeRate, error)
	CreateExchangeRate(ctx context.Context, in *account.ExchangeRate, opts ...grpc.CallOption) (*account.ExchangeRate, error)
	DeleteExchangeRate(ctx context.Context, in *account.ExchangeRateRequest, opts ...grpc.CallOption) (*common.Empty, error)
}

type currencyMgrClient struct {
	cc grpc.ClientConnInterface
}

func NewCurrencyMgrClient(cc grpc.ClientConnInterface) CurrencyMgrClient {
	return &currencyMgrClient{cc}
}

func (c *currencyMgrClient) ListCurrencies(ctx context.Context, in *common.Empty, opts ...grpc.CallOption) (*account.Currencies, error) {
	out := new(account.Currencies)
	err := c.cc.Invoke(ctx, "/header.CurrencyMgr/ListCurrencies", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *currencyMgrClient) GetCurrency(ctx context.Context, in *common.Id, opts ...grpc.CallOption) (*account.Currency, error) {
	out := new(account.Currency)
	err := c.cc.Invoke(ctx, "/header.CurrencyMgr/GetCurrency", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *currencyMgrClient) CreateCurrency(ctx context.Context, in *account.Currency, opts ...grpc.CallOption) (*account.Currency, error) {
	out := new(account.Currency)
	err := c.cc.Invoke(ctx, "/header.CurrencyMgr/CreateCurrency", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *currencyMgrClient) UpdateCurrency(ctx context.Context, in *account.Currency, opts ...grpc.CallOption) (*account.Currency, error) {
	out := new(account.Currency)
	err := c.cc.Invoke(ctx, "/header.CurrencyMgr/UpdateCurrency", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *currencyMgrClient) DeleteCurrency(ctx context.Context, in *common.Id, opts ...grpc.CallOption) (*common.Empty, error) {
	out := new(common.Empty)
	err := c.cc.Invoke(ctx, "/header.CurrencyMgr/DeleteCurrency", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *currencyMgrClient) ListExchangeRates(ctx context.Context, in *account.ExchangeRateRequest, opts ...grpc.CallOption) (*account.ExchangeRates, error) {
	out := new(account.ExchangeRates)
	err := c.cc.Invoke(ctx, "/header.CurrencyMgr/ListExchangeRates", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *currencyMgrClient) GetExchangeRate(ctx context.Context, in *account.ExchangeRateRequest, opts ...grpc.CallOption) (*account.ExchangeRate, error) {
	out := new(account.ExchangeRate)
	err := c.cc.Invoke(ctx, "/header.CurrencyMgr/GetExchangeRate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *currencyMgrClient) CreateExchangeRate(ctx context.Context, in *account.ExchangeRate, opts ...grpc.CallOption) (*account.ExchangeRate, error) {
	out := new(account.ExchangeRate)
	err := c.cc.Invoke(ctx, "/header.CurrencyMgr/CreateExchangeRate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *currencyMgrClient) DeleteExchangeRate(ctx context.Context, in *account.ExchangeRateRequest, opts ...grpc.CallOption) (*common.Empty, error) {
	out := new(common.Empty)
	err := c.cc.Invoke(ctx, "/header.CurrencyMgr/DeleteExchangeRate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CurrencyMgrServer is the server API for CurrencyMgr service.
type CurrencyMgrServer interface {
	ListCurrencies(context.Context, *common.Empty) (*account.Currencies, error)
	GetCurrency(context.Context, *common.Id) (*account.Currency, error)
	CreateCurrency(context.Context, *account.Currency) (*account.Currency, error)
	UpdateCurrency(context.Context, *account.Currency) (*account.Currency, error)
	DeleteCurrency(context.Context, *common.Id) (*common.Empty, error)
	ListExchangeRates(context.Context, *account.ExchangeRateRequest) (*account.ExchangeRates, error)
	GetExchangeRate(context.Context, *account.ExchangeRateRequest) (*account.ExchangeRate, error)
	CreateExchangeRate(context.Context, *account.ExchangeRate) (*account.ExchangeRate, error)
	DeleteExchangeRate(context.Context, *account.ExchangeRateRequest) (*common.Empty, error)
}

// UnimplementedCurrencyMgrServer can be embedded to have forward compatible implementations.
type UnimplementedCurrencyMgrServer struct {
}

func (*UnimplementedCurrencyMgrServer) ListCurrencies(context.Context, *common.Empty) (*account.Currencies, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListCurrencies not implemented")
}
func (*UnimplementedCurrencyMgrServer) GetCurrency(context.Context, *common.Id) (*account.Currency, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCurrency not implemented")
}
func (*UnimplementedCurrencyMgrServer) CreateCurrency(context.Context, *account.Currency) (*account.Currency, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCurrency not implemented")
}
func (*UnimplementedCurrencyMgrServer) UpdateCurrency(context.Context, *account.Currency) (*account.Currency, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCurrency not implemented")
}
func (*UnimplementedCurrencyMgrServer) DeleteCurrency(context.Context, *common.Id) (*common.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteCurrency not implemented")
}
func (*UnimplementedCurrencyMgrServer) ListExchangeRates(context.Context, *account.ExchangeRateRequest) (*account.ExchangeRates, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListExchangeRates not implemented")
}
func (*UnimplementedCurrencyMgrServer) GetExchangeRate(context.Context, *account.ExchangeRateRequest) (*account.ExchangeRate, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetExchangeRate not implemented")
}
func (*UnimplementedCurrencyMgrServer) CreateExchangeRate(context.Context, *account.ExchangeRate) (*account.ExchangeRate, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateExchangeRate not implemented")
}
func (*UnimplementedCurrencyMgrServer) DeleteExchangeRate(context.Context, *account.ExchangeRateRequest) (*common.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteExchangeRate not implemented")
}

func RegisterCurrencyMgrServer(s *grpc.Server, srv CurrencyMgrServer) {
	s.RegisterService(&_CurrencyMgr_serviceDesc, srv)
}

func _CurrencyMgr_ListCurrencies_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CurrencyMgrServer).ListCurrencies(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.CurrencyMgr/ListCurrencies",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CurrencyMgrServer).ListCurrencies(ctx, req.(*common.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _CurrencyMgr_GetCurrency_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CurrencyMgrServer).GetCurrency(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.CurrencyMgr/GetCurrency",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CurrencyMgrServer).GetCurrency(ctx, req.(*common.Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _CurrencyMgr_CreateCurrency_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(account.Currency)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CurrencyMgrServer).CreateCurrency(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.CurrencyMgr/CreateCurrency",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CurrencyMgrServer).CreateCurrency(ctx, req.(*account.Currency))
	}
	return interceptor(ctx, in, info, handler)
}

func _CurrencyMgr_UpdateCurrency_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(account.Currency)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CurrencyMgrServer).UpdateCurrency(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.CurrencyMgr/UpdateCurrency",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CurrencyMgrServer).UpdateCurrency(ctx, req.(*account.Currency))
	}
	return interceptor(ctx, in, info, handler)
}

func _CurrencyMgr_DeleteCurrency_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CurrencyMgrServer).DeleteCurrency(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.CurrencyMgr/DeleteCurrency",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CurrencyMgrServer).DeleteCurrency(ctx, req.(*common.Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _CurrencyMgr_ListExchangeRates_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(account.ExchangeRateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CurrencyMgrServer).ListExchangeRates(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.CurrencyMgr/ListExchangeRates",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CurrencyMgrServer).ListExchangeRates(ctx, req.(*account.ExchangeRateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CurrencyMgr_GetExchangeRate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(account.ExchangeRateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CurrencyMgrServer).GetExchangeRate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.CurrencyMgr/GetExchangeRate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CurrencyMgrServer).GetExchangeRate(ctx, req.(*account.ExchangeRateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CurrencyMgr_CreateExchangeRate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(account.ExchangeRate)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CurrencyMgrServer).CreateExchangeRate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.CurrencyMgr/CreateExchangeRate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CurrencyMgrServer).CreateExchangeRate(ctx, req.(*account.ExchangeRate))
	}
	return interceptor(ctx, in, info, handler)
}

func _CurrencyMgr_DeleteExchangeRate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(account.ExchangeRateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CurrencyMgrServer).DeleteExchangeRate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.CurrencyMgr/DeleteExchangeRate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CurrencyMgrServer).DeleteExchangeRate(ctx, req.(*account.ExchangeRateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _CurrencyMgr_serviceDesc = grpc.ServiceDesc{
	ServiceName: "header.CurrencyMgr",
	HandlerType: (*CurrencyMgrServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListCurrencies",
			Handler:    _CurrencyMgr_ListCurrencies_Handler,
		},
		{
			MethodName: "GetCurrency",
			Handler:    _CurrencyMgr_GetCurrency_Handler,
		},
		{
			MethodName: "CreateCurrency",
			Handler:    _CurrencyMgr_CreateCurrency_Handler,
		},
		{
			MethodName: "UpdateCurrency",
			Handler:    _CurrencyMgr_UpdateCurrency_Handler,
		},
		{
			MethodName: "DeleteCurrency",
			Handler:    _CurrencyMgr_DeleteCurrency_Handler,
		},
		{
			MethodName: "ListExchangeRates",
			Handler:    _CurrencyMgr_ListExchangeRates_Handler,
		},
		{
			MethodName: "GetExchangeRate",
			Handler:    _CurrencyMgr_GetExchangeRate_Handler,
		},
		{
			MethodName: "CreateExchangeRate",
			Handler:    _CurrencyMgr_CreateExchangeRate_Handler,
		},
		{
			MethodName: "DeleteExchangeRate",
			Handler:    _CurrencyMgr_DeleteExchangeRate_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "service.proto",
}

// UserMgrClient is the client API for UserMgr service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type UserMgrClient interface {
	SearchUsers(ctx context.Context, in *user.UserSearchRequest, opts ...grpc.CallOption) (*UserSearchResult, error)
	SearchLeads(ctx context.Context, in *LeadSearchRequest, opts ...grpc.CallOption) (*LeadSearchResult, error)
	ListLeads(ctx context.Context, in *LeadSearchRequest, opts ...grpc.CallOption) (*LeadSearchResult, error)
	CreateUser(ctx context.Context, in *User, opts ...grpc.CallOption) (*common.Id, error)
	UpdateUser(ctx context.Context, in *User, opts ...grpc.CallOption) (*common.Id, error)
	ReadUser(ctx context.Context, in *common.Id, opts ...grpc.CallOption) (*User, error)
	ReportUsers(ctx context.Context, in *UserReportRequest, opts ...grpc.CallOption) (*UserReportResult, error)
	CountTotal(ctx context.Context, in *CountTotalRequest, opts ...grpc.CallOption) (*CountTotalResponse, error)
	Ping(ctx context.Context, in *common.PingRequest, opts ...grpc.CallOption) (*common.Pong, error)
	SearchNote(ctx context.Context, in *user.SearchNoteRequest, opts ...grpc.CallOption) (*user.SearchNoteResponse, error)
	MatchUsers(ctx context.Context, in *common.Ids, opts ...grpc.CallOption) (*Users, error)
}

type userMgrClient struct {
	cc grpc.ClientConnInterface
}

func NewUserMgrClient(cc grpc.ClientConnInterface) UserMgrClient {
	return &userMgrClient{cc}
}

func (c *userMgrClient) SearchUsers(ctx context.Context, in *user.UserSearchRequest, opts ...grpc.CallOption) (*UserSearchResult, error) {
	out := new(UserSearchResult)
	err := c.cc.Invoke(ctx, "/header.UserMgr/SearchUsers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userMgrClient) SearchLeads(ctx context.Context, in *LeadSearchRequest, opts ...grpc.CallOption) (*LeadSearchResult, error) {
	out := new(LeadSearchResult)
	err := c.cc.Invoke(ctx, "/header.UserMgr/SearchLeads", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userMgrClient) ListLeads(ctx context.Context, in *LeadSearchRequest, opts ...grpc.CallOption) (*LeadSearchResult, error) {
	out := new(LeadSearchResult)
	err := c.cc.Invoke(ctx, "/header.UserMgr/ListLeads", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userMgrClient) CreateUser(ctx context.Context, in *User, opts ...grpc.CallOption) (*common.Id, error) {
	out := new(common.Id)
	err := c.cc.Invoke(ctx, "/header.UserMgr/CreateUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userMgrClient) UpdateUser(ctx context.Context, in *User, opts ...grpc.CallOption) (*common.Id, error) {
	out := new(common.Id)
	err := c.cc.Invoke(ctx, "/header.UserMgr/UpdateUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userMgrClient) ReadUser(ctx context.Context, in *common.Id, opts ...grpc.CallOption) (*User, error) {
	out := new(User)
	err := c.cc.Invoke(ctx, "/header.UserMgr/ReadUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userMgrClient) ReportUsers(ctx context.Context, in *UserReportRequest, opts ...grpc.CallOption) (*UserReportResult, error) {
	out := new(UserReportResult)
	err := c.cc.Invoke(ctx, "/header.UserMgr/ReportUsers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userMgrClient) CountTotal(ctx context.Context, in *CountTotalRequest, opts ...grpc.CallOption) (*CountTotalResponse, error) {
	out := new(CountTotalResponse)
	err := c.cc.Invoke(ctx, "/header.UserMgr/CountTotal", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userMgrClient) Ping(ctx context.Context, in *common.PingRequest, opts ...grpc.CallOption) (*common.Pong, error) {
	out := new(common.Pong)
	err := c.cc.Invoke(ctx, "/header.UserMgr/Ping", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userMgrClient) SearchNote(ctx context.Context, in *user.SearchNoteRequest, opts ...grpc.CallOption) (*user.SearchNoteResponse, error) {
	out := new(user.SearchNoteResponse)
	err := c.cc.Invoke(ctx, "/header.UserMgr/SearchNote", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userMgrClient) MatchUsers(ctx context.Context, in *common.Ids, opts ...grpc.CallOption) (*Users, error) {
	out := new(Users)
	err := c.cc.Invoke(ctx, "/header.UserMgr/MatchUsers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UserMgrServer is the server API for UserMgr service.
type UserMgrServer interface {
	SearchUsers(context.Context, *user.UserSearchRequest) (*UserSearchResult, error)
	SearchLeads(context.Context, *LeadSearchRequest) (*LeadSearchResult, error)
	ListLeads(context.Context, *LeadSearchRequest) (*LeadSearchResult, error)
	CreateUser(context.Context, *User) (*common.Id, error)
	UpdateUser(context.Context, *User) (*common.Id, error)
	ReadUser(context.Context, *common.Id) (*User, error)
	ReportUsers(context.Context, *UserReportRequest) (*UserReportResult, error)
	CountTotal(context.Context, *CountTotalRequest) (*CountTotalResponse, error)
	Ping(context.Context, *common.PingRequest) (*common.Pong, error)
	SearchNote(context.Context, *user.SearchNoteRequest) (*user.SearchNoteResponse, error)
	MatchUsers(context.Context, *common.Ids) (*Users, error)
}

// UnimplementedUserMgrServer can be embedded to have forward compatible implementations.
type UnimplementedUserMgrServer struct {
}

func (*UnimplementedUserMgrServer) SearchUsers(context.Context, *user.UserSearchRequest) (*UserSearchResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchUsers not implemented")
}
func (*UnimplementedUserMgrServer) SearchLeads(context.Context, *LeadSearchRequest) (*LeadSearchResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchLeads not implemented")
}
func (*UnimplementedUserMgrServer) ListLeads(context.Context, *LeadSearchRequest) (*LeadSearchResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListLeads not implemented")
}
func (*UnimplementedUserMgrServer) CreateUser(context.Context, *User) (*common.Id, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateUser not implemented")
}
func (*UnimplementedUserMgrServer) UpdateUser(context.Context, *User) (*common.Id, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUser not implemented")
}
func (*UnimplementedUserMgrServer) ReadUser(context.Context, *common.Id) (*User, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadUser not implemented")
}
func (*UnimplementedUserMgrServer) ReportUsers(context.Context, *UserReportRequest) (*UserReportResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReportUsers not implemented")
}
func (*UnimplementedUserMgrServer) CountTotal(context.Context, *CountTotalRequest) (*CountTotalResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CountTotal not implemented")
}
func (*UnimplementedUserMgrServer) Ping(context.Context, *common.PingRequest) (*common.Pong, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ping not implemented")
}
func (*UnimplementedUserMgrServer) SearchNote(context.Context, *user.SearchNoteRequest) (*user.SearchNoteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchNote not implemented")
}
func (*UnimplementedUserMgrServer) MatchUsers(context.Context, *common.Ids) (*Users, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MatchUsers not implemented")
}

func RegisterUserMgrServer(s *grpc.Server, srv UserMgrServer) {
	s.RegisterService(&_UserMgr_serviceDesc, srv)
}

func _UserMgr_SearchUsers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(user.UserSearchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserMgrServer).SearchUsers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.UserMgr/SearchUsers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserMgrServer).SearchUsers(ctx, req.(*user.UserSearchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserMgr_SearchLeads_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LeadSearchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserMgrServer).SearchLeads(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.UserMgr/SearchLeads",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserMgrServer).SearchLeads(ctx, req.(*LeadSearchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserMgr_ListLeads_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LeadSearchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserMgrServer).ListLeads(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.UserMgr/ListLeads",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserMgrServer).ListLeads(ctx, req.(*LeadSearchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserMgr_CreateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(User)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserMgrServer).CreateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.UserMgr/CreateUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserMgrServer).CreateUser(ctx, req.(*User))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserMgr_UpdateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(User)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserMgrServer).UpdateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.UserMgr/UpdateUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserMgrServer).UpdateUser(ctx, req.(*User))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserMgr_ReadUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserMgrServer).ReadUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.UserMgr/ReadUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserMgrServer).ReadUser(ctx, req.(*common.Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserMgr_ReportUsers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserReportRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserMgrServer).ReportUsers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.UserMgr/ReportUsers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserMgrServer).ReportUsers(ctx, req.(*UserReportRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserMgr_CountTotal_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CountTotalRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserMgrServer).CountTotal(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.UserMgr/CountTotal",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserMgrServer).CountTotal(ctx, req.(*CountTotalRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserMgr_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.PingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserMgrServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.UserMgr/Ping",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserMgrServer).Ping(ctx, req.(*common.PingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserMgr_SearchNote_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(user.SearchNoteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserMgrServer).SearchNote(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.UserMgr/SearchNote",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserMgrServer).SearchNote(ctx, req.(*user.SearchNoteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserMgr_MatchUsers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.Ids)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserMgrServer).MatchUsers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.UserMgr/MatchUsers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserMgrServer).MatchUsers(ctx, req.(*common.Ids))
	}
	return interceptor(ctx, in, info, handler)
}

var _UserMgr_serviceDesc = grpc.ServiceDesc{
	ServiceName: "header.UserMgr",
	HandlerType: (*UserMgrServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SearchUsers",
			Handler:    _UserMgr_SearchUsers_Handler,
		},
		{
			MethodName: "SearchLeads",
			Handler:    _UserMgr_SearchLeads_Handler,
		},
		{
			MethodName: "ListLeads",
			Handler:    _UserMgr_ListLeads_Handler,
		},
		{
			MethodName: "CreateUser",
			Handler:    _UserMgr_CreateUser_Handler,
		},
		{
			MethodName: "UpdateUser",
			Handler:    _UserMgr_UpdateUser_Handler,
		},
		{
			MethodName: "ReadUser",
			Handler:    _UserMgr_ReadUser_Handler,
		},
		{
			MethodName: "ReportUsers",
			Handler:    _UserMgr_ReportUsers_Handler,
		},
		{
			MethodName: "CountTotal",
			Handler:    _UserMgr_CountTotal_Handler,
		},
		{
			MethodName: "Ping",
			Handler:    _UserMgr_Ping_Handler,
		},
		{
			MethodName: "SearchNote",
			Handler:    _UserMgr_SearchNote_Handler,
		},
		{
			MethodName: "MatchUsers",
			Handler:    _UserMgr_MatchUsers_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "service.proto",
}

// LiveMgrClient is the client API for LiveMgr service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type LiveMgrClient interface {
	SearchLocations(ctx context.Context, in *LocationParams, opts ...grpc.CallOption) (*Locations, error)
	FilterActiveUsers(ctx context.Context, in *UserInfoParams, opts ...grpc.CallOption) (*Users, error)
	TopEvents(ctx context.Context, in *EventParams, opts ...grpc.CallOption) (*Events, error)
	TopLocations(ctx context.Context, in *common.Id, opts ...grpc.CallOption) (*LocationMetrics, error)
	TopPages(ctx context.Context, in *common.Id, opts ...grpc.CallOption) (*PageMetrics, error)
	TopSources(ctx context.Context, in *common.Id, opts ...grpc.CallOption) (*SourceMetrics, error)
	CountActiveUsers(ctx context.Context, in *common.Id, opts ...grpc.CallOption) (*UserMetric, error)
	Presences(ctx context.Context, in *PresencesRequest, opts ...grpc.CallOption) (*PresencesResponse, error)
}

type liveMgrClient struct {
	cc grpc.ClientConnInterface
}

func NewLiveMgrClient(cc grpc.ClientConnInterface) LiveMgrClient {
	return &liveMgrClient{cc}
}

func (c *liveMgrClient) SearchLocations(ctx context.Context, in *LocationParams, opts ...grpc.CallOption) (*Locations, error) {
	out := new(Locations)
	err := c.cc.Invoke(ctx, "/header.LiveMgr/SearchLocations", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *liveMgrClient) FilterActiveUsers(ctx context.Context, in *UserInfoParams, opts ...grpc.CallOption) (*Users, error) {
	out := new(Users)
	err := c.cc.Invoke(ctx, "/header.LiveMgr/FilterActiveUsers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *liveMgrClient) TopEvents(ctx context.Context, in *EventParams, opts ...grpc.CallOption) (*Events, error) {
	out := new(Events)
	err := c.cc.Invoke(ctx, "/header.LiveMgr/TopEvents", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *liveMgrClient) TopLocations(ctx context.Context, in *common.Id, opts ...grpc.CallOption) (*LocationMetrics, error) {
	out := new(LocationMetrics)
	err := c.cc.Invoke(ctx, "/header.LiveMgr/TopLocations", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *liveMgrClient) TopPages(ctx context.Context, in *common.Id, opts ...grpc.CallOption) (*PageMetrics, error) {
	out := new(PageMetrics)
	err := c.cc.Invoke(ctx, "/header.LiveMgr/TopPages", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *liveMgrClient) TopSources(ctx context.Context, in *common.Id, opts ...grpc.CallOption) (*SourceMetrics, error) {
	out := new(SourceMetrics)
	err := c.cc.Invoke(ctx, "/header.LiveMgr/TopSources", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *liveMgrClient) CountActiveUsers(ctx context.Context, in *common.Id, opts ...grpc.CallOption) (*UserMetric, error) {
	out := new(UserMetric)
	err := c.cc.Invoke(ctx, "/header.LiveMgr/CountActiveUsers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *liveMgrClient) Presences(ctx context.Context, in *PresencesRequest, opts ...grpc.CallOption) (*PresencesResponse, error) {
	out := new(PresencesResponse)
	err := c.cc.Invoke(ctx, "/header.LiveMgr/Presences", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LiveMgrServer is the server API for LiveMgr service.
type LiveMgrServer interface {
	SearchLocations(context.Context, *LocationParams) (*Locations, error)
	FilterActiveUsers(context.Context, *UserInfoParams) (*Users, error)
	TopEvents(context.Context, *EventParams) (*Events, error)
	TopLocations(context.Context, *common.Id) (*LocationMetrics, error)
	TopPages(context.Context, *common.Id) (*PageMetrics, error)
	TopSources(context.Context, *common.Id) (*SourceMetrics, error)
	CountActiveUsers(context.Context, *common.Id) (*UserMetric, error)
	Presences(context.Context, *PresencesRequest) (*PresencesResponse, error)
}

// UnimplementedLiveMgrServer can be embedded to have forward compatible implementations.
type UnimplementedLiveMgrServer struct {
}

func (*UnimplementedLiveMgrServer) SearchLocations(context.Context, *LocationParams) (*Locations, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchLocations not implemented")
}
func (*UnimplementedLiveMgrServer) FilterActiveUsers(context.Context, *UserInfoParams) (*Users, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FilterActiveUsers not implemented")
}
func (*UnimplementedLiveMgrServer) TopEvents(context.Context, *EventParams) (*Events, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TopEvents not implemented")
}
func (*UnimplementedLiveMgrServer) TopLocations(context.Context, *common.Id) (*LocationMetrics, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TopLocations not implemented")
}
func (*UnimplementedLiveMgrServer) TopPages(context.Context, *common.Id) (*PageMetrics, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TopPages not implemented")
}
func (*UnimplementedLiveMgrServer) TopSources(context.Context, *common.Id) (*SourceMetrics, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TopSources not implemented")
}
func (*UnimplementedLiveMgrServer) CountActiveUsers(context.Context, *common.Id) (*UserMetric, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CountActiveUsers not implemented")
}
func (*UnimplementedLiveMgrServer) Presences(context.Context, *PresencesRequest) (*PresencesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Presences not implemented")
}

func RegisterLiveMgrServer(s *grpc.Server, srv LiveMgrServer) {
	s.RegisterService(&_LiveMgr_serviceDesc, srv)
}

func _LiveMgr_SearchLocations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LocationParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LiveMgrServer).SearchLocations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.LiveMgr/SearchLocations",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LiveMgrServer).SearchLocations(ctx, req.(*LocationParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _LiveMgr_FilterActiveUsers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserInfoParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LiveMgrServer).FilterActiveUsers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.LiveMgr/FilterActiveUsers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LiveMgrServer).FilterActiveUsers(ctx, req.(*UserInfoParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _LiveMgr_TopEvents_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EventParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LiveMgrServer).TopEvents(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.LiveMgr/TopEvents",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LiveMgrServer).TopEvents(ctx, req.(*EventParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _LiveMgr_TopLocations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LiveMgrServer).TopLocations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.LiveMgr/TopLocations",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LiveMgrServer).TopLocations(ctx, req.(*common.Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _LiveMgr_TopPages_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LiveMgrServer).TopPages(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.LiveMgr/TopPages",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LiveMgrServer).TopPages(ctx, req.(*common.Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _LiveMgr_TopSources_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LiveMgrServer).TopSources(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.LiveMgr/TopSources",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LiveMgrServer).TopSources(ctx, req.(*common.Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _LiveMgr_CountActiveUsers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LiveMgrServer).CountActiveUsers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.LiveMgr/CountActiveUsers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LiveMgrServer).CountActiveUsers(ctx, req.(*common.Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _LiveMgr_Presences_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PresencesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LiveMgrServer).Presences(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.LiveMgr/Presences",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LiveMgrServer).Presences(ctx, req.(*PresencesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _LiveMgr_serviceDesc = grpc.ServiceDesc{
	ServiceName: "header.LiveMgr",
	HandlerType: (*LiveMgrServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SearchLocations",
			Handler:    _LiveMgr_SearchLocations_Handler,
		},
		{
			MethodName: "FilterActiveUsers",
			Handler:    _LiveMgr_FilterActiveUsers_Handler,
		},
		{
			MethodName: "TopEvents",
			Handler:    _LiveMgr_TopEvents_Handler,
		},
		{
			MethodName: "TopLocations",
			Handler:    _LiveMgr_TopLocations_Handler,
		},
		{
			MethodName: "TopPages",
			Handler:    _LiveMgr_TopPages_Handler,
		},
		{
			MethodName: "TopSources",
			Handler:    _LiveMgr_TopSources_Handler,
		},
		{
			MethodName: "CountActiveUsers",
			Handler:    _LiveMgr_CountActiveUsers_Handler,
		},
		{
			MethodName: "Presences",
			Handler:    _LiveMgr_Presences_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "service.proto",
}

// NoteMgrClient is the client API for NoteMgr service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type NoteMgrClient interface {
	ListNotes(ctx context.Context, in *ListNotesRequest, opts ...grpc.CallOption) (*Notes, error)
	AddNote(ctx context.Context, in *Note, opts ...grpc.CallOption) (*Note, error)
	UpdateNote(ctx context.Context, in *Note, opts ...grpc.CallOption) (*Note, error)
	DeleteNote(ctx context.Context, in *DeleteNoteRequest, opts ...grpc.CallOption) (*common.Empty, error)
	GetNote(ctx context.Context, in *GetNoteRequest, opts ...grpc.CallOption) (*Note, error)
	SearchNote(ctx context.Context, in *user.SearchNoteRequest, opts ...grpc.CallOption) (*user.SearchNoteResponse, error)
}

type noteMgrClient struct {
	cc grpc.ClientConnInterface
}

func NewNoteMgrClient(cc grpc.ClientConnInterface) NoteMgrClient {
	return &noteMgrClient{cc}
}

func (c *noteMgrClient) ListNotes(ctx context.Context, in *ListNotesRequest, opts ...grpc.CallOption) (*Notes, error) {
	out := new(Notes)
	err := c.cc.Invoke(ctx, "/header.NoteMgr/ListNotes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *noteMgrClient) AddNote(ctx context.Context, in *Note, opts ...grpc.CallOption) (*Note, error) {
	out := new(Note)
	err := c.cc.Invoke(ctx, "/header.NoteMgr/AddNote", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *noteMgrClient) UpdateNote(ctx context.Context, in *Note, opts ...grpc.CallOption) (*Note, error) {
	out := new(Note)
	err := c.cc.Invoke(ctx, "/header.NoteMgr/UpdateNote", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *noteMgrClient) DeleteNote(ctx context.Context, in *DeleteNoteRequest, opts ...grpc.CallOption) (*common.Empty, error) {
	out := new(common.Empty)
	err := c.cc.Invoke(ctx, "/header.NoteMgr/DeleteNote", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *noteMgrClient) GetNote(ctx context.Context, in *GetNoteRequest, opts ...grpc.CallOption) (*Note, error) {
	out := new(Note)
	err := c.cc.Invoke(ctx, "/header.NoteMgr/GetNote", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *noteMgrClient) SearchNote(ctx context.Context, in *user.SearchNoteRequest, opts ...grpc.CallOption) (*user.SearchNoteResponse, error) {
	out := new(user.SearchNoteResponse)
	err := c.cc.Invoke(ctx, "/header.NoteMgr/SearchNote", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NoteMgrServer is the server API for NoteMgr service.
type NoteMgrServer interface {
	ListNotes(context.Context, *ListNotesRequest) (*Notes, error)
	AddNote(context.Context, *Note) (*Note, error)
	UpdateNote(context.Context, *Note) (*Note, error)
	DeleteNote(context.Context, *DeleteNoteRequest) (*common.Empty, error)
	GetNote(context.Context, *GetNoteRequest) (*Note, error)
	SearchNote(context.Context, *user.SearchNoteRequest) (*user.SearchNoteResponse, error)
}

// UnimplementedNoteMgrServer can be embedded to have forward compatible implementations.
type UnimplementedNoteMgrServer struct {
}

func (*UnimplementedNoteMgrServer) ListNotes(context.Context, *ListNotesRequest) (*Notes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListNotes not implemented")
}
func (*UnimplementedNoteMgrServer) AddNote(context.Context, *Note) (*Note, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddNote not implemented")
}
func (*UnimplementedNoteMgrServer) UpdateNote(context.Context, *Note) (*Note, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateNote not implemented")
}
func (*UnimplementedNoteMgrServer) DeleteNote(context.Context, *DeleteNoteRequest) (*common.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteNote not implemented")
}
func (*UnimplementedNoteMgrServer) GetNote(context.Context, *GetNoteRequest) (*Note, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNote not implemented")
}
func (*UnimplementedNoteMgrServer) SearchNote(context.Context, *user.SearchNoteRequest) (*user.SearchNoteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchNote not implemented")
}

func RegisterNoteMgrServer(s *grpc.Server, srv NoteMgrServer) {
	s.RegisterService(&_NoteMgr_serviceDesc, srv)
}

func _NoteMgr_ListNotes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListNotesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NoteMgrServer).ListNotes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.NoteMgr/ListNotes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NoteMgrServer).ListNotes(ctx, req.(*ListNotesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NoteMgr_AddNote_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Note)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NoteMgrServer).AddNote(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.NoteMgr/AddNote",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NoteMgrServer).AddNote(ctx, req.(*Note))
	}
	return interceptor(ctx, in, info, handler)
}

func _NoteMgr_UpdateNote_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Note)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NoteMgrServer).UpdateNote(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.NoteMgr/UpdateNote",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NoteMgrServer).UpdateNote(ctx, req.(*Note))
	}
	return interceptor(ctx, in, info, handler)
}

func _NoteMgr_DeleteNote_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteNoteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NoteMgrServer).DeleteNote(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.NoteMgr/DeleteNote",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NoteMgrServer).DeleteNote(ctx, req.(*DeleteNoteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NoteMgr_GetNote_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetNoteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NoteMgrServer).GetNote(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.NoteMgr/GetNote",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NoteMgrServer).GetNote(ctx, req.(*GetNoteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NoteMgr_SearchNote_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(user.SearchNoteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NoteMgrServer).SearchNote(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.NoteMgr/SearchNote",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NoteMgrServer).SearchNote(ctx, req.(*user.SearchNoteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _NoteMgr_serviceDesc = grpc.ServiceDesc{
	ServiceName: "header.NoteMgr",
	HandlerType: (*NoteMgrServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListNotes",
			Handler:    _NoteMgr_ListNotes_Handler,
		},
		{
			MethodName: "AddNote",
			Handler:    _NoteMgr_AddNote_Handler,
		},
		{
			MethodName: "UpdateNote",
			Handler:    _NoteMgr_UpdateNote_Handler,
		},
		{
			MethodName: "DeleteNote",
			Handler:    _NoteMgr_DeleteNote_Handler,
		},
		{
			MethodName: "GetNote",
			Handler:    _NoteMgr_GetNote_Handler,
		},
		{
			MethodName: "SearchNote",
			Handler:    _NoteMgr_SearchNote_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "service.proto",
}

// AutomationMgrClient is the client API for AutomationMgr service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type AutomationMgrClient interface {
	ListAutomations(ctx context.Context, in *common.Id, opts ...grpc.CallOption) (*Automations, error)
	UpdateAutomation(ctx context.Context, in *Automation, opts ...grpc.CallOption) (*Automation, error)
	DeleteAutomation(ctx context.Context, in *common.Id, opts ...grpc.CallOption) (*common.Empty, error)
	ReadAutomation(ctx context.Context, in *common.Id, opts ...grpc.CallOption) (*Automation, error)
	CreateAutomation(ctx context.Context, in *Automation, opts ...grpc.CallOption) (*Automation, error)
}

type automationMgrClient struct {
	cc grpc.ClientConnInterface
}

func NewAutomationMgrClient(cc grpc.ClientConnInterface) AutomationMgrClient {
	return &automationMgrClient{cc}
}

func (c *automationMgrClient) ListAutomations(ctx context.Context, in *common.Id, opts ...grpc.CallOption) (*Automations, error) {
	out := new(Automations)
	err := c.cc.Invoke(ctx, "/header.AutomationMgr/ListAutomations", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *automationMgrClient) UpdateAutomation(ctx context.Context, in *Automation, opts ...grpc.CallOption) (*Automation, error) {
	out := new(Automation)
	err := c.cc.Invoke(ctx, "/header.AutomationMgr/UpdateAutomation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *automationMgrClient) DeleteAutomation(ctx context.Context, in *common.Id, opts ...grpc.CallOption) (*common.Empty, error) {
	out := new(common.Empty)
	err := c.cc.Invoke(ctx, "/header.AutomationMgr/DeleteAutomation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *automationMgrClient) ReadAutomation(ctx context.Context, in *common.Id, opts ...grpc.CallOption) (*Automation, error) {
	out := new(Automation)
	err := c.cc.Invoke(ctx, "/header.AutomationMgr/ReadAutomation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *automationMgrClient) CreateAutomation(ctx context.Context, in *Automation, opts ...grpc.CallOption) (*Automation, error) {
	out := new(Automation)
	err := c.cc.Invoke(ctx, "/header.AutomationMgr/CreateAutomation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AutomationMgrServer is the server API for AutomationMgr service.
type AutomationMgrServer interface {
	ListAutomations(context.Context, *common.Id) (*Automations, error)
	UpdateAutomation(context.Context, *Automation) (*Automation, error)
	DeleteAutomation(context.Context, *common.Id) (*common.Empty, error)
	ReadAutomation(context.Context, *common.Id) (*Automation, error)
	CreateAutomation(context.Context, *Automation) (*Automation, error)
}

// UnimplementedAutomationMgrServer can be embedded to have forward compatible implementations.
type UnimplementedAutomationMgrServer struct {
}

func (*UnimplementedAutomationMgrServer) ListAutomations(context.Context, *common.Id) (*Automations, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAutomations not implemented")
}
func (*UnimplementedAutomationMgrServer) UpdateAutomation(context.Context, *Automation) (*Automation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAutomation not implemented")
}
func (*UnimplementedAutomationMgrServer) DeleteAutomation(context.Context, *common.Id) (*common.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteAutomation not implemented")
}
func (*UnimplementedAutomationMgrServer) ReadAutomation(context.Context, *common.Id) (*Automation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadAutomation not implemented")
}
func (*UnimplementedAutomationMgrServer) CreateAutomation(context.Context, *Automation) (*Automation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAutomation not implemented")
}

func RegisterAutomationMgrServer(s *grpc.Server, srv AutomationMgrServer) {
	s.RegisterService(&_AutomationMgr_serviceDesc, srv)
}

func _AutomationMgr_ListAutomations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AutomationMgrServer).ListAutomations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.AutomationMgr/ListAutomations",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AutomationMgrServer).ListAutomations(ctx, req.(*common.Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _AutomationMgr_UpdateAutomation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Automation)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AutomationMgrServer).UpdateAutomation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.AutomationMgr/UpdateAutomation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AutomationMgrServer).UpdateAutomation(ctx, req.(*Automation))
	}
	return interceptor(ctx, in, info, handler)
}

func _AutomationMgr_DeleteAutomation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AutomationMgrServer).DeleteAutomation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.AutomationMgr/DeleteAutomation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AutomationMgrServer).DeleteAutomation(ctx, req.(*common.Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _AutomationMgr_ReadAutomation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AutomationMgrServer).ReadAutomation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.AutomationMgr/ReadAutomation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AutomationMgrServer).ReadAutomation(ctx, req.(*common.Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _AutomationMgr_CreateAutomation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Automation)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AutomationMgrServer).CreateAutomation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.AutomationMgr/CreateAutomation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AutomationMgrServer).CreateAutomation(ctx, req.(*Automation))
	}
	return interceptor(ctx, in, info, handler)
}

var _AutomationMgr_serviceDesc = grpc.ServiceDesc{
	ServiceName: "header.AutomationMgr",
	HandlerType: (*AutomationMgrServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListAutomations",
			Handler:    _AutomationMgr_ListAutomations_Handler,
		},
		{
			MethodName: "UpdateAutomation",
			Handler:    _AutomationMgr_UpdateAutomation_Handler,
		},
		{
			MethodName: "DeleteAutomation",
			Handler:    _AutomationMgr_DeleteAutomation_Handler,
		},
		{
			MethodName: "ReadAutomation",
			Handler:    _AutomationMgr_ReadAutomation_Handler,
		},
		{
			MethodName: "CreateAutomation",
			Handler:    _AutomationMgr_CreateAutomation_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "service.proto",
}

// AttributeMgrClient is the client API for AttributeMgr service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type AttributeMgrClient interface {
	ListAttributeDefinitions(ctx context.Context, in *common.Empty, opts ...grpc.CallOption) (*AttributeDefinitions, error)
	CreateAttributeDefinition(ctx context.Context, in *AttributeDefinition, opts ...grpc.CallOption) (*AttributeDefinition, error)
	UpdateAttributeDefinition(ctx context.Context, in *AttributeDefinition, opts ...grpc.CallOption) (*AttributeDefinition, error)
	DeleteAttributeDefinition(ctx context.Context, in *DeleteAttrRequest, opts ...grpc.CallOption) (*common.Empty, error)
}

type attributeMgrClient struct {
	cc grpc.ClientConnInterface
}

func NewAttributeMgrClient(cc grpc.ClientConnInterface) AttributeMgrClient {
	return &attributeMgrClient{cc}
}

func (c *attributeMgrClient) ListAttributeDefinitions(ctx context.Context, in *common.Empty, opts ...grpc.CallOption) (*AttributeDefinitions, error) {
	out := new(AttributeDefinitions)
	err := c.cc.Invoke(ctx, "/header.AttributeMgr/ListAttributeDefinitions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *attributeMgrClient) CreateAttributeDefinition(ctx context.Context, in *AttributeDefinition, opts ...grpc.CallOption) (*AttributeDefinition, error) {
	out := new(AttributeDefinition)
	err := c.cc.Invoke(ctx, "/header.AttributeMgr/CreateAttributeDefinition", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *attributeMgrClient) UpdateAttributeDefinition(ctx context.Context, in *AttributeDefinition, opts ...grpc.CallOption) (*AttributeDefinition, error) {
	out := new(AttributeDefinition)
	err := c.cc.Invoke(ctx, "/header.AttributeMgr/UpdateAttributeDefinition", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *attributeMgrClient) DeleteAttributeDefinition(ctx context.Context, in *DeleteAttrRequest, opts ...grpc.CallOption) (*common.Empty, error) {
	out := new(common.Empty)
	err := c.cc.Invoke(ctx, "/header.AttributeMgr/DeleteAttributeDefinition", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AttributeMgrServer is the server API for AttributeMgr service.
type AttributeMgrServer interface {
	ListAttributeDefinitions(context.Context, *common.Empty) (*AttributeDefinitions, error)
	CreateAttributeDefinition(context.Context, *AttributeDefinition) (*AttributeDefinition, error)
	UpdateAttributeDefinition(context.Context, *AttributeDefinition) (*AttributeDefinition, error)
	DeleteAttributeDefinition(context.Context, *DeleteAttrRequest) (*common.Empty, error)
}

// UnimplementedAttributeMgrServer can be embedded to have forward compatible implementations.
type UnimplementedAttributeMgrServer struct {
}

func (*UnimplementedAttributeMgrServer) ListAttributeDefinitions(context.Context, *common.Empty) (*AttributeDefinitions, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAttributeDefinitions not implemented")
}
func (*UnimplementedAttributeMgrServer) CreateAttributeDefinition(context.Context, *AttributeDefinition) (*AttributeDefinition, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAttributeDefinition not implemented")
}
func (*UnimplementedAttributeMgrServer) UpdateAttributeDefinition(context.Context, *AttributeDefinition) (*AttributeDefinition, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAttributeDefinition not implemented")
}
func (*UnimplementedAttributeMgrServer) DeleteAttributeDefinition(context.Context, *DeleteAttrRequest) (*common.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteAttributeDefinition not implemented")
}

func RegisterAttributeMgrServer(s *grpc.Server, srv AttributeMgrServer) {
	s.RegisterService(&_AttributeMgr_serviceDesc, srv)
}

func _AttributeMgr_ListAttributeDefinitions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AttributeMgrServer).ListAttributeDefinitions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.AttributeMgr/ListAttributeDefinitions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AttributeMgrServer).ListAttributeDefinitions(ctx, req.(*common.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _AttributeMgr_CreateAttributeDefinition_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AttributeDefinition)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AttributeMgrServer).CreateAttributeDefinition(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.AttributeMgr/CreateAttributeDefinition",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AttributeMgrServer).CreateAttributeDefinition(ctx, req.(*AttributeDefinition))
	}
	return interceptor(ctx, in, info, handler)
}

func _AttributeMgr_UpdateAttributeDefinition_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AttributeDefinition)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AttributeMgrServer).UpdateAttributeDefinition(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.AttributeMgr/UpdateAttributeDefinition",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AttributeMgrServer).UpdateAttributeDefinition(ctx, req.(*AttributeDefinition))
	}
	return interceptor(ctx, in, info, handler)
}

func _AttributeMgr_DeleteAttributeDefinition_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteAttrRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AttributeMgrServer).DeleteAttributeDefinition(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.AttributeMgr/DeleteAttributeDefinition",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AttributeMgrServer).DeleteAttributeDefinition(ctx, req.(*DeleteAttrRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _AttributeMgr_serviceDesc = grpc.ServiceDesc{
	ServiceName: "header.AttributeMgr",
	HandlerType: (*AttributeMgrServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListAttributeDefinitions",
			Handler:    _AttributeMgr_ListAttributeDefinitions_Handler,
		},
		{
			MethodName: "CreateAttributeDefinition",
			Handler:    _AttributeMgr_CreateAttributeDefinition_Handler,
		},
		{
			MethodName: "UpdateAttributeDefinition",
			Handler:    _AttributeMgr_UpdateAttributeDefinition_Handler,
		},
		{
			MethodName: "DeleteAttributeDefinition",
			Handler:    _AttributeMgr_DeleteAttributeDefinition_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "service.proto",
}

// PermClient is the client API for Perm service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type PermClient interface {
	Update(ctx context.Context, in *common.UpdatePermRequest, opts ...grpc.CallOption) (*common.Empty, error)
	UpdateState(ctx context.Context, in *common.UpdateStateRequest, opts ...grpc.CallOption) (*common.Empty, error)
	ReadPerm(ctx context.Context, in *common.ReadPermRequest, opts ...grpc.CallOption) (*common.Permission, error)
}

type permClient struct {
	cc grpc.ClientConnInterface
}

func NewPermClient(cc grpc.ClientConnInterface) PermClient {
	return &permClient{cc}
}

func (c *permClient) Update(ctx context.Context, in *common.UpdatePermRequest, opts ...grpc.CallOption) (*common.Empty, error) {
	out := new(common.Empty)
	err := c.cc.Invoke(ctx, "/header.Perm/Update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *permClient) UpdateState(ctx context.Context, in *common.UpdateStateRequest, opts ...grpc.CallOption) (*common.Empty, error) {
	out := new(common.Empty)
	err := c.cc.Invoke(ctx, "/header.Perm/UpdateState", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *permClient) ReadPerm(ctx context.Context, in *common.ReadPermRequest, opts ...grpc.CallOption) (*common.Permission, error) {
	out := new(common.Permission)
	err := c.cc.Invoke(ctx, "/header.Perm/ReadPerm", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PermServer is the server API for Perm service.
type PermServer interface {
	Update(context.Context, *common.UpdatePermRequest) (*common.Empty, error)
	UpdateState(context.Context, *common.UpdateStateRequest) (*common.Empty, error)
	ReadPerm(context.Context, *common.ReadPermRequest) (*common.Permission, error)
}

// UnimplementedPermServer can be embedded to have forward compatible implementations.
type UnimplementedPermServer struct {
}

func (*UnimplementedPermServer) Update(context.Context, *common.UpdatePermRequest) (*common.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (*UnimplementedPermServer) UpdateState(context.Context, *common.UpdateStateRequest) (*common.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateState not implemented")
}
func (*UnimplementedPermServer) ReadPerm(context.Context, *common.ReadPermRequest) (*common.Permission, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadPerm not implemented")
}

func RegisterPermServer(s *grpc.Server, srv PermServer) {
	s.RegisterService(&_Perm_serviceDesc, srv)
}

func _Perm_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.UpdatePermRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PermServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.Perm/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PermServer).Update(ctx, req.(*common.UpdatePermRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Perm_UpdateState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.UpdateStateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PermServer).UpdateState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.Perm/UpdateState",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PermServer).UpdateState(ctx, req.(*common.UpdateStateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Perm_ReadPerm_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.ReadPermRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PermServer).ReadPerm(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.Perm/ReadPerm",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PermServer).ReadPerm(ctx, req.(*common.ReadPermRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Perm_serviceDesc = grpc.ServiceDesc{
	ServiceName: "header.Perm",
	HandlerType: (*PermServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Update",
			Handler:    _Perm_Update_Handler,
		},
		{
			MethodName: "UpdateState",
			Handler:    _Perm_UpdateState_Handler,
		},
		{
			MethodName: "ReadPerm",
			Handler:    _Perm_ReadPerm_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "service.proto",
}

// ConversationReporterClient is the client API for ConversationReporter service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ConversationReporterClient interface {
	CountConversationsByTags(ctx context.Context, in *conversation.CountByTagsRequest, opts ...grpc.CallOption) (*conversation.CountByTagsResponse, error)
	GetAvgResponseTimes(ctx context.Context, in *conversation.AvgResponseTimeRequest, opts ...grpc.CallOption) (*conversation.AvgResponseTimeResponse, error)
	GetTotalConversation(ctx context.Context, in *conversation.AvgResponseTimeRequest, opts ...grpc.CallOption) (*conversation.TotalConversationResponse, error)
	ReportConversations(ctx context.Context, in *conversation.CountReportRequest, opts ...grpc.CallOption) (*conversation.ReportResponse, error)
	ReportConversations2(ctx context.Context, in *conversation.ReportConversationsRequest, opts ...grpc.CallOption) (*conversation.ReportResponse, error)
	ReportAvailibilities(ctx context.Context, in *conversation.AvailibilityReportRequest, opts ...grpc.CallOption) (*conversation.ReportResponse, error)
}

type conversationReporterClient struct {
	cc grpc.ClientConnInterface
}

func NewConversationReporterClient(cc grpc.ClientConnInterface) ConversationReporterClient {
	return &conversationReporterClient{cc}
}

func (c *conversationReporterClient) CountConversationsByTags(ctx context.Context, in *conversation.CountByTagsRequest, opts ...grpc.CallOption) (*conversation.CountByTagsResponse, error) {
	out := new(conversation.CountByTagsResponse)
	err := c.cc.Invoke(ctx, "/header.ConversationReporter/CountConversationsByTags", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *conversationReporterClient) GetAvgResponseTimes(ctx context.Context, in *conversation.AvgResponseTimeRequest, opts ...grpc.CallOption) (*conversation.AvgResponseTimeResponse, error) {
	out := new(conversation.AvgResponseTimeResponse)
	err := c.cc.Invoke(ctx, "/header.ConversationReporter/GetAvgResponseTimes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *conversationReporterClient) GetTotalConversation(ctx context.Context, in *conversation.AvgResponseTimeRequest, opts ...grpc.CallOption) (*conversation.TotalConversationResponse, error) {
	out := new(conversation.TotalConversationResponse)
	err := c.cc.Invoke(ctx, "/header.ConversationReporter/GetTotalConversation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *conversationReporterClient) ReportConversations(ctx context.Context, in *conversation.CountReportRequest, opts ...grpc.CallOption) (*conversation.ReportResponse, error) {
	out := new(conversation.ReportResponse)
	err := c.cc.Invoke(ctx, "/header.ConversationReporter/ReportConversations", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *conversationReporterClient) ReportConversations2(ctx context.Context, in *conversation.ReportConversationsRequest, opts ...grpc.CallOption) (*conversation.ReportResponse, error) {
	out := new(conversation.ReportResponse)
	err := c.cc.Invoke(ctx, "/header.ConversationReporter/ReportConversations2", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *conversationReporterClient) ReportAvailibilities(ctx context.Context, in *conversation.AvailibilityReportRequest, opts ...grpc.CallOption) (*conversation.ReportResponse, error) {
	out := new(conversation.ReportResponse)
	err := c.cc.Invoke(ctx, "/header.ConversationReporter/ReportAvailibilities", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ConversationReporterServer is the server API for ConversationReporter service.
type ConversationReporterServer interface {
	CountConversationsByTags(context.Context, *conversation.CountByTagsRequest) (*conversation.CountByTagsResponse, error)
	GetAvgResponseTimes(context.Context, *conversation.AvgResponseTimeRequest) (*conversation.AvgResponseTimeResponse, error)
	GetTotalConversation(context.Context, *conversation.AvgResponseTimeRequest) (*conversation.TotalConversationResponse, error)
	ReportConversations(context.Context, *conversation.CountReportRequest) (*conversation.ReportResponse, error)
	ReportConversations2(context.Context, *conversation.ReportConversationsRequest) (*conversation.ReportResponse, error)
	ReportAvailibilities(context.Context, *conversation.AvailibilityReportRequest) (*conversation.ReportResponse, error)
}

// UnimplementedConversationReporterServer can be embedded to have forward compatible implementations.
type UnimplementedConversationReporterServer struct {
}

func (*UnimplementedConversationReporterServer) CountConversationsByTags(context.Context, *conversation.CountByTagsRequest) (*conversation.CountByTagsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CountConversationsByTags not implemented")
}
func (*UnimplementedConversationReporterServer) GetAvgResponseTimes(context.Context, *conversation.AvgResponseTimeRequest) (*conversation.AvgResponseTimeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAvgResponseTimes not implemented")
}
func (*UnimplementedConversationReporterServer) GetTotalConversation(context.Context, *conversation.AvgResponseTimeRequest) (*conversation.TotalConversationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTotalConversation not implemented")
}
func (*UnimplementedConversationReporterServer) ReportConversations(context.Context, *conversation.CountReportRequest) (*conversation.ReportResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReportConversations not implemented")
}
func (*UnimplementedConversationReporterServer) ReportConversations2(context.Context, *conversation.ReportConversationsRequest) (*conversation.ReportResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReportConversations2 not implemented")
}
func (*UnimplementedConversationReporterServer) ReportAvailibilities(context.Context, *conversation.AvailibilityReportRequest) (*conversation.ReportResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReportAvailibilities not implemented")
}

func RegisterConversationReporterServer(s *grpc.Server, srv ConversationReporterServer) {
	s.RegisterService(&_ConversationReporter_serviceDesc, srv)
}

func _ConversationReporter_CountConversationsByTags_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(conversation.CountByTagsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConversationReporterServer).CountConversationsByTags(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.ConversationReporter/CountConversationsByTags",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConversationReporterServer).CountConversationsByTags(ctx, req.(*conversation.CountByTagsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConversationReporter_GetAvgResponseTimes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(conversation.AvgResponseTimeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConversationReporterServer).GetAvgResponseTimes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.ConversationReporter/GetAvgResponseTimes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConversationReporterServer).GetAvgResponseTimes(ctx, req.(*conversation.AvgResponseTimeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConversationReporter_GetTotalConversation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(conversation.AvgResponseTimeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConversationReporterServer).GetTotalConversation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.ConversationReporter/GetTotalConversation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConversationReporterServer).GetTotalConversation(ctx, req.(*conversation.AvgResponseTimeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConversationReporter_ReportConversations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(conversation.CountReportRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConversationReporterServer).ReportConversations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.ConversationReporter/ReportConversations",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConversationReporterServer).ReportConversations(ctx, req.(*conversation.CountReportRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConversationReporter_ReportConversations2_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(conversation.ReportConversationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConversationReporterServer).ReportConversations2(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.ConversationReporter/ReportConversations2",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConversationReporterServer).ReportConversations2(ctx, req.(*conversation.ReportConversationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConversationReporter_ReportAvailibilities_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(conversation.AvailibilityReportRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConversationReporterServer).ReportAvailibilities(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.ConversationReporter/ReportAvailibilities",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConversationReporterServer).ReportAvailibilities(ctx, req.(*conversation.AvailibilityReportRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _ConversationReporter_serviceDesc = grpc.ServiceDesc{
	ServiceName: "header.ConversationReporter",
	HandlerType: (*ConversationReporterServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CountConversationsByTags",
			Handler:    _ConversationReporter_CountConversationsByTags_Handler,
		},
		{
			MethodName: "GetAvgResponseTimes",
			Handler:    _ConversationReporter_GetAvgResponseTimes_Handler,
		},
		{
			MethodName: "GetTotalConversation",
			Handler:    _ConversationReporter_GetTotalConversation_Handler,
		},
		{
			MethodName: "ReportConversations",
			Handler:    _ConversationReporter_ReportConversations_Handler,
		},
		{
			MethodName: "ReportConversations2",
			Handler:    _ConversationReporter_ReportConversations2_Handler,
		},
		{
			MethodName: "ReportAvailibilities",
			Handler:    _ConversationReporter_ReportAvailibilities_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "service.proto",
}

// AgentPresenceMgrClient is the client API for AgentPresenceMgr service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type AgentPresenceMgrClient interface {
	ReadPresence(ctx context.Context, in *common.Id, opts ...grpc.CallOption) (*account.Presence, error)
	UpdatePresence(ctx context.Context, in *common.Id, opts ...grpc.CallOption) (*account.Presence, error)
}

type agentPresenceMgrClient struct {
	cc grpc.ClientConnInterface
}

func NewAgentPresenceMgrClient(cc grpc.ClientConnInterface) AgentPresenceMgrClient {
	return &agentPresenceMgrClient{cc}
}

func (c *agentPresenceMgrClient) ReadPresence(ctx context.Context, in *common.Id, opts ...grpc.CallOption) (*account.Presence, error) {
	out := new(account.Presence)
	err := c.cc.Invoke(ctx, "/header.AgentPresenceMgr/ReadPresence", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentPresenceMgrClient) UpdatePresence(ctx context.Context, in *common.Id, opts ...grpc.CallOption) (*account.Presence, error) {
	out := new(account.Presence)
	err := c.cc.Invoke(ctx, "/header.AgentPresenceMgr/UpdatePresence", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AgentPresenceMgrServer is the server API for AgentPresenceMgr service.
type AgentPresenceMgrServer interface {
	ReadPresence(context.Context, *common.Id) (*account.Presence, error)
	UpdatePresence(context.Context, *common.Id) (*account.Presence, error)
}

// UnimplementedAgentPresenceMgrServer can be embedded to have forward compatible implementations.
type UnimplementedAgentPresenceMgrServer struct {
}

func (*UnimplementedAgentPresenceMgrServer) ReadPresence(context.Context, *common.Id) (*account.Presence, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadPresence not implemented")
}
func (*UnimplementedAgentPresenceMgrServer) UpdatePresence(context.Context, *common.Id) (*account.Presence, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePresence not implemented")
}

func RegisterAgentPresenceMgrServer(s *grpc.Server, srv AgentPresenceMgrServer) {
	s.RegisterService(&_AgentPresenceMgr_serviceDesc, srv)
}

func _AgentPresenceMgr_ReadPresence_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentPresenceMgrServer).ReadPresence(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.AgentPresenceMgr/ReadPresence",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentPresenceMgrServer).ReadPresence(ctx, req.(*common.Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _AgentPresenceMgr_UpdatePresence_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentPresenceMgrServer).UpdatePresence(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.AgentPresenceMgr/UpdatePresence",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentPresenceMgrServer).UpdatePresence(ctx, req.(*common.Id))
	}
	return interceptor(ctx, in, info, handler)
}

var _AgentPresenceMgr_serviceDesc = grpc.ServiceDesc{
	ServiceName: "header.AgentPresenceMgr",
	HandlerType: (*AgentPresenceMgrServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ReadPresence",
			Handler:    _AgentPresenceMgr_ReadPresence_Handler,
		},
		{
			MethodName: "UpdatePresence",
			Handler:    _AgentPresenceMgr_UpdatePresence_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "service.proto",
}

// RuleMgrClient is the client API for RuleMgr service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type RuleMgrClient interface {
	UpdateRule(ctx context.Context, in *Rule, opts ...grpc.CallOption) (*Rule, error)
	CreateRule(ctx context.Context, in *Rule, opts ...grpc.CallOption) (*Rule, error)
	DeleteRule(ctx context.Context, in *common.Id, opts ...grpc.CallOption) (*common.Empty, error)
	ReadRule(ctx context.Context, in *common.Id, opts ...grpc.CallOption) (*Rule, error)
	ListRules(ctx context.Context, in *common.Id, opts ...grpc.CallOption) (*Route, error)
}

type ruleMgrClient struct {
	cc grpc.ClientConnInterface
}

func NewRuleMgrClient(cc grpc.ClientConnInterface) RuleMgrClient {
	return &ruleMgrClient{cc}
}

func (c *ruleMgrClient) UpdateRule(ctx context.Context, in *Rule, opts ...grpc.CallOption) (*Rule, error) {
	out := new(Rule)
	err := c.cc.Invoke(ctx, "/header.RuleMgr/UpdateRule", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ruleMgrClient) CreateRule(ctx context.Context, in *Rule, opts ...grpc.CallOption) (*Rule, error) {
	out := new(Rule)
	err := c.cc.Invoke(ctx, "/header.RuleMgr/CreateRule", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ruleMgrClient) DeleteRule(ctx context.Context, in *common.Id, opts ...grpc.CallOption) (*common.Empty, error) {
	out := new(common.Empty)
	err := c.cc.Invoke(ctx, "/header.RuleMgr/DeleteRule", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ruleMgrClient) ReadRule(ctx context.Context, in *common.Id, opts ...grpc.CallOption) (*Rule, error) {
	out := new(Rule)
	err := c.cc.Invoke(ctx, "/header.RuleMgr/ReadRule", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ruleMgrClient) ListRules(ctx context.Context, in *common.Id, opts ...grpc.CallOption) (*Route, error) {
	out := new(Route)
	err := c.cc.Invoke(ctx, "/header.RuleMgr/ListRules", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RuleMgrServer is the server API for RuleMgr service.
type RuleMgrServer interface {
	UpdateRule(context.Context, *Rule) (*Rule, error)
	CreateRule(context.Context, *Rule) (*Rule, error)
	DeleteRule(context.Context, *common.Id) (*common.Empty, error)
	ReadRule(context.Context, *common.Id) (*Rule, error)
	ListRules(context.Context, *common.Id) (*Route, error)
}

// UnimplementedRuleMgrServer can be embedded to have forward compatible implementations.
type UnimplementedRuleMgrServer struct {
}

func (*UnimplementedRuleMgrServer) UpdateRule(context.Context, *Rule) (*Rule, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateRule not implemented")
}
func (*UnimplementedRuleMgrServer) CreateRule(context.Context, *Rule) (*Rule, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateRule not implemented")
}
func (*UnimplementedRuleMgrServer) DeleteRule(context.Context, *common.Id) (*common.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteRule not implemented")
}
func (*UnimplementedRuleMgrServer) ReadRule(context.Context, *common.Id) (*Rule, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadRule not implemented")
}
func (*UnimplementedRuleMgrServer) ListRules(context.Context, *common.Id) (*Route, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListRules not implemented")
}

func RegisterRuleMgrServer(s *grpc.Server, srv RuleMgrServer) {
	s.RegisterService(&_RuleMgr_serviceDesc, srv)
}

func _RuleMgr_UpdateRule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Rule)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RuleMgrServer).UpdateRule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.RuleMgr/UpdateRule",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RuleMgrServer).UpdateRule(ctx, req.(*Rule))
	}
	return interceptor(ctx, in, info, handler)
}

func _RuleMgr_CreateRule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Rule)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RuleMgrServer).CreateRule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.RuleMgr/CreateRule",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RuleMgrServer).CreateRule(ctx, req.(*Rule))
	}
	return interceptor(ctx, in, info, handler)
}

func _RuleMgr_DeleteRule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RuleMgrServer).DeleteRule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.RuleMgr/DeleteRule",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RuleMgrServer).DeleteRule(ctx, req.(*common.Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _RuleMgr_ReadRule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RuleMgrServer).ReadRule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.RuleMgr/ReadRule",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RuleMgrServer).ReadRule(ctx, req.(*common.Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _RuleMgr_ListRules_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RuleMgrServer).ListRules(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.RuleMgr/ListRules",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RuleMgrServer).ListRules(ctx, req.(*common.Id))
	}
	return interceptor(ctx, in, info, handler)
}

var _RuleMgr_serviceDesc = grpc.ServiceDesc{
	ServiceName: "header.RuleMgr",
	HandlerType: (*RuleMgrServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UpdateRule",
			Handler:    _RuleMgr_UpdateRule_Handler,
		},
		{
			MethodName: "CreateRule",
			Handler:    _RuleMgr_CreateRule_Handler,
		},
		{
			MethodName: "DeleteRule",
			Handler:    _RuleMgr_DeleteRule_Handler,
		},
		{
			MethodName: "ReadRule",
			Handler:    _RuleMgr_ReadRule_Handler,
		},
		{
			MethodName: "ListRules",
			Handler:    _RuleMgr_ListRules_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "service.proto",
}

// ConversationMgrClient is the client API for ConversationMgr service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ConversationMgrClient interface {
	AssignRule(ctx context.Context, in *AssignRequest, opts ...grpc.CallOption) (*RouteResult, error)
	PongMessage(ctx context.Context, in *Event, opts ...grpc.CallOption) (*Event, error)
	// rpc UpdateConversationState(Conversation) returns (Conversation);
	StartConversation(ctx context.Context, in *StartRequest, opts ...grpc.CallOption) (*Conversation, error)
	EndConversation(ctx context.Context, in *common.Id, opts ...grpc.CallOption) (*Conversation, error)
	GetConversation(ctx context.Context, in *common.Id, opts ...grpc.CallOption) (*Conversation, error)
	ListConversations(ctx context.Context, in *ListConversationsRequest, opts ...grpc.CallOption) (*Conversations, error)
	MatchConversations(ctx context.Context, in *common.Ids, opts ...grpc.CallOption) (*Conversations, error)
	TagConversation(ctx context.Context, in *TagRequest, opts ...grpc.CallOption) (*common.Empty, error)
	UntagConversation(ctx context.Context, in *TagRequest, opts ...grpc.CallOption) (*common.Empty, error)
	JoinConversation(ctx context.Context, in *ConversationMember, opts ...grpc.CallOption) (*common.Empty, error)
	LeftConversation(ctx context.Context, in *ConversationMember, opts ...grpc.CallOption) (*common.Empty, error)
	Typing(ctx context.Context, in *common.Id, opts ...grpc.CallOption) (*common.Empty, error)
	Ping(ctx context.Context, in *common.PingRequest, opts ...grpc.CallOption) (*common.Pong, error)
	UpdateConversationInfo(ctx context.Context, in *Conversation, opts ...grpc.CallOption) (*Conversation, error)
	SearchConversation(ctx context.Context, in *conversation.SearchConversationRequest, opts ...grpc.CallOption) (*conversation.SearchConversationResponse, error)
	ListConversations2(ctx context.Context, in *conversation.ConversationListRequest, opts ...grpc.CallOption) (*conversation.ConversationListResponse, error)
	UpdateMuteConversation(ctx context.Context, in *Conversation, opts ...grpc.CallOption) (*common.Empty, error)
	UnwatchConversation(ctx context.Context, in *Conversation, opts ...grpc.CallOption) (*common.Empty, error)
	MarkReadConversation(ctx context.Context, in *Conversation, opts ...grpc.CallOption) (*common.Empty, error)
	UpdateEndchatSetting(ctx context.Context, in *EndchatSetting, opts ...grpc.CallOption) (*EndchatSetting, error)
	GetEndchatSetting(ctx context.Context, in *common.Id, opts ...grpc.CallOption) (*EndchatSetting, error)
	TerminateBot(ctx context.Context, in *BotTerminated, opts ...grpc.CallOption) (*Event, error)
}

type conversationMgrClient struct {
	cc grpc.ClientConnInterface
}

func NewConversationMgrClient(cc grpc.ClientConnInterface) ConversationMgrClient {
	return &conversationMgrClient{cc}
}

func (c *conversationMgrClient) AssignRule(ctx context.Context, in *AssignRequest, opts ...grpc.CallOption) (*RouteResult, error) {
	out := new(RouteResult)
	err := c.cc.Invoke(ctx, "/header.ConversationMgr/AssignRule", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *conversationMgrClient) PongMessage(ctx context.Context, in *Event, opts ...grpc.CallOption) (*Event, error) {
	out := new(Event)
	err := c.cc.Invoke(ctx, "/header.ConversationMgr/PongMessage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *conversationMgrClient) StartConversation(ctx context.Context, in *StartRequest, opts ...grpc.CallOption) (*Conversation, error) {
	out := new(Conversation)
	err := c.cc.Invoke(ctx, "/header.ConversationMgr/StartConversation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *conversationMgrClient) EndConversation(ctx context.Context, in *common.Id, opts ...grpc.CallOption) (*Conversation, error) {
	out := new(Conversation)
	err := c.cc.Invoke(ctx, "/header.ConversationMgr/EndConversation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *conversationMgrClient) GetConversation(ctx context.Context, in *common.Id, opts ...grpc.CallOption) (*Conversation, error) {
	out := new(Conversation)
	err := c.cc.Invoke(ctx, "/header.ConversationMgr/GetConversation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *conversationMgrClient) ListConversations(ctx context.Context, in *ListConversationsRequest, opts ...grpc.CallOption) (*Conversations, error) {
	out := new(Conversations)
	err := c.cc.Invoke(ctx, "/header.ConversationMgr/ListConversations", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *conversationMgrClient) MatchConversations(ctx context.Context, in *common.Ids, opts ...grpc.CallOption) (*Conversations, error) {
	out := new(Conversations)
	err := c.cc.Invoke(ctx, "/header.ConversationMgr/MatchConversations", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *conversationMgrClient) TagConversation(ctx context.Context, in *TagRequest, opts ...grpc.CallOption) (*common.Empty, error) {
	out := new(common.Empty)
	err := c.cc.Invoke(ctx, "/header.ConversationMgr/TagConversation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *conversationMgrClient) UntagConversation(ctx context.Context, in *TagRequest, opts ...grpc.CallOption) (*common.Empty, error) {
	out := new(common.Empty)
	err := c.cc.Invoke(ctx, "/header.ConversationMgr/UntagConversation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *conversationMgrClient) JoinConversation(ctx context.Context, in *ConversationMember, opts ...grpc.CallOption) (*common.Empty, error) {
	out := new(common.Empty)
	err := c.cc.Invoke(ctx, "/header.ConversationMgr/JoinConversation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *conversationMgrClient) LeftConversation(ctx context.Context, in *ConversationMember, opts ...grpc.CallOption) (*common.Empty, error) {
	out := new(common.Empty)
	err := c.cc.Invoke(ctx, "/header.ConversationMgr/LeftConversation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *conversationMgrClient) Typing(ctx context.Context, in *common.Id, opts ...grpc.CallOption) (*common.Empty, error) {
	out := new(common.Empty)
	err := c.cc.Invoke(ctx, "/header.ConversationMgr/Typing", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *conversationMgrClient) Ping(ctx context.Context, in *common.PingRequest, opts ...grpc.CallOption) (*common.Pong, error) {
	out := new(common.Pong)
	err := c.cc.Invoke(ctx, "/header.ConversationMgr/Ping", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *conversationMgrClient) UpdateConversationInfo(ctx context.Context, in *Conversation, opts ...grpc.CallOption) (*Conversation, error) {
	out := new(Conversation)
	err := c.cc.Invoke(ctx, "/header.ConversationMgr/UpdateConversationInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *conversationMgrClient) SearchConversation(ctx context.Context, in *conversation.SearchConversationRequest, opts ...grpc.CallOption) (*conversation.SearchConversationResponse, error) {
	out := new(conversation.SearchConversationResponse)
	err := c.cc.Invoke(ctx, "/header.ConversationMgr/SearchConversation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *conversationMgrClient) ListConversations2(ctx context.Context, in *conversation.ConversationListRequest, opts ...grpc.CallOption) (*conversation.ConversationListResponse, error) {
	out := new(conversation.ConversationListResponse)
	err := c.cc.Invoke(ctx, "/header.ConversationMgr/ListConversations2", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *conversationMgrClient) UpdateMuteConversation(ctx context.Context, in *Conversation, opts ...grpc.CallOption) (*common.Empty, error) {
	out := new(common.Empty)
	err := c.cc.Invoke(ctx, "/header.ConversationMgr/UpdateMuteConversation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *conversationMgrClient) UnwatchConversation(ctx context.Context, in *Conversation, opts ...grpc.CallOption) (*common.Empty, error) {
	out := new(common.Empty)
	err := c.cc.Invoke(ctx, "/header.ConversationMgr/UnwatchConversation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *conversationMgrClient) MarkReadConversation(ctx context.Context, in *Conversation, opts ...grpc.CallOption) (*common.Empty, error) {
	out := new(common.Empty)
	err := c.cc.Invoke(ctx, "/header.ConversationMgr/MarkReadConversation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *conversationMgrClient) UpdateEndchatSetting(ctx context.Context, in *EndchatSetting, opts ...grpc.CallOption) (*EndchatSetting, error) {
	out := new(EndchatSetting)
	err := c.cc.Invoke(ctx, "/header.ConversationMgr/UpdateEndchatSetting", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *conversationMgrClient) GetEndchatSetting(ctx context.Context, in *common.Id, opts ...grpc.CallOption) (*EndchatSetting, error) {
	out := new(EndchatSetting)
	err := c.cc.Invoke(ctx, "/header.ConversationMgr/GetEndchatSetting", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *conversationMgrClient) TerminateBot(ctx context.Context, in *BotTerminated, opts ...grpc.CallOption) (*Event, error) {
	out := new(Event)
	err := c.cc.Invoke(ctx, "/header.ConversationMgr/TerminateBot", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ConversationMgrServer is the server API for ConversationMgr service.
type ConversationMgrServer interface {
	AssignRule(context.Context, *AssignRequest) (*RouteResult, error)
	PongMessage(context.Context, *Event) (*Event, error)
	// rpc UpdateConversationState(Conversation) returns (Conversation);
	StartConversation(context.Context, *StartRequest) (*Conversation, error)
	EndConversation(context.Context, *common.Id) (*Conversation, error)
	GetConversation(context.Context, *common.Id) (*Conversation, error)
	ListConversations(context.Context, *ListConversationsRequest) (*Conversations, error)
	MatchConversations(context.Context, *common.Ids) (*Conversations, error)
	TagConversation(context.Context, *TagRequest) (*common.Empty, error)
	UntagConversation(context.Context, *TagRequest) (*common.Empty, error)
	JoinConversation(context.Context, *ConversationMember) (*common.Empty, error)
	LeftConversation(context.Context, *ConversationMember) (*common.Empty, error)
	Typing(context.Context, *common.Id) (*common.Empty, error)
	Ping(context.Context, *common.PingRequest) (*common.Pong, error)
	UpdateConversationInfo(context.Context, *Conversation) (*Conversation, error)
	SearchConversation(context.Context, *conversation.SearchConversationRequest) (*conversation.SearchConversationResponse, error)
	ListConversations2(context.Context, *conversation.ConversationListRequest) (*conversation.ConversationListResponse, error)
	UpdateMuteConversation(context.Context, *Conversation) (*common.Empty, error)
	UnwatchConversation(context.Context, *Conversation) (*common.Empty, error)
	MarkReadConversation(context.Context, *Conversation) (*common.Empty, error)
	UpdateEndchatSetting(context.Context, *EndchatSetting) (*EndchatSetting, error)
	GetEndchatSetting(context.Context, *common.Id) (*EndchatSetting, error)
	TerminateBot(context.Context, *BotTerminated) (*Event, error)
}

// UnimplementedConversationMgrServer can be embedded to have forward compatible implementations.
type UnimplementedConversationMgrServer struct {
}

func (*UnimplementedConversationMgrServer) AssignRule(context.Context, *AssignRequest) (*RouteResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AssignRule not implemented")
}
func (*UnimplementedConversationMgrServer) PongMessage(context.Context, *Event) (*Event, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PongMessage not implemented")
}
func (*UnimplementedConversationMgrServer) StartConversation(context.Context, *StartRequest) (*Conversation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartConversation not implemented")
}
func (*UnimplementedConversationMgrServer) EndConversation(context.Context, *common.Id) (*Conversation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EndConversation not implemented")
}
func (*UnimplementedConversationMgrServer) GetConversation(context.Context, *common.Id) (*Conversation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetConversation not implemented")
}
func (*UnimplementedConversationMgrServer) ListConversations(context.Context, *ListConversationsRequest) (*Conversations, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListConversations not implemented")
}
func (*UnimplementedConversationMgrServer) MatchConversations(context.Context, *common.Ids) (*Conversations, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MatchConversations not implemented")
}
func (*UnimplementedConversationMgrServer) TagConversation(context.Context, *TagRequest) (*common.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TagConversation not implemented")
}
func (*UnimplementedConversationMgrServer) UntagConversation(context.Context, *TagRequest) (*common.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UntagConversation not implemented")
}
func (*UnimplementedConversationMgrServer) JoinConversation(context.Context, *ConversationMember) (*common.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method JoinConversation not implemented")
}
func (*UnimplementedConversationMgrServer) LeftConversation(context.Context, *ConversationMember) (*common.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LeftConversation not implemented")
}
func (*UnimplementedConversationMgrServer) Typing(context.Context, *common.Id) (*common.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Typing not implemented")
}
func (*UnimplementedConversationMgrServer) Ping(context.Context, *common.PingRequest) (*common.Pong, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ping not implemented")
}
func (*UnimplementedConversationMgrServer) UpdateConversationInfo(context.Context, *Conversation) (*Conversation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateConversationInfo not implemented")
}
func (*UnimplementedConversationMgrServer) SearchConversation(context.Context, *conversation.SearchConversationRequest) (*conversation.SearchConversationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchConversation not implemented")
}
func (*UnimplementedConversationMgrServer) ListConversations2(context.Context, *conversation.ConversationListRequest) (*conversation.ConversationListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListConversations2 not implemented")
}
func (*UnimplementedConversationMgrServer) UpdateMuteConversation(context.Context, *Conversation) (*common.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateMuteConversation not implemented")
}
func (*UnimplementedConversationMgrServer) UnwatchConversation(context.Context, *Conversation) (*common.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnwatchConversation not implemented")
}
func (*UnimplementedConversationMgrServer) MarkReadConversation(context.Context, *Conversation) (*common.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MarkReadConversation not implemented")
}
func (*UnimplementedConversationMgrServer) UpdateEndchatSetting(context.Context, *EndchatSetting) (*EndchatSetting, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateEndchatSetting not implemented")
}
func (*UnimplementedConversationMgrServer) GetEndchatSetting(context.Context, *common.Id) (*EndchatSetting, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEndchatSetting not implemented")
}
func (*UnimplementedConversationMgrServer) TerminateBot(context.Context, *BotTerminated) (*Event, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TerminateBot not implemented")
}

func RegisterConversationMgrServer(s *grpc.Server, srv ConversationMgrServer) {
	s.RegisterService(&_ConversationMgr_serviceDesc, srv)
}

func _ConversationMgr_AssignRule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AssignRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConversationMgrServer).AssignRule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.ConversationMgr/AssignRule",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConversationMgrServer).AssignRule(ctx, req.(*AssignRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConversationMgr_PongMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Event)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConversationMgrServer).PongMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.ConversationMgr/PongMessage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConversationMgrServer).PongMessage(ctx, req.(*Event))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConversationMgr_StartConversation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StartRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConversationMgrServer).StartConversation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.ConversationMgr/StartConversation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConversationMgrServer).StartConversation(ctx, req.(*StartRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConversationMgr_EndConversation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConversationMgrServer).EndConversation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.ConversationMgr/EndConversation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConversationMgrServer).EndConversation(ctx, req.(*common.Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConversationMgr_GetConversation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConversationMgrServer).GetConversation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.ConversationMgr/GetConversation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConversationMgrServer).GetConversation(ctx, req.(*common.Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConversationMgr_ListConversations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListConversationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConversationMgrServer).ListConversations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.ConversationMgr/ListConversations",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConversationMgrServer).ListConversations(ctx, req.(*ListConversationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConversationMgr_MatchConversations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.Ids)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConversationMgrServer).MatchConversations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.ConversationMgr/MatchConversations",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConversationMgrServer).MatchConversations(ctx, req.(*common.Ids))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConversationMgr_TagConversation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TagRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConversationMgrServer).TagConversation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.ConversationMgr/TagConversation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConversationMgrServer).TagConversation(ctx, req.(*TagRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConversationMgr_UntagConversation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TagRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConversationMgrServer).UntagConversation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.ConversationMgr/UntagConversation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConversationMgrServer).UntagConversation(ctx, req.(*TagRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConversationMgr_JoinConversation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConversationMember)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConversationMgrServer).JoinConversation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.ConversationMgr/JoinConversation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConversationMgrServer).JoinConversation(ctx, req.(*ConversationMember))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConversationMgr_LeftConversation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConversationMember)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConversationMgrServer).LeftConversation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.ConversationMgr/LeftConversation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConversationMgrServer).LeftConversation(ctx, req.(*ConversationMember))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConversationMgr_Typing_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConversationMgrServer).Typing(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.ConversationMgr/Typing",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConversationMgrServer).Typing(ctx, req.(*common.Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConversationMgr_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.PingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConversationMgrServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.ConversationMgr/Ping",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConversationMgrServer).Ping(ctx, req.(*common.PingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConversationMgr_UpdateConversationInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Conversation)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConversationMgrServer).UpdateConversationInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.ConversationMgr/UpdateConversationInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConversationMgrServer).UpdateConversationInfo(ctx, req.(*Conversation))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConversationMgr_SearchConversation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(conversation.SearchConversationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConversationMgrServer).SearchConversation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.ConversationMgr/SearchConversation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConversationMgrServer).SearchConversation(ctx, req.(*conversation.SearchConversationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConversationMgr_ListConversations2_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(conversation.ConversationListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConversationMgrServer).ListConversations2(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.ConversationMgr/ListConversations2",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConversationMgrServer).ListConversations2(ctx, req.(*conversation.ConversationListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConversationMgr_UpdateMuteConversation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Conversation)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConversationMgrServer).UpdateMuteConversation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.ConversationMgr/UpdateMuteConversation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConversationMgrServer).UpdateMuteConversation(ctx, req.(*Conversation))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConversationMgr_UnwatchConversation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Conversation)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConversationMgrServer).UnwatchConversation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.ConversationMgr/UnwatchConversation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConversationMgrServer).UnwatchConversation(ctx, req.(*Conversation))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConversationMgr_MarkReadConversation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Conversation)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConversationMgrServer).MarkReadConversation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.ConversationMgr/MarkReadConversation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConversationMgrServer).MarkReadConversation(ctx, req.(*Conversation))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConversationMgr_UpdateEndchatSetting_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EndchatSetting)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConversationMgrServer).UpdateEndchatSetting(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.ConversationMgr/UpdateEndchatSetting",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConversationMgrServer).UpdateEndchatSetting(ctx, req.(*EndchatSetting))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConversationMgr_GetEndchatSetting_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConversationMgrServer).GetEndchatSetting(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.ConversationMgr/GetEndchatSetting",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConversationMgrServer).GetEndchatSetting(ctx, req.(*common.Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConversationMgr_TerminateBot_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BotTerminated)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConversationMgrServer).TerminateBot(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.ConversationMgr/TerminateBot",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConversationMgrServer).TerminateBot(ctx, req.(*BotTerminated))
	}
	return interceptor(ctx, in, info, handler)
}

var _ConversationMgr_serviceDesc = grpc.ServiceDesc{
	ServiceName: "header.ConversationMgr",
	HandlerType: (*ConversationMgrServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AssignRule",
			Handler:    _ConversationMgr_AssignRule_Handler,
		},
		{
			MethodName: "PongMessage",
			Handler:    _ConversationMgr_PongMessage_Handler,
		},
		{
			MethodName: "StartConversation",
			Handler:    _ConversationMgr_StartConversation_Handler,
		},
		{
			MethodName: "EndConversation",
			Handler:    _ConversationMgr_EndConversation_Handler,
		},
		{
			MethodName: "GetConversation",
			Handler:    _ConversationMgr_GetConversation_Handler,
		},
		{
			MethodName: "ListConversations",
			Handler:    _ConversationMgr_ListConversations_Handler,
		},
		{
			MethodName: "MatchConversations",
			Handler:    _ConversationMgr_MatchConversations_Handler,
		},
		{
			MethodName: "TagConversation",
			Handler:    _ConversationMgr_TagConversation_Handler,
		},
		{
			MethodName: "UntagConversation",
			Handler:    _ConversationMgr_UntagConversation_Handler,
		},
		{
			MethodName: "JoinConversation",
			Handler:    _ConversationMgr_JoinConversation_Handler,
		},
		{
			MethodName: "LeftConversation",
			Handler:    _ConversationMgr_LeftConversation_Handler,
		},
		{
			MethodName: "Typing",
			Handler:    _ConversationMgr_Typing_Handler,
		},
		{
			MethodName: "Ping",
			Handler:    _ConversationMgr_Ping_Handler,
		},
		{
			MethodName: "UpdateConversationInfo",
			Handler:    _ConversationMgr_UpdateConversationInfo_Handler,
		},
		{
			MethodName: "SearchConversation",
			Handler:    _ConversationMgr_SearchConversation_Handler,
		},
		{
			MethodName: "ListConversations2",
			Handler:    _ConversationMgr_ListConversations2_Handler,
		},
		{
			MethodName: "UpdateMuteConversation",
			Handler:    _ConversationMgr_UpdateMuteConversation_Handler,
		},
		{
			MethodName: "UnwatchConversation",
			Handler:    _ConversationMgr_UnwatchConversation_Handler,
		},
		{
			MethodName: "MarkReadConversation",
			Handler:    _ConversationMgr_MarkReadConversation_Handler,
		},
		{
			MethodName: "UpdateEndchatSetting",
			Handler:    _ConversationMgr_UpdateEndchatSetting_Handler,
		},
		{
			MethodName: "GetEndchatSetting",
			Handler:    _ConversationMgr_GetEndchatSetting_Handler,
		},
		{
			MethodName: "TerminateBot",
			Handler:    _ConversationMgr_TerminateBot_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "service.proto",
}

// ConversationSyncMgrClient is the client API for ConversationSyncMgr service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ConversationSyncMgrClient interface {
	// sync automation
	FireConvertTicket(ctx context.Context, in *AutomationEvent, opts ...grpc.CallOption) (*common.Empty, error)
	FireSendChatTranscriptEmail(ctx context.Context, in *AutomationEvent, opts ...grpc.CallOption) (*common.Empty, error)
	FireUpdateConversationState(ctx context.Context, in *AutomationEvent, opts ...grpc.CallOption) (*common.Empty, error)
}

type conversationSyncMgrClient struct {
	cc grpc.ClientConnInterface
}

func NewConversationSyncMgrClient(cc grpc.ClientConnInterface) ConversationSyncMgrClient {
	return &conversationSyncMgrClient{cc}
}

func (c *conversationSyncMgrClient) FireConvertTicket(ctx context.Context, in *AutomationEvent, opts ...grpc.CallOption) (*common.Empty, error) {
	out := new(common.Empty)
	err := c.cc.Invoke(ctx, "/header.ConversationSyncMgr/FireConvertTicket", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *conversationSyncMgrClient) FireSendChatTranscriptEmail(ctx context.Context, in *AutomationEvent, opts ...grpc.CallOption) (*common.Empty, error) {
	out := new(common.Empty)
	err := c.cc.Invoke(ctx, "/header.ConversationSyncMgr/FireSendChatTranscriptEmail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *conversationSyncMgrClient) FireUpdateConversationState(ctx context.Context, in *AutomationEvent, opts ...grpc.CallOption) (*common.Empty, error) {
	out := new(common.Empty)
	err := c.cc.Invoke(ctx, "/header.ConversationSyncMgr/FireUpdateConversationState", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ConversationSyncMgrServer is the server API for ConversationSyncMgr service.
type ConversationSyncMgrServer interface {
	// sync automation
	FireConvertTicket(context.Context, *AutomationEvent) (*common.Empty, error)
	FireSendChatTranscriptEmail(context.Context, *AutomationEvent) (*common.Empty, error)
	FireUpdateConversationState(context.Context, *AutomationEvent) (*common.Empty, error)
}

// UnimplementedConversationSyncMgrServer can be embedded to have forward compatible implementations.
type UnimplementedConversationSyncMgrServer struct {
}

func (*UnimplementedConversationSyncMgrServer) FireConvertTicket(context.Context, *AutomationEvent) (*common.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FireConvertTicket not implemented")
}
func (*UnimplementedConversationSyncMgrServer) FireSendChatTranscriptEmail(context.Context, *AutomationEvent) (*common.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FireSendChatTranscriptEmail not implemented")
}
func (*UnimplementedConversationSyncMgrServer) FireUpdateConversationState(context.Context, *AutomationEvent) (*common.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FireUpdateConversationState not implemented")
}

func RegisterConversationSyncMgrServer(s *grpc.Server, srv ConversationSyncMgrServer) {
	s.RegisterService(&_ConversationSyncMgr_serviceDesc, srv)
}

func _ConversationSyncMgr_FireConvertTicket_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AutomationEvent)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConversationSyncMgrServer).FireConvertTicket(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.ConversationSyncMgr/FireConvertTicket",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConversationSyncMgrServer).FireConvertTicket(ctx, req.(*AutomationEvent))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConversationSyncMgr_FireSendChatTranscriptEmail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AutomationEvent)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConversationSyncMgrServer).FireSendChatTranscriptEmail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.ConversationSyncMgr/FireSendChatTranscriptEmail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConversationSyncMgrServer).FireSendChatTranscriptEmail(ctx, req.(*AutomationEvent))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConversationSyncMgr_FireUpdateConversationState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AutomationEvent)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConversationSyncMgrServer).FireUpdateConversationState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.ConversationSyncMgr/FireUpdateConversationState",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConversationSyncMgrServer).FireUpdateConversationState(ctx, req.(*AutomationEvent))
	}
	return interceptor(ctx, in, info, handler)
}

var _ConversationSyncMgr_serviceDesc = grpc.ServiceDesc{
	ServiceName: "header.ConversationSyncMgr",
	HandlerType: (*ConversationSyncMgrServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "FireConvertTicket",
			Handler:    _ConversationSyncMgr_FireConvertTicket_Handler,
		},
		{
			MethodName: "FireSendChatTranscriptEmail",
			Handler:    _ConversationSyncMgr_FireSendChatTranscriptEmail_Handler,
		},
		{
			MethodName: "FireUpdateConversationState",
			Handler:    _ConversationSyncMgr_FireUpdateConversationState_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "service.proto",
}

// TemplateMgrClient is the client API for TemplateMgr service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type TemplateMgrClient interface {
	CreateTemplate(ctx context.Context, in *Template, opts ...grpc.CallOption) (*Template, error)
	UpdateTemplate(ctx context.Context, in *Template, opts ...grpc.CallOption) (*Template, error)
	DeleteTemplate(ctx context.Context, in *common.Id, opts ...grpc.CallOption) (*common.Empty, error)
	GetTemplate(ctx context.Context, in *common.Id, opts ...grpc.CallOption) (*Template, error)
	ListTemplates(ctx context.Context, in *SearchTemplate, opts ...grpc.CallOption) (*Templates, error)
	PickTemplate(ctx context.Context, in *common.Id, opts ...grpc.CallOption) (*common.Empty, error)
}

type templateMgrClient struct {
	cc grpc.ClientConnInterface
}

func NewTemplateMgrClient(cc grpc.ClientConnInterface) TemplateMgrClient {
	return &templateMgrClient{cc}
}

func (c *templateMgrClient) CreateTemplate(ctx context.Context, in *Template, opts ...grpc.CallOption) (*Template, error) {
	out := new(Template)
	err := c.cc.Invoke(ctx, "/header.TemplateMgr/CreateTemplate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *templateMgrClient) UpdateTemplate(ctx context.Context, in *Template, opts ...grpc.CallOption) (*Template, error) {
	out := new(Template)
	err := c.cc.Invoke(ctx, "/header.TemplateMgr/UpdateTemplate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *templateMgrClient) DeleteTemplate(ctx context.Context, in *common.Id, opts ...grpc.CallOption) (*common.Empty, error) {
	out := new(common.Empty)
	err := c.cc.Invoke(ctx, "/header.TemplateMgr/DeleteTemplate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *templateMgrClient) GetTemplate(ctx context.Context, in *common.Id, opts ...grpc.CallOption) (*Template, error) {
	out := new(Template)
	err := c.cc.Invoke(ctx, "/header.TemplateMgr/GetTemplate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *templateMgrClient) ListTemplates(ctx context.Context, in *SearchTemplate, opts ...grpc.CallOption) (*Templates, error) {
	out := new(Templates)
	err := c.cc.Invoke(ctx, "/header.TemplateMgr/ListTemplates", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *templateMgrClient) PickTemplate(ctx context.Context, in *common.Id, opts ...grpc.CallOption) (*common.Empty, error) {
	out := new(common.Empty)
	err := c.cc.Invoke(ctx, "/header.TemplateMgr/PickTemplate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TemplateMgrServer is the server API for TemplateMgr service.
type TemplateMgrServer interface {
	CreateTemplate(context.Context, *Template) (*Template, error)
	UpdateTemplate(context.Context, *Template) (*Template, error)
	DeleteTemplate(context.Context, *common.Id) (*common.Empty, error)
	GetTemplate(context.Context, *common.Id) (*Template, error)
	ListTemplates(context.Context, *SearchTemplate) (*Templates, error)
	PickTemplate(context.Context, *common.Id) (*common.Empty, error)
}

// UnimplementedTemplateMgrServer can be embedded to have forward compatible implementations.
type UnimplementedTemplateMgrServer struct {
}

func (*UnimplementedTemplateMgrServer) CreateTemplate(context.Context, *Template) (*Template, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTemplate not implemented")
}
func (*UnimplementedTemplateMgrServer) UpdateTemplate(context.Context, *Template) (*Template, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateTemplate not implemented")
}
func (*UnimplementedTemplateMgrServer) DeleteTemplate(context.Context, *common.Id) (*common.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteTemplate not implemented")
}
func (*UnimplementedTemplateMgrServer) GetTemplate(context.Context, *common.Id) (*Template, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTemplate not implemented")
}
func (*UnimplementedTemplateMgrServer) ListTemplates(context.Context, *SearchTemplate) (*Templates, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListTemplates not implemented")
}
func (*UnimplementedTemplateMgrServer) PickTemplate(context.Context, *common.Id) (*common.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PickTemplate not implemented")
}

func RegisterTemplateMgrServer(s *grpc.Server, srv TemplateMgrServer) {
	s.RegisterService(&_TemplateMgr_serviceDesc, srv)
}

func _TemplateMgr_CreateTemplate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Template)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TemplateMgrServer).CreateTemplate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.TemplateMgr/CreateTemplate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TemplateMgrServer).CreateTemplate(ctx, req.(*Template))
	}
	return interceptor(ctx, in, info, handler)
}

func _TemplateMgr_UpdateTemplate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Template)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TemplateMgrServer).UpdateTemplate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.TemplateMgr/UpdateTemplate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TemplateMgrServer).UpdateTemplate(ctx, req.(*Template))
	}
	return interceptor(ctx, in, info, handler)
}

func _TemplateMgr_DeleteTemplate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TemplateMgrServer).DeleteTemplate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.TemplateMgr/DeleteTemplate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TemplateMgrServer).DeleteTemplate(ctx, req.(*common.Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _TemplateMgr_GetTemplate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TemplateMgrServer).GetTemplate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.TemplateMgr/GetTemplate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TemplateMgrServer).GetTemplate(ctx, req.(*common.Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _TemplateMgr_ListTemplates_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchTemplate)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TemplateMgrServer).ListTemplates(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.TemplateMgr/ListTemplates",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TemplateMgrServer).ListTemplates(ctx, req.(*SearchTemplate))
	}
	return interceptor(ctx, in, info, handler)
}

func _TemplateMgr_PickTemplate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TemplateMgrServer).PickTemplate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.TemplateMgr/PickTemplate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TemplateMgrServer).PickTemplate(ctx, req.(*common.Id))
	}
	return interceptor(ctx, in, info, handler)
}

var _TemplateMgr_serviceDesc = grpc.ServiceDesc{
	ServiceName: "header.TemplateMgr",
	HandlerType: (*TemplateMgrServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateTemplate",
			Handler:    _TemplateMgr_CreateTemplate_Handler,
		},
		{
			MethodName: "UpdateTemplate",
			Handler:    _TemplateMgr_UpdateTemplate_Handler,
		},
		{
			MethodName: "DeleteTemplate",
			Handler:    _TemplateMgr_DeleteTemplate_Handler,
		},
		{
			MethodName: "GetTemplate",
			Handler:    _TemplateMgr_GetTemplate_Handler,
		},
		{
			MethodName: "ListTemplates",
			Handler:    _TemplateMgr_ListTemplates_Handler,
		},
		{
			MethodName: "PickTemplate",
			Handler:    _TemplateMgr_PickTemplate_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "service.proto",
}

// TagMgrClient is the client API for TagMgr service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type TagMgrClient interface {
	CreateTag(ctx context.Context, in *Tag, opts ...grpc.CallOption) (*Tag, error)
	UpdateTag(ctx context.Context, in *Tag, opts ...grpc.CallOption) (*Tag, error)
	DeleteTag(ctx context.Context, in *common.Id, opts ...grpc.CallOption) (*common.Empty, error)
	ListTags(ctx context.Context, in *common.Id, opts ...grpc.CallOption) (*Tags, error)
	GetTag(ctx context.Context, in *common.Id, opts ...grpc.CallOption) (*Tag, error)
}

type tagMgrClient struct {
	cc grpc.ClientConnInterface
}

func NewTagMgrClient(cc grpc.ClientConnInterface) TagMgrClient {
	return &tagMgrClient{cc}
}

func (c *tagMgrClient) CreateTag(ctx context.Context, in *Tag, opts ...grpc.CallOption) (*Tag, error) {
	out := new(Tag)
	err := c.cc.Invoke(ctx, "/header.TagMgr/CreateTag", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tagMgrClient) UpdateTag(ctx context.Context, in *Tag, opts ...grpc.CallOption) (*Tag, error) {
	out := new(Tag)
	err := c.cc.Invoke(ctx, "/header.TagMgr/UpdateTag", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tagMgrClient) DeleteTag(ctx context.Context, in *common.Id, opts ...grpc.CallOption) (*common.Empty, error) {
	out := new(common.Empty)
	err := c.cc.Invoke(ctx, "/header.TagMgr/DeleteTag", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tagMgrClient) ListTags(ctx context.Context, in *common.Id, opts ...grpc.CallOption) (*Tags, error) {
	out := new(Tags)
	err := c.cc.Invoke(ctx, "/header.TagMgr/ListTags", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tagMgrClient) GetTag(ctx context.Context, in *common.Id, opts ...grpc.CallOption) (*Tag, error) {
	out := new(Tag)
	err := c.cc.Invoke(ctx, "/header.TagMgr/GetTag", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TagMgrServer is the server API for TagMgr service.
type TagMgrServer interface {
	CreateTag(context.Context, *Tag) (*Tag, error)
	UpdateTag(context.Context, *Tag) (*Tag, error)
	DeleteTag(context.Context, *common.Id) (*common.Empty, error)
	ListTags(context.Context, *common.Id) (*Tags, error)
	GetTag(context.Context, *common.Id) (*Tag, error)
}

// UnimplementedTagMgrServer can be embedded to have forward compatible implementations.
type UnimplementedTagMgrServer struct {
}

func (*UnimplementedTagMgrServer) CreateTag(context.Context, *Tag) (*Tag, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTag not implemented")
}
func (*UnimplementedTagMgrServer) UpdateTag(context.Context, *Tag) (*Tag, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateTag not implemented")
}
func (*UnimplementedTagMgrServer) DeleteTag(context.Context, *common.Id) (*common.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteTag not implemented")
}
func (*UnimplementedTagMgrServer) ListTags(context.Context, *common.Id) (*Tags, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListTags not implemented")
}
func (*UnimplementedTagMgrServer) GetTag(context.Context, *common.Id) (*Tag, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTag not implemented")
}

func RegisterTagMgrServer(s *grpc.Server, srv TagMgrServer) {
	s.RegisterService(&_TagMgr_serviceDesc, srv)
}

func _TagMgr_CreateTag_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Tag)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TagMgrServer).CreateTag(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.TagMgr/CreateTag",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TagMgrServer).CreateTag(ctx, req.(*Tag))
	}
	return interceptor(ctx, in, info, handler)
}

func _TagMgr_UpdateTag_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Tag)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TagMgrServer).UpdateTag(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.TagMgr/UpdateTag",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TagMgrServer).UpdateTag(ctx, req.(*Tag))
	}
	return interceptor(ctx, in, info, handler)
}

func _TagMgr_DeleteTag_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TagMgrServer).DeleteTag(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.TagMgr/DeleteTag",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TagMgrServer).DeleteTag(ctx, req.(*common.Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _TagMgr_ListTags_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TagMgrServer).ListTags(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.TagMgr/ListTags",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TagMgrServer).ListTags(ctx, req.(*common.Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _TagMgr_GetTag_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TagMgrServer).GetTag(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.TagMgr/GetTag",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TagMgrServer).GetTag(ctx, req.(*common.Id))
	}
	return interceptor(ctx, in, info, handler)
}

var _TagMgr_serviceDesc = grpc.ServiceDesc{
	ServiceName: "header.TagMgr",
	HandlerType: (*TagMgrServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateTag",
			Handler:    _TagMgr_CreateTag_Handler,
		},
		{
			MethodName: "UpdateTag",
			Handler:    _TagMgr_UpdateTag_Handler,
		},
		{
			MethodName: "DeleteTag",
			Handler:    _TagMgr_DeleteTag_Handler,
		},
		{
			MethodName: "ListTags",
			Handler:    _TagMgr_ListTags_Handler,
		},
		{
			MethodName: "GetTag",
			Handler:    _TagMgr_GetTag_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "service.proto",
}

// IntegrationMgrClient is the client API for IntegrationMgr service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type IntegrationMgrClient interface {
	Deintegrate(ctx context.Context, in *common.Id, opts ...grpc.CallOption) (*common.Empty, error)
	ListIntegrations(ctx context.Context, in *common.Id, opts ...grpc.CallOption) (*Integrations, error)
	Integrate(ctx context.Context, in *Integration, opts ...grpc.CallOption) (*Integration, error)
	CheckAvailability(ctx context.Context, in *AvailabilityCheckRequest, opts ...grpc.CallOption) (*AvailabilityCheckResult, error)
}

type integrationMgrClient struct {
	cc grpc.ClientConnInterface
}

func NewIntegrationMgrClient(cc grpc.ClientConnInterface) IntegrationMgrClient {
	return &integrationMgrClient{cc}
}

func (c *integrationMgrClient) Deintegrate(ctx context.Context, in *common.Id, opts ...grpc.CallOption) (*common.Empty, error) {
	out := new(common.Empty)
	err := c.cc.Invoke(ctx, "/header.IntegrationMgr/Deintegrate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *integrationMgrClient) ListIntegrations(ctx context.Context, in *common.Id, opts ...grpc.CallOption) (*Integrations, error) {
	out := new(Integrations)
	err := c.cc.Invoke(ctx, "/header.IntegrationMgr/ListIntegrations", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *integrationMgrClient) Integrate(ctx context.Context, in *Integration, opts ...grpc.CallOption) (*Integration, error) {
	out := new(Integration)
	err := c.cc.Invoke(ctx, "/header.IntegrationMgr/Integrate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *integrationMgrClient) CheckAvailability(ctx context.Context, in *AvailabilityCheckRequest, opts ...grpc.CallOption) (*AvailabilityCheckResult, error) {
	out := new(AvailabilityCheckResult)
	err := c.cc.Invoke(ctx, "/header.IntegrationMgr/CheckAvailability", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// IntegrationMgrServer is the server API for IntegrationMgr service.
type IntegrationMgrServer interface {
	Deintegrate(context.Context, *common.Id) (*common.Empty, error)
	ListIntegrations(context.Context, *common.Id) (*Integrations, error)
	Integrate(context.Context, *Integration) (*Integration, error)
	CheckAvailability(context.Context, *AvailabilityCheckRequest) (*AvailabilityCheckResult, error)
}

// UnimplementedIntegrationMgrServer can be embedded to have forward compatible implementations.
type UnimplementedIntegrationMgrServer struct {
}

func (*UnimplementedIntegrationMgrServer) Deintegrate(context.Context, *common.Id) (*common.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Deintegrate not implemented")
}
func (*UnimplementedIntegrationMgrServer) ListIntegrations(context.Context, *common.Id) (*Integrations, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListIntegrations not implemented")
}
func (*UnimplementedIntegrationMgrServer) Integrate(context.Context, *Integration) (*Integration, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Integrate not implemented")
}
func (*UnimplementedIntegrationMgrServer) CheckAvailability(context.Context, *AvailabilityCheckRequest) (*AvailabilityCheckResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckAvailability not implemented")
}

func RegisterIntegrationMgrServer(s *grpc.Server, srv IntegrationMgrServer) {
	s.RegisterService(&_IntegrationMgr_serviceDesc, srv)
}

func _IntegrationMgr_Deintegrate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IntegrationMgrServer).Deintegrate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.IntegrationMgr/Deintegrate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IntegrationMgrServer).Deintegrate(ctx, req.(*common.Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _IntegrationMgr_ListIntegrations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IntegrationMgrServer).ListIntegrations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.IntegrationMgr/ListIntegrations",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IntegrationMgrServer).ListIntegrations(ctx, req.(*common.Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _IntegrationMgr_Integrate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Integration)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IntegrationMgrServer).Integrate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.IntegrationMgr/Integrate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IntegrationMgrServer).Integrate(ctx, req.(*Integration))
	}
	return interceptor(ctx, in, info, handler)
}

func _IntegrationMgr_CheckAvailability_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AvailabilityCheckRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IntegrationMgrServer).CheckAvailability(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.IntegrationMgr/CheckAvailability",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IntegrationMgrServer).CheckAvailability(ctx, req.(*AvailabilityCheckRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _IntegrationMgr_serviceDesc = grpc.ServiceDesc{
	ServiceName: "header.IntegrationMgr",
	HandlerType: (*IntegrationMgrServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Deintegrate",
			Handler:    _IntegrationMgr_Deintegrate_Handler,
		},
		{
			MethodName: "ListIntegrations",
			Handler:    _IntegrationMgr_ListIntegrations_Handler,
		},
		{
			MethodName: "Integrate",
			Handler:    _IntegrationMgr_Integrate_Handler,
		},
		{
			MethodName: "CheckAvailability",
			Handler:    _IntegrationMgr_CheckAvailability_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "service.proto",
}

// TicketMgrClient is the client API for TicketMgr service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type TicketMgrClient interface {
	CreateTicket(ctx context.Context, in *conversation.Ticket, opts ...grpc.CallOption) (*conversation.Ticket, error)
	UpdateTicket(ctx context.Context, in *conversation.Ticket, opts ...grpc.CallOption) (*conversation.Ticket, error)
	DeleteTicket(ctx context.Context, in *conversation.DeleteTicketRequest, opts ...grpc.CallOption) (*common.Empty, error)
	GetTicket(ctx context.Context, in *conversation.GetTicketRequest, opts ...grpc.CallOption) (*conversation.Ticket, error)
	SearchTicket(ctx context.Context, in *conversation.TicketListRequest, opts ...grpc.CallOption) (*conversation.ESTickets, error)
	ListSLAs(ctx context.Context, in *common.Empty, opts ...grpc.CallOption) (*conversation.ServiceLevelAgreements, error)
	GetSLA(ctx context.Context, in *common.Id, opts ...grpc.CallOption) (*conversation.ServiceLevelAgreement, error)
	CreateSLA(ctx context.Context, in *conversation.ServiceLevelAgreement, opts ...grpc.CallOption) (*conversation.ServiceLevelAgreement, error)
	UpdateSLA(ctx context.Context, in *conversation.ServiceLevelAgreement, opts ...grpc.CallOption) (*conversation.ServiceLevelAgreement, error)
	DeleteSLA(ctx context.Context, in *common.Id, opts ...grpc.CallOption) (*common.Empty, error)
	CountTicket(ctx context.Context, in *conversation.CountTicketRequest, opts ...grpc.CallOption) (*conversation.CountTicketResponse, error)
	GetAvgResolveTimes(ctx context.Context, in *conversation.AvgResolveTimeRequest, opts ...grpc.CallOption) (*conversation.AvgResolveTimeResponse, error)
}

type ticketMgrClient struct {
	cc grpc.ClientConnInterface
}

func NewTicketMgrClient(cc grpc.ClientConnInterface) TicketMgrClient {
	return &ticketMgrClient{cc}
}

func (c *ticketMgrClient) CreateTicket(ctx context.Context, in *conversation.Ticket, opts ...grpc.CallOption) (*conversation.Ticket, error) {
	out := new(conversation.Ticket)
	err := c.cc.Invoke(ctx, "/header.TicketMgr/CreateTicket", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ticketMgrClient) UpdateTicket(ctx context.Context, in *conversation.Ticket, opts ...grpc.CallOption) (*conversation.Ticket, error) {
	out := new(conversation.Ticket)
	err := c.cc.Invoke(ctx, "/header.TicketMgr/UpdateTicket", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ticketMgrClient) DeleteTicket(ctx context.Context, in *conversation.DeleteTicketRequest, opts ...grpc.CallOption) (*common.Empty, error) {
	out := new(common.Empty)
	err := c.cc.Invoke(ctx, "/header.TicketMgr/DeleteTicket", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ticketMgrClient) GetTicket(ctx context.Context, in *conversation.GetTicketRequest, opts ...grpc.CallOption) (*conversation.Ticket, error) {
	out := new(conversation.Ticket)
	err := c.cc.Invoke(ctx, "/header.TicketMgr/GetTicket", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ticketMgrClient) SearchTicket(ctx context.Context, in *conversation.TicketListRequest, opts ...grpc.CallOption) (*conversation.ESTickets, error) {
	out := new(conversation.ESTickets)
	err := c.cc.Invoke(ctx, "/header.TicketMgr/SearchTicket", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ticketMgrClient) ListSLAs(ctx context.Context, in *common.Empty, opts ...grpc.CallOption) (*conversation.ServiceLevelAgreements, error) {
	out := new(conversation.ServiceLevelAgreements)
	err := c.cc.Invoke(ctx, "/header.TicketMgr/ListSLAs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ticketMgrClient) GetSLA(ctx context.Context, in *common.Id, opts ...grpc.CallOption) (*conversation.ServiceLevelAgreement, error) {
	out := new(conversation.ServiceLevelAgreement)
	err := c.cc.Invoke(ctx, "/header.TicketMgr/GetSLA", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ticketMgrClient) CreateSLA(ctx context.Context, in *conversation.ServiceLevelAgreement, opts ...grpc.CallOption) (*conversation.ServiceLevelAgreement, error) {
	out := new(conversation.ServiceLevelAgreement)
	err := c.cc.Invoke(ctx, "/header.TicketMgr/CreateSLA", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ticketMgrClient) UpdateSLA(ctx context.Context, in *conversation.ServiceLevelAgreement, opts ...grpc.CallOption) (*conversation.ServiceLevelAgreement, error) {
	out := new(conversation.ServiceLevelAgreement)
	err := c.cc.Invoke(ctx, "/header.TicketMgr/UpdateSLA", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ticketMgrClient) DeleteSLA(ctx context.Context, in *common.Id, opts ...grpc.CallOption) (*common.Empty, error) {
	out := new(common.Empty)
	err := c.cc.Invoke(ctx, "/header.TicketMgr/DeleteSLA", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ticketMgrClient) CountTicket(ctx context.Context, in *conversation.CountTicketRequest, opts ...grpc.CallOption) (*conversation.CountTicketResponse, error) {
	out := new(conversation.CountTicketResponse)
	err := c.cc.Invoke(ctx, "/header.TicketMgr/CountTicket", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ticketMgrClient) GetAvgResolveTimes(ctx context.Context, in *conversation.AvgResolveTimeRequest, opts ...grpc.CallOption) (*conversation.AvgResolveTimeResponse, error) {
	out := new(conversation.AvgResolveTimeResponse)
	err := c.cc.Invoke(ctx, "/header.TicketMgr/GetAvgResolveTimes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TicketMgrServer is the server API for TicketMgr service.
type TicketMgrServer interface {
	CreateTicket(context.Context, *conversation.Ticket) (*conversation.Ticket, error)
	UpdateTicket(context.Context, *conversation.Ticket) (*conversation.Ticket, error)
	DeleteTicket(context.Context, *conversation.DeleteTicketRequest) (*common.Empty, error)
	GetTicket(context.Context, *conversation.GetTicketRequest) (*conversation.Ticket, error)
	SearchTicket(context.Context, *conversation.TicketListRequest) (*conversation.ESTickets, error)
	ListSLAs(context.Context, *common.Empty) (*conversation.ServiceLevelAgreements, error)
	GetSLA(context.Context, *common.Id) (*conversation.ServiceLevelAgreement, error)
	CreateSLA(context.Context, *conversation.ServiceLevelAgreement) (*conversation.ServiceLevelAgreement, error)
	UpdateSLA(context.Context, *conversation.ServiceLevelAgreement) (*conversation.ServiceLevelAgreement, error)
	DeleteSLA(context.Context, *common.Id) (*common.Empty, error)
	CountTicket(context.Context, *conversation.CountTicketRequest) (*conversation.CountTicketResponse, error)
	GetAvgResolveTimes(context.Context, *conversation.AvgResolveTimeRequest) (*conversation.AvgResolveTimeResponse, error)
}

// UnimplementedTicketMgrServer can be embedded to have forward compatible implementations.
type UnimplementedTicketMgrServer struct {
}

func (*UnimplementedTicketMgrServer) CreateTicket(context.Context, *conversation.Ticket) (*conversation.Ticket, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTicket not implemented")
}
func (*UnimplementedTicketMgrServer) UpdateTicket(context.Context, *conversation.Ticket) (*conversation.Ticket, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateTicket not implemented")
}
func (*UnimplementedTicketMgrServer) DeleteTicket(context.Context, *conversation.DeleteTicketRequest) (*common.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteTicket not implemented")
}
func (*UnimplementedTicketMgrServer) GetTicket(context.Context, *conversation.GetTicketRequest) (*conversation.Ticket, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTicket not implemented")
}
func (*UnimplementedTicketMgrServer) SearchTicket(context.Context, *conversation.TicketListRequest) (*conversation.ESTickets, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchTicket not implemented")
}
func (*UnimplementedTicketMgrServer) ListSLAs(context.Context, *common.Empty) (*conversation.ServiceLevelAgreements, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListSLAs not implemented")
}
func (*UnimplementedTicketMgrServer) GetSLA(context.Context, *common.Id) (*conversation.ServiceLevelAgreement, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSLA not implemented")
}
func (*UnimplementedTicketMgrServer) CreateSLA(context.Context, *conversation.ServiceLevelAgreement) (*conversation.ServiceLevelAgreement, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSLA not implemented")
}
func (*UnimplementedTicketMgrServer) UpdateSLA(context.Context, *conversation.ServiceLevelAgreement) (*conversation.ServiceLevelAgreement, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSLA not implemented")
}
func (*UnimplementedTicketMgrServer) DeleteSLA(context.Context, *common.Id) (*common.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteSLA not implemented")
}
func (*UnimplementedTicketMgrServer) CountTicket(context.Context, *conversation.CountTicketRequest) (*conversation.CountTicketResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CountTicket not implemented")
}
func (*UnimplementedTicketMgrServer) GetAvgResolveTimes(context.Context, *conversation.AvgResolveTimeRequest) (*conversation.AvgResolveTimeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAvgResolveTimes not implemented")
}

func RegisterTicketMgrServer(s *grpc.Server, srv TicketMgrServer) {
	s.RegisterService(&_TicketMgr_serviceDesc, srv)
}

func _TicketMgr_CreateTicket_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(conversation.Ticket)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TicketMgrServer).CreateTicket(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.TicketMgr/CreateTicket",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TicketMgrServer).CreateTicket(ctx, req.(*conversation.Ticket))
	}
	return interceptor(ctx, in, info, handler)
}

func _TicketMgr_UpdateTicket_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(conversation.Ticket)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TicketMgrServer).UpdateTicket(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.TicketMgr/UpdateTicket",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TicketMgrServer).UpdateTicket(ctx, req.(*conversation.Ticket))
	}
	return interceptor(ctx, in, info, handler)
}

func _TicketMgr_DeleteTicket_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(conversation.DeleteTicketRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TicketMgrServer).DeleteTicket(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.TicketMgr/DeleteTicket",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TicketMgrServer).DeleteTicket(ctx, req.(*conversation.DeleteTicketRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TicketMgr_GetTicket_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(conversation.GetTicketRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TicketMgrServer).GetTicket(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.TicketMgr/GetTicket",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TicketMgrServer).GetTicket(ctx, req.(*conversation.GetTicketRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TicketMgr_SearchTicket_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(conversation.TicketListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TicketMgrServer).SearchTicket(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.TicketMgr/SearchTicket",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TicketMgrServer).SearchTicket(ctx, req.(*conversation.TicketListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TicketMgr_ListSLAs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TicketMgrServer).ListSLAs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.TicketMgr/ListSLAs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TicketMgrServer).ListSLAs(ctx, req.(*common.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _TicketMgr_GetSLA_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TicketMgrServer).GetSLA(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.TicketMgr/GetSLA",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TicketMgrServer).GetSLA(ctx, req.(*common.Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _TicketMgr_CreateSLA_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(conversation.ServiceLevelAgreement)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TicketMgrServer).CreateSLA(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.TicketMgr/CreateSLA",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TicketMgrServer).CreateSLA(ctx, req.(*conversation.ServiceLevelAgreement))
	}
	return interceptor(ctx, in, info, handler)
}

func _TicketMgr_UpdateSLA_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(conversation.ServiceLevelAgreement)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TicketMgrServer).UpdateSLA(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.TicketMgr/UpdateSLA",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TicketMgrServer).UpdateSLA(ctx, req.(*conversation.ServiceLevelAgreement))
	}
	return interceptor(ctx, in, info, handler)
}

func _TicketMgr_DeleteSLA_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TicketMgrServer).DeleteSLA(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.TicketMgr/DeleteSLA",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TicketMgrServer).DeleteSLA(ctx, req.(*common.Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _TicketMgr_CountTicket_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(conversation.CountTicketRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TicketMgrServer).CountTicket(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.TicketMgr/CountTicket",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TicketMgrServer).CountTicket(ctx, req.(*conversation.CountTicketRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TicketMgr_GetAvgResolveTimes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(conversation.AvgResolveTimeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TicketMgrServer).GetAvgResolveTimes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.TicketMgr/GetAvgResolveTimes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TicketMgrServer).GetAvgResolveTimes(ctx, req.(*conversation.AvgResolveTimeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _TicketMgr_serviceDesc = grpc.ServiceDesc{
	ServiceName: "header.TicketMgr",
	HandlerType: (*TicketMgrServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateTicket",
			Handler:    _TicketMgr_CreateTicket_Handler,
		},
		{
			MethodName: "UpdateTicket",
			Handler:    _TicketMgr_UpdateTicket_Handler,
		},
		{
			MethodName: "DeleteTicket",
			Handler:    _TicketMgr_DeleteTicket_Handler,
		},
		{
			MethodName: "GetTicket",
			Handler:    _TicketMgr_GetTicket_Handler,
		},
		{
			MethodName: "SearchTicket",
			Handler:    _TicketMgr_SearchTicket_Handler,
		},
		{
			MethodName: "ListSLAs",
			Handler:    _TicketMgr_ListSLAs_Handler,
		},
		{
			MethodName: "GetSLA",
			Handler:    _TicketMgr_GetSLA_Handler,
		},
		{
			MethodName: "CreateSLA",
			Handler:    _TicketMgr_CreateSLA_Handler,
		},
		{
			MethodName: "UpdateSLA",
			Handler:    _TicketMgr_UpdateSLA_Handler,
		},
		{
			MethodName: "DeleteSLA",
			Handler:    _TicketMgr_DeleteSLA_Handler,
		},
		{
			MethodName: "CountTicket",
			Handler:    _TicketMgr_CountTicket_Handler,
		},
		{
			MethodName: "GetAvgResolveTimes",
			Handler:    _TicketMgr_GetAvgResolveTimes_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "service.proto",
}

// ClientMgrClient is the client API for ClientMgr service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ClientMgrClient interface {
	Create(ctx context.Context, in *Client, opts ...grpc.CallOption) (*Client, error)
	Update(ctx context.Context, in *Client, opts ...grpc.CallOption) (*Client, error)
	Read(ctx context.Context, in *Client, opts ...grpc.CallOption) (*Client, error)
	ListIntegratedClients(ctx context.Context, in *common.Id, opts ...grpc.CallOption) (*AuthorizedClient, error)
	ListAuthorizedClients(ctx context.Context, in *common.Id, opts ...grpc.CallOption) (*AuthorizedClient, error)
}

type clientMgrClient struct {
	cc grpc.ClientConnInterface
}

func NewClientMgrClient(cc grpc.ClientConnInterface) ClientMgrClient {
	return &clientMgrClient{cc}
}

func (c *clientMgrClient) Create(ctx context.Context, in *Client, opts ...grpc.CallOption) (*Client, error) {
	out := new(Client)
	err := c.cc.Invoke(ctx, "/header.ClientMgr/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientMgrClient) Update(ctx context.Context, in *Client, opts ...grpc.CallOption) (*Client, error) {
	out := new(Client)
	err := c.cc.Invoke(ctx, "/header.ClientMgr/Update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientMgrClient) Read(ctx context.Context, in *Client, opts ...grpc.CallOption) (*Client, error) {
	out := new(Client)
	err := c.cc.Invoke(ctx, "/header.ClientMgr/Read", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientMgrClient) ListIntegratedClients(ctx context.Context, in *common.Id, opts ...grpc.CallOption) (*AuthorizedClient, error) {
	out := new(AuthorizedClient)
	err := c.cc.Invoke(ctx, "/header.ClientMgr/ListIntegratedClients", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientMgrClient) ListAuthorizedClients(ctx context.Context, in *common.Id, opts ...grpc.CallOption) (*AuthorizedClient, error) {
	out := new(AuthorizedClient)
	err := c.cc.Invoke(ctx, "/header.ClientMgr/ListAuthorizedClients", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ClientMgrServer is the server API for ClientMgr service.
type ClientMgrServer interface {
	Create(context.Context, *Client) (*Client, error)
	Update(context.Context, *Client) (*Client, error)
	Read(context.Context, *Client) (*Client, error)
	ListIntegratedClients(context.Context, *common.Id) (*AuthorizedClient, error)
	ListAuthorizedClients(context.Context, *common.Id) (*AuthorizedClient, error)
}

// UnimplementedClientMgrServer can be embedded to have forward compatible implementations.
type UnimplementedClientMgrServer struct {
}

func (*UnimplementedClientMgrServer) Create(context.Context, *Client) (*Client, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (*UnimplementedClientMgrServer) Update(context.Context, *Client) (*Client, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (*UnimplementedClientMgrServer) Read(context.Context, *Client) (*Client, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Read not implemented")
}
func (*UnimplementedClientMgrServer) ListIntegratedClients(context.Context, *common.Id) (*AuthorizedClient, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListIntegratedClients not implemented")
}
func (*UnimplementedClientMgrServer) ListAuthorizedClients(context.Context, *common.Id) (*AuthorizedClient, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAuthorizedClients not implemented")
}

func RegisterClientMgrServer(s *grpc.Server, srv ClientMgrServer) {
	s.RegisterService(&_ClientMgr_serviceDesc, srv)
}

func _ClientMgr_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Client)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientMgrServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.ClientMgr/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientMgrServer).Create(ctx, req.(*Client))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientMgr_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Client)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientMgrServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.ClientMgr/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientMgrServer).Update(ctx, req.(*Client))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientMgr_Read_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Client)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientMgrServer).Read(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.ClientMgr/Read",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientMgrServer).Read(ctx, req.(*Client))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientMgr_ListIntegratedClients_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientMgrServer).ListIntegratedClients(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.ClientMgr/ListIntegratedClients",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientMgrServer).ListIntegratedClients(ctx, req.(*common.Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientMgr_ListAuthorizedClients_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientMgrServer).ListAuthorizedClients(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.ClientMgr/ListAuthorizedClients",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientMgrServer).ListAuthorizedClients(ctx, req.(*common.Id))
	}
	return interceptor(ctx, in, info, handler)
}

var _ClientMgr_serviceDesc = grpc.ServiceDesc{
	ServiceName: "header.ClientMgr",
	HandlerType: (*ClientMgrServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _ClientMgr_Create_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _ClientMgr_Update_Handler,
		},
		{
			MethodName: "Read",
			Handler:    _ClientMgr_Read_Handler,
		},
		{
			MethodName: "ListIntegratedClients",
			Handler:    _ClientMgr_ListIntegratedClients_Handler,
		},
		{
			MethodName: "ListAuthorizedClients",
			Handler:    _ClientMgr_ListAuthorizedClients_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "service.proto",
}

// ServiceContentManagerClient is the client API for ServiceContentManager service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ServiceContentManagerClient interface {
	UpsertContent(ctx context.Context, in *content.Content, opts ...grpc.CallOption) (*content.Content, error)
	DeleteContent(ctx context.Context, in *common.Id, opts ...grpc.CallOption) (*common.Empty, error)
	GetContent(ctx context.Context, in *common.Id, opts ...grpc.CallOption) (*content.Content, error)
	SearchContents(ctx context.Context, in *content.SearchContentRequest, opts ...grpc.CallOption) (*content.Contents, error)
	LookupContentsByUrl(ctx context.Context, in *content.LookupRequest, opts ...grpc.CallOption) (*content.Contents, error)
	LinkContentsToUrl(ctx context.Context, in *content.LinkRequest, opts ...grpc.CallOption) (*common.Empty, error)
}

type serviceContentManagerClient struct {
	cc grpc.ClientConnInterface
}

func NewServiceContentManagerClient(cc grpc.ClientConnInterface) ServiceContentManagerClient {
	return &serviceContentManagerClient{cc}
}

func (c *serviceContentManagerClient) UpsertContent(ctx context.Context, in *content.Content, opts ...grpc.CallOption) (*content.Content, error) {
	out := new(content.Content)
	err := c.cc.Invoke(ctx, "/header.ServiceContentManager/UpsertContent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceContentManagerClient) DeleteContent(ctx context.Context, in *common.Id, opts ...grpc.CallOption) (*common.Empty, error) {
	out := new(common.Empty)
	err := c.cc.Invoke(ctx, "/header.ServiceContentManager/DeleteContent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceContentManagerClient) GetContent(ctx context.Context, in *common.Id, opts ...grpc.CallOption) (*content.Content, error) {
	out := new(content.Content)
	err := c.cc.Invoke(ctx, "/header.ServiceContentManager/GetContent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceContentManagerClient) SearchContents(ctx context.Context, in *content.SearchContentRequest, opts ...grpc.CallOption) (*content.Contents, error) {
	out := new(content.Contents)
	err := c.cc.Invoke(ctx, "/header.ServiceContentManager/SearchContents", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceContentManagerClient) LookupContentsByUrl(ctx context.Context, in *content.LookupRequest, opts ...grpc.CallOption) (*content.Contents, error) {
	out := new(content.Contents)
	err := c.cc.Invoke(ctx, "/header.ServiceContentManager/LookupContentsByUrl", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceContentManagerClient) LinkContentsToUrl(ctx context.Context, in *content.LinkRequest, opts ...grpc.CallOption) (*common.Empty, error) {
	out := new(common.Empty)
	err := c.cc.Invoke(ctx, "/header.ServiceContentManager/LinkContentsToUrl", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ServiceContentManagerServer is the server API for ServiceContentManager service.
type ServiceContentManagerServer interface {
	UpsertContent(context.Context, *content.Content) (*content.Content, error)
	DeleteContent(context.Context, *common.Id) (*common.Empty, error)
	GetContent(context.Context, *common.Id) (*content.Content, error)
	SearchContents(context.Context, *content.SearchContentRequest) (*content.Contents, error)
	LookupContentsByUrl(context.Context, *content.LookupRequest) (*content.Contents, error)
	LinkContentsToUrl(context.Context, *content.LinkRequest) (*common.Empty, error)
}

// UnimplementedServiceContentManagerServer can be embedded to have forward compatible implementations.
type UnimplementedServiceContentManagerServer struct {
}

func (*UnimplementedServiceContentManagerServer) UpsertContent(context.Context, *content.Content) (*content.Content, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpsertContent not implemented")
}
func (*UnimplementedServiceContentManagerServer) DeleteContent(context.Context, *common.Id) (*common.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteContent not implemented")
}
func (*UnimplementedServiceContentManagerServer) GetContent(context.Context, *common.Id) (*content.Content, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetContent not implemented")
}
func (*UnimplementedServiceContentManagerServer) SearchContents(context.Context, *content.SearchContentRequest) (*content.Contents, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchContents not implemented")
}
func (*UnimplementedServiceContentManagerServer) LookupContentsByUrl(context.Context, *content.LookupRequest) (*content.Contents, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LookupContentsByUrl not implemented")
}
func (*UnimplementedServiceContentManagerServer) LinkContentsToUrl(context.Context, *content.LinkRequest) (*common.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LinkContentsToUrl not implemented")
}

func RegisterServiceContentManagerServer(s *grpc.Server, srv ServiceContentManagerServer) {
	s.RegisterService(&_ServiceContentManager_serviceDesc, srv)
}

func _ServiceContentManager_UpsertContent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(content.Content)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceContentManagerServer).UpsertContent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.ServiceContentManager/UpsertContent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceContentManagerServer).UpsertContent(ctx, req.(*content.Content))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServiceContentManager_DeleteContent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceContentManagerServer).DeleteContent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.ServiceContentManager/DeleteContent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceContentManagerServer).DeleteContent(ctx, req.(*common.Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServiceContentManager_GetContent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceContentManagerServer).GetContent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.ServiceContentManager/GetContent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceContentManagerServer).GetContent(ctx, req.(*common.Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServiceContentManager_SearchContents_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(content.SearchContentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceContentManagerServer).SearchContents(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.ServiceContentManager/SearchContents",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceContentManagerServer).SearchContents(ctx, req.(*content.SearchContentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServiceContentManager_LookupContentsByUrl_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(content.LookupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceContentManagerServer).LookupContentsByUrl(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.ServiceContentManager/LookupContentsByUrl",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceContentManagerServer).LookupContentsByUrl(ctx, req.(*content.LookupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServiceContentManager_LinkContentsToUrl_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(content.LinkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceContentManagerServer).LinkContentsToUrl(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.ServiceContentManager/LinkContentsToUrl",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceContentManagerServer).LinkContentsToUrl(ctx, req.(*content.LinkRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _ServiceContentManager_serviceDesc = grpc.ServiceDesc{
	ServiceName: "header.ServiceContentManager",
	HandlerType: (*ServiceContentManagerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UpsertContent",
			Handler:    _ServiceContentManager_UpsertContent_Handler,
		},
		{
			MethodName: "DeleteContent",
			Handler:    _ServiceContentManager_DeleteContent_Handler,
		},
		{
			MethodName: "GetContent",
			Handler:    _ServiceContentManager_GetContent_Handler,
		},
		{
			MethodName: "SearchContents",
			Handler:    _ServiceContentManager_SearchContents_Handler,
		},
		{
			MethodName: "LookupContentsByUrl",
			Handler:    _ServiceContentManager_LookupContentsByUrl_Handler,
		},
		{
			MethodName: "LinkContentsToUrl",
			Handler:    _ServiceContentManager_LinkContentsToUrl_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "service.proto",
}

// EventMgrClient is the client API for EventMgr service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type EventMgrClient interface {
	SearchEvents(ctx context.Context, in *ListUserEventsRequest, opts ...grpc.CallOption) (*Events, error)
	CreateEvent(ctx context.Context, in *UserEvent, opts ...grpc.CallOption) (*Event, error)
}

type eventMgrClient struct {
	cc grpc.ClientConnInterface
}

func NewEventMgrClient(cc grpc.ClientConnInterface) EventMgrClient {
	return &eventMgrClient{cc}
}

func (c *eventMgrClient) SearchEvents(ctx context.Context, in *ListUserEventsRequest, opts ...grpc.CallOption) (*Events, error) {
	out := new(Events)
	err := c.cc.Invoke(ctx, "/header.EventMgr/SearchEvents", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventMgrClient) CreateEvent(ctx context.Context, in *UserEvent, opts ...grpc.CallOption) (*Event, error) {
	out := new(Event)
	err := c.cc.Invoke(ctx, "/header.EventMgr/CreateEvent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// EventMgrServer is the server API for EventMgr service.
type EventMgrServer interface {
	SearchEvents(context.Context, *ListUserEventsRequest) (*Events, error)
	CreateEvent(context.Context, *UserEvent) (*Event, error)
}

// UnimplementedEventMgrServer can be embedded to have forward compatible implementations.
type UnimplementedEventMgrServer struct {
}

func (*UnimplementedEventMgrServer) SearchEvents(context.Context, *ListUserEventsRequest) (*Events, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchEvents not implemented")
}
func (*UnimplementedEventMgrServer) CreateEvent(context.Context, *UserEvent) (*Event, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateEvent not implemented")
}

func RegisterEventMgrServer(s *grpc.Server, srv EventMgrServer) {
	s.RegisterService(&_EventMgr_serviceDesc, srv)
}

func _EventMgr_SearchEvents_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListUserEventsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventMgrServer).SearchEvents(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.EventMgr/SearchEvents",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventMgrServer).SearchEvents(ctx, req.(*ListUserEventsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EventMgr_CreateEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserEvent)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventMgrServer).CreateEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.EventMgr/CreateEvent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventMgrServer).CreateEvent(ctx, req.(*UserEvent))
	}
	return interceptor(ctx, in, info, handler)
}

var _EventMgr_serviceDesc = grpc.ServiceDesc{
	ServiceName: "header.EventMgr",
	HandlerType: (*EventMgrServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SearchEvents",
			Handler:    _EventMgr_SearchEvents_Handler,
		},
		{
			MethodName: "CreateEvent",
			Handler:    _EventMgr_CreateEvent_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "service.proto",
}

// ConversationEventReaderClient is the client API for ConversationEventReader service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ConversationEventReaderClient interface {
	SendMessage(ctx context.Context, in *Event, opts ...grpc.CallOption) (*Event, error)
	UpdateMessage(ctx context.Context, in *Event, opts ...grpc.CallOption) (*Event, error)
	ListEvents(ctx context.Context, in *ListConversationEventsRequest, opts ...grpc.CallOption) (*Events, error)
	SearchEvents(ctx context.Context, in *SearchMessageRequest, opts ...grpc.CallOption) (*Events, error)
}

type conversationEventReaderClient struct {
	cc grpc.ClientConnInterface
}

func NewConversationEventReaderClient(cc grpc.ClientConnInterface) ConversationEventReaderClient {
	return &conversationEventReaderClient{cc}
}

func (c *conversationEventReaderClient) SendMessage(ctx context.Context, in *Event, opts ...grpc.CallOption) (*Event, error) {
	out := new(Event)
	err := c.cc.Invoke(ctx, "/header.ConversationEventReader/SendMessage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *conversationEventReaderClient) UpdateMessage(ctx context.Context, in *Event, opts ...grpc.CallOption) (*Event, error) {
	out := new(Event)
	err := c.cc.Invoke(ctx, "/header.ConversationEventReader/UpdateMessage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *conversationEventReaderClient) ListEvents(ctx context.Context, in *ListConversationEventsRequest, opts ...grpc.CallOption) (*Events, error) {
	out := new(Events)
	err := c.cc.Invoke(ctx, "/header.ConversationEventReader/ListEvents", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *conversationEventReaderClient) SearchEvents(ctx context.Context, in *SearchMessageRequest, opts ...grpc.CallOption) (*Events, error) {
	out := new(Events)
	err := c.cc.Invoke(ctx, "/header.ConversationEventReader/SearchEvents", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ConversationEventReaderServer is the server API for ConversationEventReader service.
type ConversationEventReaderServer interface {
	SendMessage(context.Context, *Event) (*Event, error)
	UpdateMessage(context.Context, *Event) (*Event, error)
	ListEvents(context.Context, *ListConversationEventsRequest) (*Events, error)
	SearchEvents(context.Context, *SearchMessageRequest) (*Events, error)
}

// UnimplementedConversationEventReaderServer can be embedded to have forward compatible implementations.
type UnimplementedConversationEventReaderServer struct {
}

func (*UnimplementedConversationEventReaderServer) SendMessage(context.Context, *Event) (*Event, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendMessage not implemented")
}
func (*UnimplementedConversationEventReaderServer) UpdateMessage(context.Context, *Event) (*Event, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateMessage not implemented")
}
func (*UnimplementedConversationEventReaderServer) ListEvents(context.Context, *ListConversationEventsRequest) (*Events, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListEvents not implemented")
}
func (*UnimplementedConversationEventReaderServer) SearchEvents(context.Context, *SearchMessageRequest) (*Events, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchEvents not implemented")
}

func RegisterConversationEventReaderServer(s *grpc.Server, srv ConversationEventReaderServer) {
	s.RegisterService(&_ConversationEventReader_serviceDesc, srv)
}

func _ConversationEventReader_SendMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Event)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConversationEventReaderServer).SendMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.ConversationEventReader/SendMessage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConversationEventReaderServer).SendMessage(ctx, req.(*Event))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConversationEventReader_UpdateMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Event)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConversationEventReaderServer).UpdateMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.ConversationEventReader/UpdateMessage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConversationEventReaderServer).UpdateMessage(ctx, req.(*Event))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConversationEventReader_ListEvents_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListConversationEventsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConversationEventReaderServer).ListEvents(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.ConversationEventReader/ListEvents",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConversationEventReaderServer).ListEvents(ctx, req.(*ListConversationEventsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConversationEventReader_SearchEvents_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchMessageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConversationEventReaderServer).SearchEvents(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.ConversationEventReader/SearchEvents",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConversationEventReaderServer).SearchEvents(ctx, req.(*SearchMessageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _ConversationEventReader_serviceDesc = grpc.ServiceDesc{
	ServiceName: "header.ConversationEventReader",
	HandlerType: (*ConversationEventReaderServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SendMessage",
			Handler:    _ConversationEventReader_SendMessage_Handler,
		},
		{
			MethodName: "UpdateMessage",
			Handler:    _ConversationEventReader_UpdateMessage_Handler,
		},
		{
			MethodName: "ListEvents",
			Handler:    _ConversationEventReader_ListEvents_Handler,
		},
		{
			MethodName: "SearchEvents",
			Handler:    _ConversationEventReader_SearchEvents_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "service.proto",
}

// FileMgrClient is the client API for FileMgr service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type FileMgrClient interface {
	Presign(ctx context.Context, in *FileHeader, opts ...grpc.CallOption) (*PresignResult, error)
	Read(ctx context.Context, in *FileRequest, opts ...grpc.CallOption) (*File, error)
	Uploaded(ctx context.Context, in *FileRequest, opts ...grpc.CallOption) (*File, error)
}

type fileMgrClient struct {
	cc grpc.ClientConnInterface
}

func NewFileMgrClient(cc grpc.ClientConnInterface) FileMgrClient {
	return &fileMgrClient{cc}
}

func (c *fileMgrClient) Presign(ctx context.Context, in *FileHeader, opts ...grpc.CallOption) (*PresignResult, error) {
	out := new(PresignResult)
	err := c.cc.Invoke(ctx, "/header.FileMgr/Presign", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fileMgrClient) Read(ctx context.Context, in *FileRequest, opts ...grpc.CallOption) (*File, error) {
	out := new(File)
	err := c.cc.Invoke(ctx, "/header.FileMgr/Read", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fileMgrClient) Uploaded(ctx context.Context, in *FileRequest, opts ...grpc.CallOption) (*File, error) {
	out := new(File)
	err := c.cc.Invoke(ctx, "/header.FileMgr/Uploaded", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FileMgrServer is the server API for FileMgr service.
type FileMgrServer interface {
	Presign(context.Context, *FileHeader) (*PresignResult, error)
	Read(context.Context, *FileRequest) (*File, error)
	Uploaded(context.Context, *FileRequest) (*File, error)
}

// UnimplementedFileMgrServer can be embedded to have forward compatible implementations.
type UnimplementedFileMgrServer struct {
}

func (*UnimplementedFileMgrServer) Presign(context.Context, *FileHeader) (*PresignResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Presign not implemented")
}
func (*UnimplementedFileMgrServer) Read(context.Context, *FileRequest) (*File, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Read not implemented")
}
func (*UnimplementedFileMgrServer) Uploaded(context.Context, *FileRequest) (*File, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Uploaded not implemented")
}

func RegisterFileMgrServer(s *grpc.Server, srv FileMgrServer) {
	s.RegisterService(&_FileMgr_serviceDesc, srv)
}

func _FileMgr_Presign_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FileHeader)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileMgrServer).Presign(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.FileMgr/Presign",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileMgrServer).Presign(ctx, req.(*FileHeader))
	}
	return interceptor(ctx, in, info, handler)
}

func _FileMgr_Read_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileMgrServer).Read(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.FileMgr/Read",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileMgrServer).Read(ctx, req.(*FileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FileMgr_Uploaded_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileMgrServer).Uploaded(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.FileMgr/Uploaded",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileMgrServer).Uploaded(ctx, req.(*FileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _FileMgr_serviceDesc = grpc.ServiceDesc{
	ServiceName: "header.FileMgr",
	HandlerType: (*FileMgrServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Presign",
			Handler:    _FileMgr_Presign_Handler,
		},
		{
			MethodName: "Read",
			Handler:    _FileMgr_Read_Handler,
		},
		{
			MethodName: "Uploaded",
			Handler:    _FileMgr_Uploaded_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "service.proto",
}

// Noti5ServiceClient is the client API for Noti5Service service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type Noti5ServiceClient interface {
	ReadNotificationSetting(ctx context.Context, in *common.Id, opts ...grpc.CallOption) (*noti5.Setting, error)
	UpdateNotificationSetting(ctx context.Context, in *noti5.Setting, opts ...grpc.CallOption) (*noti5.Setting, error)
	Noti(ctx context.Context, in *noti5.PushNoti, opts ...grpc.CallOption) (*common.Empty, error)
	AddToken(ctx context.Context, in *noti5.Token, opts ...grpc.CallOption) (*common.Empty, error)
	RemoveToken(ctx context.Context, in *noti5.Token, opts ...grpc.CallOption) (*common.Empty, error)
	CheckTokenExists(ctx context.Context, in *noti5.Token, opts ...grpc.CallOption) (*common.Empty, error)
}

type noti5ServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewNoti5ServiceClient(cc grpc.ClientConnInterface) Noti5ServiceClient {
	return &noti5ServiceClient{cc}
}

func (c *noti5ServiceClient) ReadNotificationSetting(ctx context.Context, in *common.Id, opts ...grpc.CallOption) (*noti5.Setting, error) {
	out := new(noti5.Setting)
	err := c.cc.Invoke(ctx, "/header.Noti5Service/ReadNotificationSetting", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *noti5ServiceClient) UpdateNotificationSetting(ctx context.Context, in *noti5.Setting, opts ...grpc.CallOption) (*noti5.Setting, error) {
	out := new(noti5.Setting)
	err := c.cc.Invoke(ctx, "/header.Noti5Service/UpdateNotificationSetting", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *noti5ServiceClient) Noti(ctx context.Context, in *noti5.PushNoti, opts ...grpc.CallOption) (*common.Empty, error) {
	out := new(common.Empty)
	err := c.cc.Invoke(ctx, "/header.Noti5Service/Noti", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *noti5ServiceClient) AddToken(ctx context.Context, in *noti5.Token, opts ...grpc.CallOption) (*common.Empty, error) {
	out := new(common.Empty)
	err := c.cc.Invoke(ctx, "/header.Noti5Service/AddToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *noti5ServiceClient) RemoveToken(ctx context.Context, in *noti5.Token, opts ...grpc.CallOption) (*common.Empty, error) {
	out := new(common.Empty)
	err := c.cc.Invoke(ctx, "/header.Noti5Service/RemoveToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *noti5ServiceClient) CheckTokenExists(ctx context.Context, in *noti5.Token, opts ...grpc.CallOption) (*common.Empty, error) {
	out := new(common.Empty)
	err := c.cc.Invoke(ctx, "/header.Noti5Service/CheckTokenExists", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Noti5ServiceServer is the server API for Noti5Service service.
type Noti5ServiceServer interface {
	ReadNotificationSetting(context.Context, *common.Id) (*noti5.Setting, error)
	UpdateNotificationSetting(context.Context, *noti5.Setting) (*noti5.Setting, error)
	Noti(context.Context, *noti5.PushNoti) (*common.Empty, error)
	AddToken(context.Context, *noti5.Token) (*common.Empty, error)
	RemoveToken(context.Context, *noti5.Token) (*common.Empty, error)
	CheckTokenExists(context.Context, *noti5.Token) (*common.Empty, error)
}

// UnimplementedNoti5ServiceServer can be embedded to have forward compatible implementations.
type UnimplementedNoti5ServiceServer struct {
}

func (*UnimplementedNoti5ServiceServer) ReadNotificationSetting(context.Context, *common.Id) (*noti5.Setting, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadNotificationSetting not implemented")
}
func (*UnimplementedNoti5ServiceServer) UpdateNotificationSetting(context.Context, *noti5.Setting) (*noti5.Setting, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateNotificationSetting not implemented")
}
func (*UnimplementedNoti5ServiceServer) Noti(context.Context, *noti5.PushNoti) (*common.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Noti not implemented")
}
func (*UnimplementedNoti5ServiceServer) AddToken(context.Context, *noti5.Token) (*common.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddToken not implemented")
}
func (*UnimplementedNoti5ServiceServer) RemoveToken(context.Context, *noti5.Token) (*common.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveToken not implemented")
}
func (*UnimplementedNoti5ServiceServer) CheckTokenExists(context.Context, *noti5.Token) (*common.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckTokenExists not implemented")
}

func RegisterNoti5ServiceServer(s *grpc.Server, srv Noti5ServiceServer) {
	s.RegisterService(&_Noti5Service_serviceDesc, srv)
}

func _Noti5Service_ReadNotificationSetting_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(Noti5ServiceServer).ReadNotificationSetting(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.Noti5Service/ReadNotificationSetting",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(Noti5ServiceServer).ReadNotificationSetting(ctx, req.(*common.Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _Noti5Service_UpdateNotificationSetting_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(noti5.Setting)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(Noti5ServiceServer).UpdateNotificationSetting(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.Noti5Service/UpdateNotificationSetting",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(Noti5ServiceServer).UpdateNotificationSetting(ctx, req.(*noti5.Setting))
	}
	return interceptor(ctx, in, info, handler)
}

func _Noti5Service_Noti_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(noti5.PushNoti)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(Noti5ServiceServer).Noti(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.Noti5Service/Noti",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(Noti5ServiceServer).Noti(ctx, req.(*noti5.PushNoti))
	}
	return interceptor(ctx, in, info, handler)
}

func _Noti5Service_AddToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(noti5.Token)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(Noti5ServiceServer).AddToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.Noti5Service/AddToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(Noti5ServiceServer).AddToken(ctx, req.(*noti5.Token))
	}
	return interceptor(ctx, in, info, handler)
}

func _Noti5Service_RemoveToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(noti5.Token)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(Noti5ServiceServer).RemoveToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.Noti5Service/RemoveToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(Noti5ServiceServer).RemoveToken(ctx, req.(*noti5.Token))
	}
	return interceptor(ctx, in, info, handler)
}

func _Noti5Service_CheckTokenExists_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(noti5.Token)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(Noti5ServiceServer).CheckTokenExists(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.Noti5Service/CheckTokenExists",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(Noti5ServiceServer).CheckTokenExists(ctx, req.(*noti5.Token))
	}
	return interceptor(ctx, in, info, handler)
}

var _Noti5Service_serviceDesc = grpc.ServiceDesc{
	ServiceName: "header.Noti5Service",
	HandlerType: (*Noti5ServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ReadNotificationSetting",
			Handler:    _Noti5Service_ReadNotificationSetting_Handler,
		},
		{
			MethodName: "UpdateNotificationSetting",
			Handler:    _Noti5Service_UpdateNotificationSetting_Handler,
		},
		{
			MethodName: "Noti",
			Handler:    _Noti5Service_Noti_Handler,
		},
		{
			MethodName: "AddToken",
			Handler:    _Noti5Service_AddToken_Handler,
		},
		{
			MethodName: "RemoveToken",
			Handler:    _Noti5Service_RemoveToken_Handler,
		},
		{
			MethodName: "CheckTokenExists",
			Handler:    _Noti5Service_CheckTokenExists_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "service.proto",
}

// NotiboxServiceClient is the client API for NotiboxService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type NotiboxServiceClient interface {
	ReadAllNotis(ctx context.Context, in *common.Id, opts ...grpc.CallOption) (*common.Empty, error)
	ListNotis(ctx context.Context, in *notibox.ListRequest, opts ...grpc.CallOption) (*notibox.Notifications, error)
	GetNotibox(ctx context.Context, in *common.Id, opts ...grpc.CallOption) (*notibox.Notibox, error)
}

type notiboxServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewNotiboxServiceClient(cc grpc.ClientConnInterface) NotiboxServiceClient {
	return &notiboxServiceClient{cc}
}

func (c *notiboxServiceClient) ReadAllNotis(ctx context.Context, in *common.Id, opts ...grpc.CallOption) (*common.Empty, error) {
	out := new(common.Empty)
	err := c.cc.Invoke(ctx, "/header.NotiboxService/ReadAllNotis", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *notiboxServiceClient) ListNotis(ctx context.Context, in *notibox.ListRequest, opts ...grpc.CallOption) (*notibox.Notifications, error) {
	out := new(notibox.Notifications)
	err := c.cc.Invoke(ctx, "/header.NotiboxService/ListNotis", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *notiboxServiceClient) GetNotibox(ctx context.Context, in *common.Id, opts ...grpc.CallOption) (*notibox.Notibox, error) {
	out := new(notibox.Notibox)
	err := c.cc.Invoke(ctx, "/header.NotiboxService/GetNotibox", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NotiboxServiceServer is the server API for NotiboxService service.
type NotiboxServiceServer interface {
	ReadAllNotis(context.Context, *common.Id) (*common.Empty, error)
	ListNotis(context.Context, *notibox.ListRequest) (*notibox.Notifications, error)
	GetNotibox(context.Context, *common.Id) (*notibox.Notibox, error)
}

// UnimplementedNotiboxServiceServer can be embedded to have forward compatible implementations.
type UnimplementedNotiboxServiceServer struct {
}

func (*UnimplementedNotiboxServiceServer) ReadAllNotis(context.Context, *common.Id) (*common.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadAllNotis not implemented")
}
func (*UnimplementedNotiboxServiceServer) ListNotis(context.Context, *notibox.ListRequest) (*notibox.Notifications, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListNotis not implemented")
}
func (*UnimplementedNotiboxServiceServer) GetNotibox(context.Context, *common.Id) (*notibox.Notibox, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNotibox not implemented")
}

func RegisterNotiboxServiceServer(s *grpc.Server, srv NotiboxServiceServer) {
	s.RegisterService(&_NotiboxService_serviceDesc, srv)
}

func _NotiboxService_ReadAllNotis_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotiboxServiceServer).ReadAllNotis(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.NotiboxService/ReadAllNotis",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotiboxServiceServer).ReadAllNotis(ctx, req.(*common.Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _NotiboxService_ListNotis_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(notibox.ListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotiboxServiceServer).ListNotis(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.NotiboxService/ListNotis",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotiboxServiceServer).ListNotis(ctx, req.(*notibox.ListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NotiboxService_GetNotibox_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotiboxServiceServer).GetNotibox(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.NotiboxService/GetNotibox",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotiboxServiceServer).GetNotibox(ctx, req.(*common.Id))
	}
	return interceptor(ctx, in, info, handler)
}

var _NotiboxService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "header.NotiboxService",
	HandlerType: (*NotiboxServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ReadAllNotis",
			Handler:    _NotiboxService_ReadAllNotis_Handler,
		},
		{
			MethodName: "ListNotis",
			Handler:    _NotiboxService_ListNotis_Handler,
		},
		{
			MethodName: "GetNotibox",
			Handler:    _NotiboxService_GetNotibox_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "service.proto",
}

// SubizInternalPaymentMgrClient is the client API for SubizInternalPaymentMgr service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type SubizInternalPaymentMgrClient interface {
	CreateBill(ctx context.Context, in *payment.Bill, opts ...grpc.CallOption) (*payment.Bill, error)
	UpdateExchangeRate(ctx context.Context, in *payment.ExchangeRate, opts ...grpc.CallOption) (*payment.ExchangeRate, error)
}

type subizInternalPaymentMgrClient struct {
	cc grpc.ClientConnInterface
}

func NewSubizInternalPaymentMgrClient(cc grpc.ClientConnInterface) SubizInternalPaymentMgrClient {
	return &subizInternalPaymentMgrClient{cc}
}

func (c *subizInternalPaymentMgrClient) CreateBill(ctx context.Context, in *payment.Bill, opts ...grpc.CallOption) (*payment.Bill, error) {
	out := new(payment.Bill)
	err := c.cc.Invoke(ctx, "/header.SubizInternalPaymentMgr/CreateBill", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *subizInternalPaymentMgrClient) UpdateExchangeRate(ctx context.Context, in *payment.ExchangeRate, opts ...grpc.CallOption) (*payment.ExchangeRate, error) {
	out := new(payment.ExchangeRate)
	err := c.cc.Invoke(ctx, "/header.SubizInternalPaymentMgr/UpdateExchangeRate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SubizInternalPaymentMgrServer is the server API for SubizInternalPaymentMgr service.
type SubizInternalPaymentMgrServer interface {
	CreateBill(context.Context, *payment.Bill) (*payment.Bill, error)
	UpdateExchangeRate(context.Context, *payment.ExchangeRate) (*payment.ExchangeRate, error)
}

// UnimplementedSubizInternalPaymentMgrServer can be embedded to have forward compatible implementations.
type UnimplementedSubizInternalPaymentMgrServer struct {
}

func (*UnimplementedSubizInternalPaymentMgrServer) CreateBill(context.Context, *payment.Bill) (*payment.Bill, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateBill not implemented")
}
func (*UnimplementedSubizInternalPaymentMgrServer) UpdateExchangeRate(context.Context, *payment.ExchangeRate) (*payment.ExchangeRate, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateExchangeRate not implemented")
}

func RegisterSubizInternalPaymentMgrServer(s *grpc.Server, srv SubizInternalPaymentMgrServer) {
	s.RegisterService(&_SubizInternalPaymentMgr_serviceDesc, srv)
}

func _SubizInternalPaymentMgr_CreateBill_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(payment.Bill)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SubizInternalPaymentMgrServer).CreateBill(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.SubizInternalPaymentMgr/CreateBill",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SubizInternalPaymentMgrServer).CreateBill(ctx, req.(*payment.Bill))
	}
	return interceptor(ctx, in, info, handler)
}

func _SubizInternalPaymentMgr_UpdateExchangeRate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(payment.ExchangeRate)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SubizInternalPaymentMgrServer).UpdateExchangeRate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.SubizInternalPaymentMgr/UpdateExchangeRate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SubizInternalPaymentMgrServer).UpdateExchangeRate(ctx, req.(*payment.ExchangeRate))
	}
	return interceptor(ctx, in, info, handler)
}

var _SubizInternalPaymentMgr_serviceDesc = grpc.ServiceDesc{
	ServiceName: "header.SubizInternalPaymentMgr",
	HandlerType: (*SubizInternalPaymentMgrServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateBill",
			Handler:    _SubizInternalPaymentMgr_CreateBill_Handler,
		},
		{
			MethodName: "UpdateExchangeRate",
			Handler:    _SubizInternalPaymentMgr_UpdateExchangeRate_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "service.proto",
}

// PaymentMgrClient is the client API for PaymentMgr service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type PaymentMgrClient interface {
	SearchSub(ctx context.Context, in *account.SearchSubRequest, opts ...grpc.CallOption) (*account.AccSubs, error)
	Purchase(ctx context.Context, in *payment.Subscription, opts ...grpc.CallOption) (*payment.Invoice, error)
	UpdateSubscription(ctx context.Context, in *payment.Subscription, opts ...grpc.CallOption) (*payment.Subscription, error)
	GetSubscription(ctx context.Context, in *common.Id, opts ...grpc.CallOption) (*payment.Subscription, error)
	AddPaymentMethod(ctx context.Context, in *payment.PaymentMethod, opts ...grpc.CallOption) (*payment.PaymentMethod, error)
	UpdatePaymentMethod(ctx context.Context, in *payment.PaymentMethod, opts ...grpc.CallOption) (*payment.PaymentMethod, error)
	DeletePaymentMethod(ctx context.Context, in *common.Id, opts ...grpc.CallOption) (*common.Empty, error)
	ListPaymentMethods(ctx context.Context, in *common.Id, opts ...grpc.CallOption) (*payment.PaymentMethods, error)
	Pay(ctx context.Context, in *payment.PayRequest, opts ...grpc.CallOption) (*payment.Bill, error)
	ListInvoices(ctx context.Context, in *common.Id, opts ...grpc.CallOption) (*payment.Invoices, error)
	CreateInvoice(ctx context.Context, in *payment.Invoice, opts ...grpc.CallOption) (*payment.Invoice, error)
	UpdateInvoice(ctx context.Context, in *payment.Invoice, opts ...grpc.CallOption) (*payment.Invoice, error)
	FilterInvoices(ctx context.Context, in *payment.ListInvoiceRequest, opts ...grpc.CallOption) (*payment.Invoices, error)
	DraftInvoice(ctx context.Context, in *payment.Subscription, opts ...grpc.CallOption) (*payment.Invoice, error)
	DiffSubscriptions(ctx context.Context, in *payment.DiffSubRequest, opts ...grpc.CallOption) (*payment.Invoice, error)
	ListComments(ctx context.Context, in *payment.ListCommentsRequest, opts ...grpc.CallOption) (*payment.Comments, error)
	AddComment(ctx context.Context, in *payment.Comment, opts ...grpc.CallOption) (*payment.Comment, error)
	ListPlans(ctx context.Context, in *common.Empty, opts ...grpc.CallOption) (*payment.Plans, error)
	ExportInvoice(ctx context.Context, in *common.Id, opts ...grpc.CallOption) (*payment.String, error)
	ConvertInvoiceToHtml(ctx context.Context, in *payment.Invoice, opts ...grpc.CallOption) (*payment.String, error)
	GetExchangeRate(ctx context.Context, in *payment.ExchangeRate, opts ...grpc.CallOption) (*payment.ExchangeRate, error)
	TransferMoney(ctx context.Context, in *payment.PayRequest, opts ...grpc.CallOption) (*payment.Bill, error)
	ListLogs(ctx context.Context, in *payment.ListLogsRequest, opts ...grpc.CallOption) (*payment.Logs, error)
	CreatePromotionCode(ctx context.Context, in *payment.PromotionCode, opts ...grpc.CallOption) (*payment.PromotionCode, error)
	GetPromotionCode(ctx context.Context, in *payment.String, opts ...grpc.CallOption) (*payment.PromotionCode, error)
	UsePromotionCode(ctx context.Context, in *payment.PromotionCodeRequest, opts ...grpc.CallOption) (*common.Empty, error)
	ValidatePromotionCode(ctx context.Context, in *payment.PromotionCodeRequest, opts ...grpc.CallOption) (*payment.PromotionCode, error)
	ListPromotionCode(ctx context.Context, in *payment.ListPromotionCodeRequest, opts ...grpc.CallOption) (*payment.PromotionCodes, error)
	DeletePromotionCode(ctx context.Context, in *common.Id, opts ...grpc.CallOption) (*common.Empty, error)
	SearchReferral(ctx context.Context, in *payment.SearchReferredRequest, opts ...grpc.CallOption) (*payment.Referral, error)
	GetReferral(ctx context.Context, in *common.Id, opts ...grpc.CallOption) (*payment.Referral, error)
	ListTopReferral(ctx context.Context, in *common.Empty, opts ...grpc.CallOption) (*payment.ReferralResponse, error)
	UpdateReferral(ctx context.Context, in *payment.Referral, opts ...grpc.CallOption) (*payment.Referral, error)
	ListAccountReferred(ctx context.Context, in *common.Id, opts ...grpc.CallOption) (*payment.LogAccountReferreds, error)
	ListBillByAccountReferred(ctx context.Context, in *common.Id, opts ...grpc.CallOption) (*payment.LogBillByAccountReferreds, error)
	ListPaidForAgentReferrer(ctx context.Context, in *common.Id, opts ...grpc.CallOption) (*payment.LogPaidForAgentReferrers, error)
	PaidForAgentReferrer(ctx context.Context, in *payment.LogPaidForAgentReferrer, opts ...grpc.CallOption) (*common.Empty, error)
}

type paymentMgrClient struct {
	cc grpc.ClientConnInterface
}

func NewPaymentMgrClient(cc grpc.ClientConnInterface) PaymentMgrClient {
	return &paymentMgrClient{cc}
}

func (c *paymentMgrClient) SearchSub(ctx context.Context, in *account.SearchSubRequest, opts ...grpc.CallOption) (*account.AccSubs, error) {
	out := new(account.AccSubs)
	err := c.cc.Invoke(ctx, "/header.PaymentMgr/SearchSub", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *paymentMgrClient) Purchase(ctx context.Context, in *payment.Subscription, opts ...grpc.CallOption) (*payment.Invoice, error) {
	out := new(payment.Invoice)
	err := c.cc.Invoke(ctx, "/header.PaymentMgr/Purchase", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *paymentMgrClient) UpdateSubscription(ctx context.Context, in *payment.Subscription, opts ...grpc.CallOption) (*payment.Subscription, error) {
	out := new(payment.Subscription)
	err := c.cc.Invoke(ctx, "/header.PaymentMgr/UpdateSubscription", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *paymentMgrClient) GetSubscription(ctx context.Context, in *common.Id, opts ...grpc.CallOption) (*payment.Subscription, error) {
	out := new(payment.Subscription)
	err := c.cc.Invoke(ctx, "/header.PaymentMgr/GetSubscription", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *paymentMgrClient) AddPaymentMethod(ctx context.Context, in *payment.PaymentMethod, opts ...grpc.CallOption) (*payment.PaymentMethod, error) {
	out := new(payment.PaymentMethod)
	err := c.cc.Invoke(ctx, "/header.PaymentMgr/AddPaymentMethod", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *paymentMgrClient) UpdatePaymentMethod(ctx context.Context, in *payment.PaymentMethod, opts ...grpc.CallOption) (*payment.PaymentMethod, error) {
	out := new(payment.PaymentMethod)
	err := c.cc.Invoke(ctx, "/header.PaymentMgr/UpdatePaymentMethod", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *paymentMgrClient) DeletePaymentMethod(ctx context.Context, in *common.Id, opts ...grpc.CallOption) (*common.Empty, error) {
	out := new(common.Empty)
	err := c.cc.Invoke(ctx, "/header.PaymentMgr/DeletePaymentMethod", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *paymentMgrClient) ListPaymentMethods(ctx context.Context, in *common.Id, opts ...grpc.CallOption) (*payment.PaymentMethods, error) {
	out := new(payment.PaymentMethods)
	err := c.cc.Invoke(ctx, "/header.PaymentMgr/ListPaymentMethods", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *paymentMgrClient) Pay(ctx context.Context, in *payment.PayRequest, opts ...grpc.CallOption) (*payment.Bill, error) {
	out := new(payment.Bill)
	err := c.cc.Invoke(ctx, "/header.PaymentMgr/Pay", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *paymentMgrClient) ListInvoices(ctx context.Context, in *common.Id, opts ...grpc.CallOption) (*payment.Invoices, error) {
	out := new(payment.Invoices)
	err := c.cc.Invoke(ctx, "/header.PaymentMgr/ListInvoices", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *paymentMgrClient) CreateInvoice(ctx context.Context, in *payment.Invoice, opts ...grpc.CallOption) (*payment.Invoice, error) {
	out := new(payment.Invoice)
	err := c.cc.Invoke(ctx, "/header.PaymentMgr/CreateInvoice", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *paymentMgrClient) UpdateInvoice(ctx context.Context, in *payment.Invoice, opts ...grpc.CallOption) (*payment.Invoice, error) {
	out := new(payment.Invoice)
	err := c.cc.Invoke(ctx, "/header.PaymentMgr/UpdateInvoice", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *paymentMgrClient) FilterInvoices(ctx context.Context, in *payment.ListInvoiceRequest, opts ...grpc.CallOption) (*payment.Invoices, error) {
	out := new(payment.Invoices)
	err := c.cc.Invoke(ctx, "/header.PaymentMgr/FilterInvoices", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *paymentMgrClient) DraftInvoice(ctx context.Context, in *payment.Subscription, opts ...grpc.CallOption) (*payment.Invoice, error) {
	out := new(payment.Invoice)
	err := c.cc.Invoke(ctx, "/header.PaymentMgr/DraftInvoice", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *paymentMgrClient) DiffSubscriptions(ctx context.Context, in *payment.DiffSubRequest, opts ...grpc.CallOption) (*payment.Invoice, error) {
	out := new(payment.Invoice)
	err := c.cc.Invoke(ctx, "/header.PaymentMgr/DiffSubscriptions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *paymentMgrClient) ListComments(ctx context.Context, in *payment.ListCommentsRequest, opts ...grpc.CallOption) (*payment.Comments, error) {
	out := new(payment.Comments)
	err := c.cc.Invoke(ctx, "/header.PaymentMgr/ListComments", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *paymentMgrClient) AddComment(ctx context.Context, in *payment.Comment, opts ...grpc.CallOption) (*payment.Comment, error) {
	out := new(payment.Comment)
	err := c.cc.Invoke(ctx, "/header.PaymentMgr/AddComment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *paymentMgrClient) ListPlans(ctx context.Context, in *common.Empty, opts ...grpc.CallOption) (*payment.Plans, error) {
	out := new(payment.Plans)
	err := c.cc.Invoke(ctx, "/header.PaymentMgr/ListPlans", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *paymentMgrClient) ExportInvoice(ctx context.Context, in *common.Id, opts ...grpc.CallOption) (*payment.String, error) {
	out := new(payment.String)
	err := c.cc.Invoke(ctx, "/header.PaymentMgr/ExportInvoice", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *paymentMgrClient) ConvertInvoiceToHtml(ctx context.Context, in *payment.Invoice, opts ...grpc.CallOption) (*payment.String, error) {
	out := new(payment.String)
	err := c.cc.Invoke(ctx, "/header.PaymentMgr/ConvertInvoiceToHtml", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *paymentMgrClient) GetExchangeRate(ctx context.Context, in *payment.ExchangeRate, opts ...grpc.CallOption) (*payment.ExchangeRate, error) {
	out := new(payment.ExchangeRate)
	err := c.cc.Invoke(ctx, "/header.PaymentMgr/GetExchangeRate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *paymentMgrClient) TransferMoney(ctx context.Context, in *payment.PayRequest, opts ...grpc.CallOption) (*payment.Bill, error) {
	out := new(payment.Bill)
	err := c.cc.Invoke(ctx, "/header.PaymentMgr/TransferMoney", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *paymentMgrClient) ListLogs(ctx context.Context, in *payment.ListLogsRequest, opts ...grpc.CallOption) (*payment.Logs, error) {
	out := new(payment.Logs)
	err := c.cc.Invoke(ctx, "/header.PaymentMgr/ListLogs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *paymentMgrClient) CreatePromotionCode(ctx context.Context, in *payment.PromotionCode, opts ...grpc.CallOption) (*payment.PromotionCode, error) {
	out := new(payment.PromotionCode)
	err := c.cc.Invoke(ctx, "/header.PaymentMgr/CreatePromotionCode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *paymentMgrClient) GetPromotionCode(ctx context.Context, in *payment.String, opts ...grpc.CallOption) (*payment.PromotionCode, error) {
	out := new(payment.PromotionCode)
	err := c.cc.Invoke(ctx, "/header.PaymentMgr/GetPromotionCode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *paymentMgrClient) UsePromotionCode(ctx context.Context, in *payment.PromotionCodeRequest, opts ...grpc.CallOption) (*common.Empty, error) {
	out := new(common.Empty)
	err := c.cc.Invoke(ctx, "/header.PaymentMgr/UsePromotionCode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *paymentMgrClient) ValidatePromotionCode(ctx context.Context, in *payment.PromotionCodeRequest, opts ...grpc.CallOption) (*payment.PromotionCode, error) {
	out := new(payment.PromotionCode)
	err := c.cc.Invoke(ctx, "/header.PaymentMgr/ValidatePromotionCode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *paymentMgrClient) ListPromotionCode(ctx context.Context, in *payment.ListPromotionCodeRequest, opts ...grpc.CallOption) (*payment.PromotionCodes, error) {
	out := new(payment.PromotionCodes)
	err := c.cc.Invoke(ctx, "/header.PaymentMgr/ListPromotionCode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *paymentMgrClient) DeletePromotionCode(ctx context.Context, in *common.Id, opts ...grpc.CallOption) (*common.Empty, error) {
	out := new(common.Empty)
	err := c.cc.Invoke(ctx, "/header.PaymentMgr/DeletePromotionCode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *paymentMgrClient) SearchReferral(ctx context.Context, in *payment.SearchReferredRequest, opts ...grpc.CallOption) (*payment.Referral, error) {
	out := new(payment.Referral)
	err := c.cc.Invoke(ctx, "/header.PaymentMgr/SearchReferral", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *paymentMgrClient) GetReferral(ctx context.Context, in *common.Id, opts ...grpc.CallOption) (*payment.Referral, error) {
	out := new(payment.Referral)
	err := c.cc.Invoke(ctx, "/header.PaymentMgr/GetReferral", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *paymentMgrClient) ListTopReferral(ctx context.Context, in *common.Empty, opts ...grpc.CallOption) (*payment.ReferralResponse, error) {
	out := new(payment.ReferralResponse)
	err := c.cc.Invoke(ctx, "/header.PaymentMgr/ListTopReferral", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *paymentMgrClient) UpdateReferral(ctx context.Context, in *payment.Referral, opts ...grpc.CallOption) (*payment.Referral, error) {
	out := new(payment.Referral)
	err := c.cc.Invoke(ctx, "/header.PaymentMgr/UpdateReferral", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *paymentMgrClient) ListAccountReferred(ctx context.Context, in *common.Id, opts ...grpc.CallOption) (*payment.LogAccountReferreds, error) {
	out := new(payment.LogAccountReferreds)
	err := c.cc.Invoke(ctx, "/header.PaymentMgr/ListAccountReferred", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *paymentMgrClient) ListBillByAccountReferred(ctx context.Context, in *common.Id, opts ...grpc.CallOption) (*payment.LogBillByAccountReferreds, error) {
	out := new(payment.LogBillByAccountReferreds)
	err := c.cc.Invoke(ctx, "/header.PaymentMgr/ListBillByAccountReferred", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *paymentMgrClient) ListPaidForAgentReferrer(ctx context.Context, in *common.Id, opts ...grpc.CallOption) (*payment.LogPaidForAgentReferrers, error) {
	out := new(payment.LogPaidForAgentReferrers)
	err := c.cc.Invoke(ctx, "/header.PaymentMgr/ListPaidForAgentReferrer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *paymentMgrClient) PaidForAgentReferrer(ctx context.Context, in *payment.LogPaidForAgentReferrer, opts ...grpc.CallOption) (*common.Empty, error) {
	out := new(common.Empty)
	err := c.cc.Invoke(ctx, "/header.PaymentMgr/PaidForAgentReferrer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PaymentMgrServer is the server API for PaymentMgr service.
type PaymentMgrServer interface {
	SearchSub(context.Context, *account.SearchSubRequest) (*account.AccSubs, error)
	Purchase(context.Context, *payment.Subscription) (*payment.Invoice, error)
	UpdateSubscription(context.Context, *payment.Subscription) (*payment.Subscription, error)
	GetSubscription(context.Context, *common.Id) (*payment.Subscription, error)
	AddPaymentMethod(context.Context, *payment.PaymentMethod) (*payment.PaymentMethod, error)
	UpdatePaymentMethod(context.Context, *payment.PaymentMethod) (*payment.PaymentMethod, error)
	DeletePaymentMethod(context.Context, *common.Id) (*common.Empty, error)
	ListPaymentMethods(context.Context, *common.Id) (*payment.PaymentMethods, error)
	Pay(context.Context, *payment.PayRequest) (*payment.Bill, error)
	ListInvoices(context.Context, *common.Id) (*payment.Invoices, error)
	CreateInvoice(context.Context, *payment.Invoice) (*payment.Invoice, error)
	UpdateInvoice(context.Context, *payment.Invoice) (*payment.Invoice, error)
	FilterInvoices(context.Context, *payment.ListInvoiceRequest) (*payment.Invoices, error)
	DraftInvoice(context.Context, *payment.Subscription) (*payment.Invoice, error)
	DiffSubscriptions(context.Context, *payment.DiffSubRequest) (*payment.Invoice, error)
	ListComments(context.Context, *payment.ListCommentsRequest) (*payment.Comments, error)
	AddComment(context.Context, *payment.Comment) (*payment.Comment, error)
	ListPlans(context.Context, *common.Empty) (*payment.Plans, error)
	ExportInvoice(context.Context, *common.Id) (*payment.String, error)
	ConvertInvoiceToHtml(context.Context, *payment.Invoice) (*payment.String, error)
	GetExchangeRate(context.Context, *payment.ExchangeRate) (*payment.ExchangeRate, error)
	TransferMoney(context.Context, *payment.PayRequest) (*payment.Bill, error)
	ListLogs(context.Context, *payment.ListLogsRequest) (*payment.Logs, error)
	CreatePromotionCode(context.Context, *payment.PromotionCode) (*payment.PromotionCode, error)
	GetPromotionCode(context.Context, *payment.String) (*payment.PromotionCode, error)
	UsePromotionCode(context.Context, *payment.PromotionCodeRequest) (*common.Empty, error)
	ValidatePromotionCode(context.Context, *payment.PromotionCodeRequest) (*payment.PromotionCode, error)
	ListPromotionCode(context.Context, *payment.ListPromotionCodeRequest) (*payment.PromotionCodes, error)
	DeletePromotionCode(context.Context, *common.Id) (*common.Empty, error)
	SearchReferral(context.Context, *payment.SearchReferredRequest) (*payment.Referral, error)
	GetReferral(context.Context, *common.Id) (*payment.Referral, error)
	ListTopReferral(context.Context, *common.Empty) (*payment.ReferralResponse, error)
	UpdateReferral(context.Context, *payment.Referral) (*payment.Referral, error)
	ListAccountReferred(context.Context, *common.Id) (*payment.LogAccountReferreds, error)
	ListBillByAccountReferred(context.Context, *common.Id) (*payment.LogBillByAccountReferreds, error)
	ListPaidForAgentReferrer(context.Context, *common.Id) (*payment.LogPaidForAgentReferrers, error)
	PaidForAgentReferrer(context.Context, *payment.LogPaidForAgentReferrer) (*common.Empty, error)
}

// UnimplementedPaymentMgrServer can be embedded to have forward compatible implementations.
type UnimplementedPaymentMgrServer struct {
}

func (*UnimplementedPaymentMgrServer) SearchSub(context.Context, *account.SearchSubRequest) (*account.AccSubs, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchSub not implemented")
}
func (*UnimplementedPaymentMgrServer) Purchase(context.Context, *payment.Subscription) (*payment.Invoice, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Purchase not implemented")
}
func (*UnimplementedPaymentMgrServer) UpdateSubscription(context.Context, *payment.Subscription) (*payment.Subscription, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSubscription not implemented")
}
func (*UnimplementedPaymentMgrServer) GetSubscription(context.Context, *common.Id) (*payment.Subscription, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSubscription not implemented")
}
func (*UnimplementedPaymentMgrServer) AddPaymentMethod(context.Context, *payment.PaymentMethod) (*payment.PaymentMethod, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddPaymentMethod not implemented")
}
func (*UnimplementedPaymentMgrServer) UpdatePaymentMethod(context.Context, *payment.PaymentMethod) (*payment.PaymentMethod, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePaymentMethod not implemented")
}
func (*UnimplementedPaymentMgrServer) DeletePaymentMethod(context.Context, *common.Id) (*common.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeletePaymentMethod not implemented")
}
func (*UnimplementedPaymentMgrServer) ListPaymentMethods(context.Context, *common.Id) (*payment.PaymentMethods, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListPaymentMethods not implemented")
}
func (*UnimplementedPaymentMgrServer) Pay(context.Context, *payment.PayRequest) (*payment.Bill, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Pay not implemented")
}
func (*UnimplementedPaymentMgrServer) ListInvoices(context.Context, *common.Id) (*payment.Invoices, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListInvoices not implemented")
}
func (*UnimplementedPaymentMgrServer) CreateInvoice(context.Context, *payment.Invoice) (*payment.Invoice, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateInvoice not implemented")
}
func (*UnimplementedPaymentMgrServer) UpdateInvoice(context.Context, *payment.Invoice) (*payment.Invoice, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateInvoice not implemented")
}
func (*UnimplementedPaymentMgrServer) FilterInvoices(context.Context, *payment.ListInvoiceRequest) (*payment.Invoices, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FilterInvoices not implemented")
}
func (*UnimplementedPaymentMgrServer) DraftInvoice(context.Context, *payment.Subscription) (*payment.Invoice, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DraftInvoice not implemented")
}
func (*UnimplementedPaymentMgrServer) DiffSubscriptions(context.Context, *payment.DiffSubRequest) (*payment.Invoice, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DiffSubscriptions not implemented")
}
func (*UnimplementedPaymentMgrServer) ListComments(context.Context, *payment.ListCommentsRequest) (*payment.Comments, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListComments not implemented")
}
func (*UnimplementedPaymentMgrServer) AddComment(context.Context, *payment.Comment) (*payment.Comment, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddComment not implemented")
}
func (*UnimplementedPaymentMgrServer) ListPlans(context.Context, *common.Empty) (*payment.Plans, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListPlans not implemented")
}
func (*UnimplementedPaymentMgrServer) ExportInvoice(context.Context, *common.Id) (*payment.String, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExportInvoice not implemented")
}
func (*UnimplementedPaymentMgrServer) ConvertInvoiceToHtml(context.Context, *payment.Invoice) (*payment.String, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConvertInvoiceToHtml not implemented")
}
func (*UnimplementedPaymentMgrServer) GetExchangeRate(context.Context, *payment.ExchangeRate) (*payment.ExchangeRate, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetExchangeRate not implemented")
}
func (*UnimplementedPaymentMgrServer) TransferMoney(context.Context, *payment.PayRequest) (*payment.Bill, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TransferMoney not implemented")
}
func (*UnimplementedPaymentMgrServer) ListLogs(context.Context, *payment.ListLogsRequest) (*payment.Logs, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListLogs not implemented")
}
func (*UnimplementedPaymentMgrServer) CreatePromotionCode(context.Context, *payment.PromotionCode) (*payment.PromotionCode, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePromotionCode not implemented")
}
func (*UnimplementedPaymentMgrServer) GetPromotionCode(context.Context, *payment.String) (*payment.PromotionCode, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPromotionCode not implemented")
}
func (*UnimplementedPaymentMgrServer) UsePromotionCode(context.Context, *payment.PromotionCodeRequest) (*common.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UsePromotionCode not implemented")
}
func (*UnimplementedPaymentMgrServer) ValidatePromotionCode(context.Context, *payment.PromotionCodeRequest) (*payment.PromotionCode, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ValidatePromotionCode not implemented")
}
func (*UnimplementedPaymentMgrServer) ListPromotionCode(context.Context, *payment.ListPromotionCodeRequest) (*payment.PromotionCodes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListPromotionCode not implemented")
}
func (*UnimplementedPaymentMgrServer) DeletePromotionCode(context.Context, *common.Id) (*common.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeletePromotionCode not implemented")
}
func (*UnimplementedPaymentMgrServer) SearchReferral(context.Context, *payment.SearchReferredRequest) (*payment.Referral, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchReferral not implemented")
}
func (*UnimplementedPaymentMgrServer) GetReferral(context.Context, *common.Id) (*payment.Referral, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetReferral not implemented")
}
func (*UnimplementedPaymentMgrServer) ListTopReferral(context.Context, *common.Empty) (*payment.ReferralResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListTopReferral not implemented")
}
func (*UnimplementedPaymentMgrServer) UpdateReferral(context.Context, *payment.Referral) (*payment.Referral, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateReferral not implemented")
}
func (*UnimplementedPaymentMgrServer) ListAccountReferred(context.Context, *common.Id) (*payment.LogAccountReferreds, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAccountReferred not implemented")
}
func (*UnimplementedPaymentMgrServer) ListBillByAccountReferred(context.Context, *common.Id) (*payment.LogBillByAccountReferreds, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListBillByAccountReferred not implemented")
}
func (*UnimplementedPaymentMgrServer) ListPaidForAgentReferrer(context.Context, *common.Id) (*payment.LogPaidForAgentReferrers, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListPaidForAgentReferrer not implemented")
}
func (*UnimplementedPaymentMgrServer) PaidForAgentReferrer(context.Context, *payment.LogPaidForAgentReferrer) (*common.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PaidForAgentReferrer not implemented")
}

func RegisterPaymentMgrServer(s *grpc.Server, srv PaymentMgrServer) {
	s.RegisterService(&_PaymentMgr_serviceDesc, srv)
}

func _PaymentMgr_SearchSub_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(account.SearchSubRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaymentMgrServer).SearchSub(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.PaymentMgr/SearchSub",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaymentMgrServer).SearchSub(ctx, req.(*account.SearchSubRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PaymentMgr_Purchase_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(payment.Subscription)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaymentMgrServer).Purchase(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.PaymentMgr/Purchase",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaymentMgrServer).Purchase(ctx, req.(*payment.Subscription))
	}
	return interceptor(ctx, in, info, handler)
}

func _PaymentMgr_UpdateSubscription_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(payment.Subscription)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaymentMgrServer).UpdateSubscription(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.PaymentMgr/UpdateSubscription",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaymentMgrServer).UpdateSubscription(ctx, req.(*payment.Subscription))
	}
	return interceptor(ctx, in, info, handler)
}

func _PaymentMgr_GetSubscription_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaymentMgrServer).GetSubscription(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.PaymentMgr/GetSubscription",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaymentMgrServer).GetSubscription(ctx, req.(*common.Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _PaymentMgr_AddPaymentMethod_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(payment.PaymentMethod)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaymentMgrServer).AddPaymentMethod(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.PaymentMgr/AddPaymentMethod",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaymentMgrServer).AddPaymentMethod(ctx, req.(*payment.PaymentMethod))
	}
	return interceptor(ctx, in, info, handler)
}

func _PaymentMgr_UpdatePaymentMethod_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(payment.PaymentMethod)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaymentMgrServer).UpdatePaymentMethod(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.PaymentMgr/UpdatePaymentMethod",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaymentMgrServer).UpdatePaymentMethod(ctx, req.(*payment.PaymentMethod))
	}
	return interceptor(ctx, in, info, handler)
}

func _PaymentMgr_DeletePaymentMethod_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaymentMgrServer).DeletePaymentMethod(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.PaymentMgr/DeletePaymentMethod",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaymentMgrServer).DeletePaymentMethod(ctx, req.(*common.Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _PaymentMgr_ListPaymentMethods_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaymentMgrServer).ListPaymentMethods(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.PaymentMgr/ListPaymentMethods",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaymentMgrServer).ListPaymentMethods(ctx, req.(*common.Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _PaymentMgr_Pay_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(payment.PayRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaymentMgrServer).Pay(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.PaymentMgr/Pay",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaymentMgrServer).Pay(ctx, req.(*payment.PayRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PaymentMgr_ListInvoices_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaymentMgrServer).ListInvoices(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.PaymentMgr/ListInvoices",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaymentMgrServer).ListInvoices(ctx, req.(*common.Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _PaymentMgr_CreateInvoice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(payment.Invoice)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaymentMgrServer).CreateInvoice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.PaymentMgr/CreateInvoice",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaymentMgrServer).CreateInvoice(ctx, req.(*payment.Invoice))
	}
	return interceptor(ctx, in, info, handler)
}

func _PaymentMgr_UpdateInvoice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(payment.Invoice)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaymentMgrServer).UpdateInvoice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.PaymentMgr/UpdateInvoice",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaymentMgrServer).UpdateInvoice(ctx, req.(*payment.Invoice))
	}
	return interceptor(ctx, in, info, handler)
}

func _PaymentMgr_FilterInvoices_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(payment.ListInvoiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaymentMgrServer).FilterInvoices(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.PaymentMgr/FilterInvoices",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaymentMgrServer).FilterInvoices(ctx, req.(*payment.ListInvoiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PaymentMgr_DraftInvoice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(payment.Subscription)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaymentMgrServer).DraftInvoice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.PaymentMgr/DraftInvoice",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaymentMgrServer).DraftInvoice(ctx, req.(*payment.Subscription))
	}
	return interceptor(ctx, in, info, handler)
}

func _PaymentMgr_DiffSubscriptions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(payment.DiffSubRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaymentMgrServer).DiffSubscriptions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.PaymentMgr/DiffSubscriptions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaymentMgrServer).DiffSubscriptions(ctx, req.(*payment.DiffSubRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PaymentMgr_ListComments_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(payment.ListCommentsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaymentMgrServer).ListComments(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.PaymentMgr/ListComments",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaymentMgrServer).ListComments(ctx, req.(*payment.ListCommentsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PaymentMgr_AddComment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(payment.Comment)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaymentMgrServer).AddComment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.PaymentMgr/AddComment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaymentMgrServer).AddComment(ctx, req.(*payment.Comment))
	}
	return interceptor(ctx, in, info, handler)
}

func _PaymentMgr_ListPlans_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaymentMgrServer).ListPlans(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.PaymentMgr/ListPlans",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaymentMgrServer).ListPlans(ctx, req.(*common.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _PaymentMgr_ExportInvoice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaymentMgrServer).ExportInvoice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.PaymentMgr/ExportInvoice",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaymentMgrServer).ExportInvoice(ctx, req.(*common.Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _PaymentMgr_ConvertInvoiceToHtml_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(payment.Invoice)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaymentMgrServer).ConvertInvoiceToHtml(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.PaymentMgr/ConvertInvoiceToHtml",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaymentMgrServer).ConvertInvoiceToHtml(ctx, req.(*payment.Invoice))
	}
	return interceptor(ctx, in, info, handler)
}

func _PaymentMgr_GetExchangeRate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(payment.ExchangeRate)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaymentMgrServer).GetExchangeRate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.PaymentMgr/GetExchangeRate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaymentMgrServer).GetExchangeRate(ctx, req.(*payment.ExchangeRate))
	}
	return interceptor(ctx, in, info, handler)
}

func _PaymentMgr_TransferMoney_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(payment.PayRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaymentMgrServer).TransferMoney(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.PaymentMgr/TransferMoney",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaymentMgrServer).TransferMoney(ctx, req.(*payment.PayRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PaymentMgr_ListLogs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(payment.ListLogsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaymentMgrServer).ListLogs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.PaymentMgr/ListLogs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaymentMgrServer).ListLogs(ctx, req.(*payment.ListLogsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PaymentMgr_CreatePromotionCode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(payment.PromotionCode)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaymentMgrServer).CreatePromotionCode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.PaymentMgr/CreatePromotionCode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaymentMgrServer).CreatePromotionCode(ctx, req.(*payment.PromotionCode))
	}
	return interceptor(ctx, in, info, handler)
}

func _PaymentMgr_GetPromotionCode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(payment.String)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaymentMgrServer).GetPromotionCode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.PaymentMgr/GetPromotionCode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaymentMgrServer).GetPromotionCode(ctx, req.(*payment.String))
	}
	return interceptor(ctx, in, info, handler)
}

func _PaymentMgr_UsePromotionCode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(payment.PromotionCodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaymentMgrServer).UsePromotionCode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.PaymentMgr/UsePromotionCode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaymentMgrServer).UsePromotionCode(ctx, req.(*payment.PromotionCodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PaymentMgr_ValidatePromotionCode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(payment.PromotionCodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaymentMgrServer).ValidatePromotionCode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.PaymentMgr/ValidatePromotionCode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaymentMgrServer).ValidatePromotionCode(ctx, req.(*payment.PromotionCodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PaymentMgr_ListPromotionCode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(payment.ListPromotionCodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaymentMgrServer).ListPromotionCode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.PaymentMgr/ListPromotionCode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaymentMgrServer).ListPromotionCode(ctx, req.(*payment.ListPromotionCodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PaymentMgr_DeletePromotionCode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaymentMgrServer).DeletePromotionCode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.PaymentMgr/DeletePromotionCode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaymentMgrServer).DeletePromotionCode(ctx, req.(*common.Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _PaymentMgr_SearchReferral_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(payment.SearchReferredRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaymentMgrServer).SearchReferral(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.PaymentMgr/SearchReferral",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaymentMgrServer).SearchReferral(ctx, req.(*payment.SearchReferredRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PaymentMgr_GetReferral_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaymentMgrServer).GetReferral(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.PaymentMgr/GetReferral",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaymentMgrServer).GetReferral(ctx, req.(*common.Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _PaymentMgr_ListTopReferral_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaymentMgrServer).ListTopReferral(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.PaymentMgr/ListTopReferral",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaymentMgrServer).ListTopReferral(ctx, req.(*common.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _PaymentMgr_UpdateReferral_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(payment.Referral)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaymentMgrServer).UpdateReferral(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.PaymentMgr/UpdateReferral",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaymentMgrServer).UpdateReferral(ctx, req.(*payment.Referral))
	}
	return interceptor(ctx, in, info, handler)
}

func _PaymentMgr_ListAccountReferred_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaymentMgrServer).ListAccountReferred(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.PaymentMgr/ListAccountReferred",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaymentMgrServer).ListAccountReferred(ctx, req.(*common.Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _PaymentMgr_ListBillByAccountReferred_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaymentMgrServer).ListBillByAccountReferred(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.PaymentMgr/ListBillByAccountReferred",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaymentMgrServer).ListBillByAccountReferred(ctx, req.(*common.Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _PaymentMgr_ListPaidForAgentReferrer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaymentMgrServer).ListPaidForAgentReferrer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.PaymentMgr/ListPaidForAgentReferrer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaymentMgrServer).ListPaidForAgentReferrer(ctx, req.(*common.Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _PaymentMgr_PaidForAgentReferrer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(payment.LogPaidForAgentReferrer)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaymentMgrServer).PaidForAgentReferrer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.PaymentMgr/PaidForAgentReferrer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaymentMgrServer).PaidForAgentReferrer(ctx, req.(*payment.LogPaidForAgentReferrer))
	}
	return interceptor(ctx, in, info, handler)
}

var _PaymentMgr_serviceDesc = grpc.ServiceDesc{
	ServiceName: "header.PaymentMgr",
	HandlerType: (*PaymentMgrServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SearchSub",
			Handler:    _PaymentMgr_SearchSub_Handler,
		},
		{
			MethodName: "Purchase",
			Handler:    _PaymentMgr_Purchase_Handler,
		},
		{
			MethodName: "UpdateSubscription",
			Handler:    _PaymentMgr_UpdateSubscription_Handler,
		},
		{
			MethodName: "GetSubscription",
			Handler:    _PaymentMgr_GetSubscription_Handler,
		},
		{
			MethodName: "AddPaymentMethod",
			Handler:    _PaymentMgr_AddPaymentMethod_Handler,
		},
		{
			MethodName: "UpdatePaymentMethod",
			Handler:    _PaymentMgr_UpdatePaymentMethod_Handler,
		},
		{
			MethodName: "DeletePaymentMethod",
			Handler:    _PaymentMgr_DeletePaymentMethod_Handler,
		},
		{
			MethodName: "ListPaymentMethods",
			Handler:    _PaymentMgr_ListPaymentMethods_Handler,
		},
		{
			MethodName: "Pay",
			Handler:    _PaymentMgr_Pay_Handler,
		},
		{
			MethodName: "ListInvoices",
			Handler:    _PaymentMgr_ListInvoices_Handler,
		},
		{
			MethodName: "CreateInvoice",
			Handler:    _PaymentMgr_CreateInvoice_Handler,
		},
		{
			MethodName: "UpdateInvoice",
			Handler:    _PaymentMgr_UpdateInvoice_Handler,
		},
		{
			MethodName: "FilterInvoices",
			Handler:    _PaymentMgr_FilterInvoices_Handler,
		},
		{
			MethodName: "DraftInvoice",
			Handler:    _PaymentMgr_DraftInvoice_Handler,
		},
		{
			MethodName: "DiffSubscriptions",
			Handler:    _PaymentMgr_DiffSubscriptions_Handler,
		},
		{
			MethodName: "ListComments",
			Handler:    _PaymentMgr_ListComments_Handler,
		},
		{
			MethodName: "AddComment",
			Handler:    _PaymentMgr_AddComment_Handler,
		},
		{
			MethodName: "ListPlans",
			Handler:    _PaymentMgr_ListPlans_Handler,
		},
		{
			MethodName: "ExportInvoice",
			Handler:    _PaymentMgr_ExportInvoice_Handler,
		},
		{
			MethodName: "ConvertInvoiceToHtml",
			Handler:    _PaymentMgr_ConvertInvoiceToHtml_Handler,
		},
		{
			MethodName: "GetExchangeRate",
			Handler:    _PaymentMgr_GetExchangeRate_Handler,
		},
		{
			MethodName: "TransferMoney",
			Handler:    _PaymentMgr_TransferMoney_Handler,
		},
		{
			MethodName: "ListLogs",
			Handler:    _PaymentMgr_ListLogs_Handler,
		},
		{
			MethodName: "CreatePromotionCode",
			Handler:    _PaymentMgr_CreatePromotionCode_Handler,
		},
		{
			MethodName: "GetPromotionCode",
			Handler:    _PaymentMgr_GetPromotionCode_Handler,
		},
		{
			MethodName: "UsePromotionCode",
			Handler:    _PaymentMgr_UsePromotionCode_Handler,
		},
		{
			MethodName: "ValidatePromotionCode",
			Handler:    _PaymentMgr_ValidatePromotionCode_Handler,
		},
		{
			MethodName: "ListPromotionCode",
			Handler:    _PaymentMgr_ListPromotionCode_Handler,
		},
		{
			MethodName: "DeletePromotionCode",
			Handler:    _PaymentMgr_DeletePromotionCode_Handler,
		},
		{
			MethodName: "SearchReferral",
			Handler:    _PaymentMgr_SearchReferral_Handler,
		},
		{
			MethodName: "GetReferral",
			Handler:    _PaymentMgr_GetReferral_Handler,
		},
		{
			MethodName: "ListTopReferral",
			Handler:    _PaymentMgr_ListTopReferral_Handler,
		},
		{
			MethodName: "UpdateReferral",
			Handler:    _PaymentMgr_UpdateReferral_Handler,
		},
		{
			MethodName: "ListAccountReferred",
			Handler:    _PaymentMgr_ListAccountReferred_Handler,
		},
		{
			MethodName: "ListBillByAccountReferred",
			Handler:    _PaymentMgr_ListBillByAccountReferred_Handler,
		},
		{
			MethodName: "ListPaidForAgentReferrer",
			Handler:    _PaymentMgr_ListPaidForAgentReferrer_Handler,
		},
		{
			MethodName: "PaidForAgentReferrer",
			Handler:    _PaymentMgr_PaidForAgentReferrer_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "service.proto",
}

// PubsubClient is the client API for Pubsub service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type PubsubClient interface {
	Publish(ctx context.Context, in *PublishMessage, opts ...grpc.CallOption) (*common.Empty, error)
}

type pubsubClient struct {
	cc grpc.ClientConnInterface
}

func NewPubsubClient(cc grpc.ClientConnInterface) PubsubClient {
	return &pubsubClient{cc}
}

func (c *pubsubClient) Publish(ctx context.Context, in *PublishMessage, opts ...grpc.CallOption) (*common.Empty, error) {
	out := new(common.Empty)
	err := c.cc.Invoke(ctx, "/header.Pubsub/Publish", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PubsubServer is the server API for Pubsub service.
type PubsubServer interface {
	Publish(context.Context, *PublishMessage) (*common.Empty, error)
}

// UnimplementedPubsubServer can be embedded to have forward compatible implementations.
type UnimplementedPubsubServer struct {
}

func (*UnimplementedPubsubServer) Publish(context.Context, *PublishMessage) (*common.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Publish not implemented")
}

func RegisterPubsubServer(s *grpc.Server, srv PubsubServer) {
	s.RegisterService(&_Pubsub_serviceDesc, srv)
}

func _Pubsub_Publish_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PublishMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PubsubServer).Publish(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.Pubsub/Publish",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PubsubServer).Publish(ctx, req.(*PublishMessage))
	}
	return interceptor(ctx, in, info, handler)
}

var _Pubsub_serviceDesc = grpc.ServiceDesc{
	ServiceName: "header.Pubsub",
	HandlerType: (*PubsubServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Publish",
			Handler:    _Pubsub_Publish_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "service.proto",
}

// RealtimeClient is the client API for Realtime service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type RealtimeClient interface {
	ShardSend(ctx context.Context, in *PublishMessage, opts ...grpc.CallOption) (*common.Empty, error)
}

type realtimeClient struct {
	cc grpc.ClientConnInterface
}

func NewRealtimeClient(cc grpc.ClientConnInterface) RealtimeClient {
	return &realtimeClient{cc}
}

func (c *realtimeClient) ShardSend(ctx context.Context, in *PublishMessage, opts ...grpc.CallOption) (*common.Empty, error) {
	out := new(common.Empty)
	err := c.cc.Invoke(ctx, "/header.Realtime/ShardSend", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RealtimeServer is the server API for Realtime service.
type RealtimeServer interface {
	ShardSend(context.Context, *PublishMessage) (*common.Empty, error)
}

// UnimplementedRealtimeServer can be embedded to have forward compatible implementations.
type UnimplementedRealtimeServer struct {
}

func (*UnimplementedRealtimeServer) ShardSend(context.Context, *PublishMessage) (*common.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ShardSend not implemented")
}

func RegisterRealtimeServer(s *grpc.Server, srv RealtimeServer) {
	s.RegisterService(&_Realtime_serviceDesc, srv)
}

func _Realtime_ShardSend_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PublishMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RealtimeServer).ShardSend(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.Realtime/ShardSend",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RealtimeServer).ShardSend(ctx, req.(*PublishMessage))
	}
	return interceptor(ctx, in, info, handler)
}

var _Realtime_serviceDesc = grpc.ServiceDesc{
	ServiceName: "header.Realtime",
	HandlerType: (*RealtimeServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ShardSend",
			Handler:    _Realtime_ShardSend_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "service.proto",
}

// WidgetServiceClient is the client API for WidgetService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type WidgetServiceClient interface {
	Read(ctx context.Context, in *common.Id, opts ...grpc.CallOption) (*WidgetSetting, error)
	Update(ctx context.Context, in *WidgetSetting, opts ...grpc.CallOption) (*WidgetSetting, error)
	ReadUserSetting(ctx context.Context, in *common.Id, opts ...grpc.CallOption) (*WidgetUserSetting, error)
	ReadCampaign(ctx context.Context, in *common.Id, opts ...grpc.CallOption) (*Campaign, error)
	ListCampaigns(ctx context.Context, in *common.Id, opts ...grpc.CallOption) (*Campaigns, error)
	CreateCampaign(ctx context.Context, in *Campaign, opts ...grpc.CallOption) (*Campaign, error)
	UpdateCampaign(ctx context.Context, in *Campaign, opts ...grpc.CallOption) (*Campaign, error)
	DeleteCampaign(ctx context.Context, in *Campaign, opts ...grpc.CallOption) (*common.Empty, error)
	SubmitImpression(ctx context.Context, in *Impression, opts ...grpc.CallOption) (*Impression, error)
	SubmitConversion(ctx context.Context, in *Conversion, opts ...grpc.CallOption) (*Conversion, error)
	SubmitUserCampaignStatus(ctx context.Context, in *UserCampaignStatus, opts ...grpc.CallOption) (*UserCampaignStatus, error)
	ReportCampaign(ctx context.Context, in *ReportCampaignRequest, opts ...grpc.CallOption) (*ReportCampaignResponse, error)
	ListConversions(ctx context.Context, in *ConversionRequest, opts ...grpc.CallOption) (*Conversions, error)
	ExportConversions(ctx context.Context, in *ConversionRequest, opts ...grpc.CallOption) (*ConversionsExported, error)
	UploadImage(ctx context.Context, in *UploadedImage, opts ...grpc.CallOption) (*UploadedImage, error)
	ListUploadedImage(ctx context.Context, in *common.Id, opts ...grpc.CallOption) (*UploadedImages, error)
	DeleteUploadedImage(ctx context.Context, in *UploadedImage, opts ...grpc.CallOption) (*common.Empty, error)
}

type widgetServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewWidgetServiceClient(cc grpc.ClientConnInterface) WidgetServiceClient {
	return &widgetServiceClient{cc}
}

func (c *widgetServiceClient) Read(ctx context.Context, in *common.Id, opts ...grpc.CallOption) (*WidgetSetting, error) {
	out := new(WidgetSetting)
	err := c.cc.Invoke(ctx, "/header.WidgetService/Read", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *widgetServiceClient) Update(ctx context.Context, in *WidgetSetting, opts ...grpc.CallOption) (*WidgetSetting, error) {
	out := new(WidgetSetting)
	err := c.cc.Invoke(ctx, "/header.WidgetService/Update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *widgetServiceClient) ReadUserSetting(ctx context.Context, in *common.Id, opts ...grpc.CallOption) (*WidgetUserSetting, error) {
	out := new(WidgetUserSetting)
	err := c.cc.Invoke(ctx, "/header.WidgetService/ReadUserSetting", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *widgetServiceClient) ReadCampaign(ctx context.Context, in *common.Id, opts ...grpc.CallOption) (*Campaign, error) {
	out := new(Campaign)
	err := c.cc.Invoke(ctx, "/header.WidgetService/ReadCampaign", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *widgetServiceClient) ListCampaigns(ctx context.Context, in *common.Id, opts ...grpc.CallOption) (*Campaigns, error) {
	out := new(Campaigns)
	err := c.cc.Invoke(ctx, "/header.WidgetService/ListCampaigns", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *widgetServiceClient) CreateCampaign(ctx context.Context, in *Campaign, opts ...grpc.CallOption) (*Campaign, error) {
	out := new(Campaign)
	err := c.cc.Invoke(ctx, "/header.WidgetService/CreateCampaign", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *widgetServiceClient) UpdateCampaign(ctx context.Context, in *Campaign, opts ...grpc.CallOption) (*Campaign, error) {
	out := new(Campaign)
	err := c.cc.Invoke(ctx, "/header.WidgetService/UpdateCampaign", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *widgetServiceClient) DeleteCampaign(ctx context.Context, in *Campaign, opts ...grpc.CallOption) (*common.Empty, error) {
	out := new(common.Empty)
	err := c.cc.Invoke(ctx, "/header.WidgetService/DeleteCampaign", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *widgetServiceClient) SubmitImpression(ctx context.Context, in *Impression, opts ...grpc.CallOption) (*Impression, error) {
	out := new(Impression)
	err := c.cc.Invoke(ctx, "/header.WidgetService/SubmitImpression", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *widgetServiceClient) SubmitConversion(ctx context.Context, in *Conversion, opts ...grpc.CallOption) (*Conversion, error) {
	out := new(Conversion)
	err := c.cc.Invoke(ctx, "/header.WidgetService/SubmitConversion", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *widgetServiceClient) SubmitUserCampaignStatus(ctx context.Context, in *UserCampaignStatus, opts ...grpc.CallOption) (*UserCampaignStatus, error) {
	out := new(UserCampaignStatus)
	err := c.cc.Invoke(ctx, "/header.WidgetService/SubmitUserCampaignStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *widgetServiceClient) ReportCampaign(ctx context.Context, in *ReportCampaignRequest, opts ...grpc.CallOption) (*ReportCampaignResponse, error) {
	out := new(ReportCampaignResponse)
	err := c.cc.Invoke(ctx, "/header.WidgetService/ReportCampaign", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *widgetServiceClient) ListConversions(ctx context.Context, in *ConversionRequest, opts ...grpc.CallOption) (*Conversions, error) {
	out := new(Conversions)
	err := c.cc.Invoke(ctx, "/header.WidgetService/ListConversions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *widgetServiceClient) ExportConversions(ctx context.Context, in *ConversionRequest, opts ...grpc.CallOption) (*ConversionsExported, error) {
	out := new(ConversionsExported)
	err := c.cc.Invoke(ctx, "/header.WidgetService/ExportConversions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *widgetServiceClient) UploadImage(ctx context.Context, in *UploadedImage, opts ...grpc.CallOption) (*UploadedImage, error) {
	out := new(UploadedImage)
	err := c.cc.Invoke(ctx, "/header.WidgetService/UploadImage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *widgetServiceClient) ListUploadedImage(ctx context.Context, in *common.Id, opts ...grpc.CallOption) (*UploadedImages, error) {
	out := new(UploadedImages)
	err := c.cc.Invoke(ctx, "/header.WidgetService/ListUploadedImage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *widgetServiceClient) DeleteUploadedImage(ctx context.Context, in *UploadedImage, opts ...grpc.CallOption) (*common.Empty, error) {
	out := new(common.Empty)
	err := c.cc.Invoke(ctx, "/header.WidgetService/DeleteUploadedImage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// WidgetServiceServer is the server API for WidgetService service.
type WidgetServiceServer interface {
	Read(context.Context, *common.Id) (*WidgetSetting, error)
	Update(context.Context, *WidgetSetting) (*WidgetSetting, error)
	ReadUserSetting(context.Context, *common.Id) (*WidgetUserSetting, error)
	ReadCampaign(context.Context, *common.Id) (*Campaign, error)
	ListCampaigns(context.Context, *common.Id) (*Campaigns, error)
	CreateCampaign(context.Context, *Campaign) (*Campaign, error)
	UpdateCampaign(context.Context, *Campaign) (*Campaign, error)
	DeleteCampaign(context.Context, *Campaign) (*common.Empty, error)
	SubmitImpression(context.Context, *Impression) (*Impression, error)
	SubmitConversion(context.Context, *Conversion) (*Conversion, error)
	SubmitUserCampaignStatus(context.Context, *UserCampaignStatus) (*UserCampaignStatus, error)
	ReportCampaign(context.Context, *ReportCampaignRequest) (*ReportCampaignResponse, error)
	ListConversions(context.Context, *ConversionRequest) (*Conversions, error)
	ExportConversions(context.Context, *ConversionRequest) (*ConversionsExported, error)
	UploadImage(context.Context, *UploadedImage) (*UploadedImage, error)
	ListUploadedImage(context.Context, *common.Id) (*UploadedImages, error)
	DeleteUploadedImage(context.Context, *UploadedImage) (*common.Empty, error)
}

// UnimplementedWidgetServiceServer can be embedded to have forward compatible implementations.
type UnimplementedWidgetServiceServer struct {
}

func (*UnimplementedWidgetServiceServer) Read(context.Context, *common.Id) (*WidgetSetting, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Read not implemented")
}
func (*UnimplementedWidgetServiceServer) Update(context.Context, *WidgetSetting) (*WidgetSetting, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (*UnimplementedWidgetServiceServer) ReadUserSetting(context.Context, *common.Id) (*WidgetUserSetting, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadUserSetting not implemented")
}
func (*UnimplementedWidgetServiceServer) ReadCampaign(context.Context, *common.Id) (*Campaign, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadCampaign not implemented")
}
func (*UnimplementedWidgetServiceServer) ListCampaigns(context.Context, *common.Id) (*Campaigns, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListCampaigns not implemented")
}
func (*UnimplementedWidgetServiceServer) CreateCampaign(context.Context, *Campaign) (*Campaign, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCampaign not implemented")
}
func (*UnimplementedWidgetServiceServer) UpdateCampaign(context.Context, *Campaign) (*Campaign, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCampaign not implemented")
}
func (*UnimplementedWidgetServiceServer) DeleteCampaign(context.Context, *Campaign) (*common.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteCampaign not implemented")
}
func (*UnimplementedWidgetServiceServer) SubmitImpression(context.Context, *Impression) (*Impression, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubmitImpression not implemented")
}
func (*UnimplementedWidgetServiceServer) SubmitConversion(context.Context, *Conversion) (*Conversion, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubmitConversion not implemented")
}
func (*UnimplementedWidgetServiceServer) SubmitUserCampaignStatus(context.Context, *UserCampaignStatus) (*UserCampaignStatus, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubmitUserCampaignStatus not implemented")
}
func (*UnimplementedWidgetServiceServer) ReportCampaign(context.Context, *ReportCampaignRequest) (*ReportCampaignResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReportCampaign not implemented")
}
func (*UnimplementedWidgetServiceServer) ListConversions(context.Context, *ConversionRequest) (*Conversions, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListConversions not implemented")
}
func (*UnimplementedWidgetServiceServer) ExportConversions(context.Context, *ConversionRequest) (*ConversionsExported, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExportConversions not implemented")
}
func (*UnimplementedWidgetServiceServer) UploadImage(context.Context, *UploadedImage) (*UploadedImage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UploadImage not implemented")
}
func (*UnimplementedWidgetServiceServer) ListUploadedImage(context.Context, *common.Id) (*UploadedImages, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListUploadedImage not implemented")
}
func (*UnimplementedWidgetServiceServer) DeleteUploadedImage(context.Context, *UploadedImage) (*common.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteUploadedImage not implemented")
}

func RegisterWidgetServiceServer(s *grpc.Server, srv WidgetServiceServer) {
	s.RegisterService(&_WidgetService_serviceDesc, srv)
}

func _WidgetService_Read_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WidgetServiceServer).Read(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.WidgetService/Read",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WidgetServiceServer).Read(ctx, req.(*common.Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _WidgetService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WidgetSetting)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WidgetServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.WidgetService/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WidgetServiceServer).Update(ctx, req.(*WidgetSetting))
	}
	return interceptor(ctx, in, info, handler)
}

func _WidgetService_ReadUserSetting_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WidgetServiceServer).ReadUserSetting(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.WidgetService/ReadUserSetting",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WidgetServiceServer).ReadUserSetting(ctx, req.(*common.Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _WidgetService_ReadCampaign_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WidgetServiceServer).ReadCampaign(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.WidgetService/ReadCampaign",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WidgetServiceServer).ReadCampaign(ctx, req.(*common.Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _WidgetService_ListCampaigns_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WidgetServiceServer).ListCampaigns(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.WidgetService/ListCampaigns",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WidgetServiceServer).ListCampaigns(ctx, req.(*common.Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _WidgetService_CreateCampaign_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Campaign)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WidgetServiceServer).CreateCampaign(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.WidgetService/CreateCampaign",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WidgetServiceServer).CreateCampaign(ctx, req.(*Campaign))
	}
	return interceptor(ctx, in, info, handler)
}

func _WidgetService_UpdateCampaign_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Campaign)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WidgetServiceServer).UpdateCampaign(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.WidgetService/UpdateCampaign",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WidgetServiceServer).UpdateCampaign(ctx, req.(*Campaign))
	}
	return interceptor(ctx, in, info, handler)
}

func _WidgetService_DeleteCampaign_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Campaign)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WidgetServiceServer).DeleteCampaign(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.WidgetService/DeleteCampaign",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WidgetServiceServer).DeleteCampaign(ctx, req.(*Campaign))
	}
	return interceptor(ctx, in, info, handler)
}

func _WidgetService_SubmitImpression_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Impression)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WidgetServiceServer).SubmitImpression(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.WidgetService/SubmitImpression",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WidgetServiceServer).SubmitImpression(ctx, req.(*Impression))
	}
	return interceptor(ctx, in, info, handler)
}

func _WidgetService_SubmitConversion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Conversion)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WidgetServiceServer).SubmitConversion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.WidgetService/SubmitConversion",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WidgetServiceServer).SubmitConversion(ctx, req.(*Conversion))
	}
	return interceptor(ctx, in, info, handler)
}

func _WidgetService_SubmitUserCampaignStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserCampaignStatus)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WidgetServiceServer).SubmitUserCampaignStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.WidgetService/SubmitUserCampaignStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WidgetServiceServer).SubmitUserCampaignStatus(ctx, req.(*UserCampaignStatus))
	}
	return interceptor(ctx, in, info, handler)
}

func _WidgetService_ReportCampaign_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReportCampaignRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WidgetServiceServer).ReportCampaign(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.WidgetService/ReportCampaign",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WidgetServiceServer).ReportCampaign(ctx, req.(*ReportCampaignRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WidgetService_ListConversions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConversionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WidgetServiceServer).ListConversions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.WidgetService/ListConversions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WidgetServiceServer).ListConversions(ctx, req.(*ConversionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WidgetService_ExportConversions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConversionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WidgetServiceServer).ExportConversions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.WidgetService/ExportConversions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WidgetServiceServer).ExportConversions(ctx, req.(*ConversionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WidgetService_UploadImage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UploadedImage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WidgetServiceServer).UploadImage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.WidgetService/UploadImage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WidgetServiceServer).UploadImage(ctx, req.(*UploadedImage))
	}
	return interceptor(ctx, in, info, handler)
}

func _WidgetService_ListUploadedImage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WidgetServiceServer).ListUploadedImage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.WidgetService/ListUploadedImage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WidgetServiceServer).ListUploadedImage(ctx, req.(*common.Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _WidgetService_DeleteUploadedImage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UploadedImage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WidgetServiceServer).DeleteUploadedImage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.WidgetService/DeleteUploadedImage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WidgetServiceServer).DeleteUploadedImage(ctx, req.(*UploadedImage))
	}
	return interceptor(ctx, in, info, handler)
}

var _WidgetService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "header.WidgetService",
	HandlerType: (*WidgetServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Read",
			Handler:    _WidgetService_Read_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _WidgetService_Update_Handler,
		},
		{
			MethodName: "ReadUserSetting",
			Handler:    _WidgetService_ReadUserSetting_Handler,
		},
		{
			MethodName: "ReadCampaign",
			Handler:    _WidgetService_ReadCampaign_Handler,
		},
		{
			MethodName: "ListCampaigns",
			Handler:    _WidgetService_ListCampaigns_Handler,
		},
		{
			MethodName: "CreateCampaign",
			Handler:    _WidgetService_CreateCampaign_Handler,
		},
		{
			MethodName: "UpdateCampaign",
			Handler:    _WidgetService_UpdateCampaign_Handler,
		},
		{
			MethodName: "DeleteCampaign",
			Handler:    _WidgetService_DeleteCampaign_Handler,
		},
		{
			MethodName: "SubmitImpression",
			Handler:    _WidgetService_SubmitImpression_Handler,
		},
		{
			MethodName: "SubmitConversion",
			Handler:    _WidgetService_SubmitConversion_Handler,
		},
		{
			MethodName: "SubmitUserCampaignStatus",
			Handler:    _WidgetService_SubmitUserCampaignStatus_Handler,
		},
		{
			MethodName: "ReportCampaign",
			Handler:    _WidgetService_ReportCampaign_Handler,
		},
		{
			MethodName: "ListConversions",
			Handler:    _WidgetService_ListConversions_Handler,
		},
		{
			MethodName: "ExportConversions",
			Handler:    _WidgetService_ExportConversions_Handler,
		},
		{
			MethodName: "UploadImage",
			Handler:    _WidgetService_UploadImage_Handler,
		},
		{
			MethodName: "ListUploadedImage",
			Handler:    _WidgetService_ListUploadedImage_Handler,
		},
		{
			MethodName: "DeleteUploadedImage",
			Handler:    _WidgetService_DeleteUploadedImage_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "service.proto",
}

// SearchClient is the client API for Search service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type SearchClient interface {
	SearchUsers(ctx context.Context, in *SearchUsersRequest, opts ...grpc.CallOption) (*SearchUsersResponse, error)
	SearchNotes(ctx context.Context, in *SearchNotesRequest, opts ...grpc.CallOption) (*SearchNotesResponse, error)
}

type searchClient struct {
	cc grpc.ClientConnInterface
}

func NewSearchClient(cc grpc.ClientConnInterface) SearchClient {
	return &searchClient{cc}
}

func (c *searchClient) SearchUsers(ctx context.Context, in *SearchUsersRequest, opts ...grpc.CallOption) (*SearchUsersResponse, error) {
	out := new(SearchUsersResponse)
	err := c.cc.Invoke(ctx, "/header.Search/SearchUsers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *searchClient) SearchNotes(ctx context.Context, in *SearchNotesRequest, opts ...grpc.CallOption) (*SearchNotesResponse, error) {
	out := new(SearchNotesResponse)
	err := c.cc.Invoke(ctx, "/header.Search/SearchNotes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SearchServer is the server API for Search service.
type SearchServer interface {
	SearchUsers(context.Context, *SearchUsersRequest) (*SearchUsersResponse, error)
	SearchNotes(context.Context, *SearchNotesRequest) (*SearchNotesResponse, error)
}

// UnimplementedSearchServer can be embedded to have forward compatible implementations.
type UnimplementedSearchServer struct {
}

func (*UnimplementedSearchServer) SearchUsers(context.Context, *SearchUsersRequest) (*SearchUsersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchUsers not implemented")
}
func (*UnimplementedSearchServer) SearchNotes(context.Context, *SearchNotesRequest) (*SearchNotesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchNotes not implemented")
}

func RegisterSearchServer(s *grpc.Server, srv SearchServer) {
	s.RegisterService(&_Search_serviceDesc, srv)
}

func _Search_SearchUsers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchUsersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SearchServer).SearchUsers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.Search/SearchUsers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SearchServer).SearchUsers(ctx, req.(*SearchUsersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Search_SearchNotes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchNotesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SearchServer).SearchNotes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.Search/SearchNotes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SearchServer).SearchNotes(ctx, req.(*SearchNotesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Search_serviceDesc = grpc.ServiceDesc{
	ServiceName: "header.Search",
	HandlerType: (*SearchServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SearchUsers",
			Handler:    _Search_SearchUsers_Handler,
		},
		{
			MethodName: "SearchNotes",
			Handler:    _Search_SearchNotes_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "service.proto",
}

// BqreportClient is the client API for Bqreport service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type BqreportClient interface {
	AggregateConversations(ctx context.Context, in *bqreport.ConversationFilter, opts ...grpc.CallOption) (*bqreport.ConversationReport, error)
	AggregateConversationRates(ctx context.Context, in *bqreport.DimensionFilter, opts ...grpc.CallOption) (*bqreport.ConversationRateReport, error)
	AggregateConversationTags(ctx context.Context, in *bqreport.DimensionFilter, opts ...grpc.CallOption) (*bqreport.ConversationTagReport, error)
	AggregateConversationAgents(ctx context.Context, in *bqreport.ConversationAgentFilter, opts ...grpc.CallOption) (*bqreport.ConversationAgentReport, error)
	AggregateMessageOfAgents(ctx context.Context, in *bqreport.DimensionFilter, opts ...grpc.CallOption) (*bqreport.MessageOfAgentReport, error)
	AggregateAgentAvailabilities(ctx context.Context, in *bqreport.DimensionFilter, opts ...grpc.CallOption) (*bqreport.AgentAvailabilityReport, error)
}

type bqreportClient struct {
	cc grpc.ClientConnInterface
}

func NewBqreportClient(cc grpc.ClientConnInterface) BqreportClient {
	return &bqreportClient{cc}
}

func (c *bqreportClient) AggregateConversations(ctx context.Context, in *bqreport.ConversationFilter, opts ...grpc.CallOption) (*bqreport.ConversationReport, error) {
	out := new(bqreport.ConversationReport)
	err := c.cc.Invoke(ctx, "/header.Bqreport/AggregateConversations", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bqreportClient) AggregateConversationRates(ctx context.Context, in *bqreport.DimensionFilter, opts ...grpc.CallOption) (*bqreport.ConversationRateReport, error) {
	out := new(bqreport.ConversationRateReport)
	err := c.cc.Invoke(ctx, "/header.Bqreport/AggregateConversationRates", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bqreportClient) AggregateConversationTags(ctx context.Context, in *bqreport.DimensionFilter, opts ...grpc.CallOption) (*bqreport.ConversationTagReport, error) {
	out := new(bqreport.ConversationTagReport)
	err := c.cc.Invoke(ctx, "/header.Bqreport/AggregateConversationTags", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bqreportClient) AggregateConversationAgents(ctx context.Context, in *bqreport.ConversationAgentFilter, opts ...grpc.CallOption) (*bqreport.ConversationAgentReport, error) {
	out := new(bqreport.ConversationAgentReport)
	err := c.cc.Invoke(ctx, "/header.Bqreport/AggregateConversationAgents", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bqreportClient) AggregateMessageOfAgents(ctx context.Context, in *bqreport.DimensionFilter, opts ...grpc.CallOption) (*bqreport.MessageOfAgentReport, error) {
	out := new(bqreport.MessageOfAgentReport)
	err := c.cc.Invoke(ctx, "/header.Bqreport/AggregateMessageOfAgents", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bqreportClient) AggregateAgentAvailabilities(ctx context.Context, in *bqreport.DimensionFilter, opts ...grpc.CallOption) (*bqreport.AgentAvailabilityReport, error) {
	out := new(bqreport.AgentAvailabilityReport)
	err := c.cc.Invoke(ctx, "/header.Bqreport/AggregateAgentAvailabilities", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BqreportServer is the server API for Bqreport service.
type BqreportServer interface {
	AggregateConversations(context.Context, *bqreport.ConversationFilter) (*bqreport.ConversationReport, error)
	AggregateConversationRates(context.Context, *bqreport.DimensionFilter) (*bqreport.ConversationRateReport, error)
	AggregateConversationTags(context.Context, *bqreport.DimensionFilter) (*bqreport.ConversationTagReport, error)
	AggregateConversationAgents(context.Context, *bqreport.ConversationAgentFilter) (*bqreport.ConversationAgentReport, error)
	AggregateMessageOfAgents(context.Context, *bqreport.DimensionFilter) (*bqreport.MessageOfAgentReport, error)
	AggregateAgentAvailabilities(context.Context, *bqreport.DimensionFilter) (*bqreport.AgentAvailabilityReport, error)
}

// UnimplementedBqreportServer can be embedded to have forward compatible implementations.
type UnimplementedBqreportServer struct {
}

func (*UnimplementedBqreportServer) AggregateConversations(context.Context, *bqreport.ConversationFilter) (*bqreport.ConversationReport, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AggregateConversations not implemented")
}
func (*UnimplementedBqreportServer) AggregateConversationRates(context.Context, *bqreport.DimensionFilter) (*bqreport.ConversationRateReport, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AggregateConversationRates not implemented")
}
func (*UnimplementedBqreportServer) AggregateConversationTags(context.Context, *bqreport.DimensionFilter) (*bqreport.ConversationTagReport, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AggregateConversationTags not implemented")
}
func (*UnimplementedBqreportServer) AggregateConversationAgents(context.Context, *bqreport.ConversationAgentFilter) (*bqreport.ConversationAgentReport, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AggregateConversationAgents not implemented")
}
func (*UnimplementedBqreportServer) AggregateMessageOfAgents(context.Context, *bqreport.DimensionFilter) (*bqreport.MessageOfAgentReport, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AggregateMessageOfAgents not implemented")
}
func (*UnimplementedBqreportServer) AggregateAgentAvailabilities(context.Context, *bqreport.DimensionFilter) (*bqreport.AgentAvailabilityReport, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AggregateAgentAvailabilities not implemented")
}

func RegisterBqreportServer(s *grpc.Server, srv BqreportServer) {
	s.RegisterService(&_Bqreport_serviceDesc, srv)
}

func _Bqreport_AggregateConversations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(bqreport.ConversationFilter)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BqreportServer).AggregateConversations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.Bqreport/AggregateConversations",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BqreportServer).AggregateConversations(ctx, req.(*bqreport.ConversationFilter))
	}
	return interceptor(ctx, in, info, handler)
}

func _Bqreport_AggregateConversationRates_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(bqreport.DimensionFilter)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BqreportServer).AggregateConversationRates(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.Bqreport/AggregateConversationRates",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BqreportServer).AggregateConversationRates(ctx, req.(*bqreport.DimensionFilter))
	}
	return interceptor(ctx, in, info, handler)
}

func _Bqreport_AggregateConversationTags_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(bqreport.DimensionFilter)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BqreportServer).AggregateConversationTags(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.Bqreport/AggregateConversationTags",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BqreportServer).AggregateConversationTags(ctx, req.(*bqreport.DimensionFilter))
	}
	return interceptor(ctx, in, info, handler)
}

func _Bqreport_AggregateConversationAgents_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(bqreport.ConversationAgentFilter)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BqreportServer).AggregateConversationAgents(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.Bqreport/AggregateConversationAgents",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BqreportServer).AggregateConversationAgents(ctx, req.(*bqreport.ConversationAgentFilter))
	}
	return interceptor(ctx, in, info, handler)
}

func _Bqreport_AggregateMessageOfAgents_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(bqreport.DimensionFilter)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BqreportServer).AggregateMessageOfAgents(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.Bqreport/AggregateMessageOfAgents",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BqreportServer).AggregateMessageOfAgents(ctx, req.(*bqreport.DimensionFilter))
	}
	return interceptor(ctx, in, info, handler)
}

func _Bqreport_AggregateAgentAvailabilities_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(bqreport.DimensionFilter)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BqreportServer).AggregateAgentAvailabilities(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.Bqreport/AggregateAgentAvailabilities",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BqreportServer).AggregateAgentAvailabilities(ctx, req.(*bqreport.DimensionFilter))
	}
	return interceptor(ctx, in, info, handler)
}

var _Bqreport_serviceDesc = grpc.ServiceDesc{
	ServiceName: "header.Bqreport",
	HandlerType: (*BqreportServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AggregateConversations",
			Handler:    _Bqreport_AggregateConversations_Handler,
		},
		{
			MethodName: "AggregateConversationRates",
			Handler:    _Bqreport_AggregateConversationRates_Handler,
		},
		{
			MethodName: "AggregateConversationTags",
			Handler:    _Bqreport_AggregateConversationTags_Handler,
		},
		{
			MethodName: "AggregateConversationAgents",
			Handler:    _Bqreport_AggregateConversationAgents_Handler,
		},
		{
			MethodName: "AggregateMessageOfAgents",
			Handler:    _Bqreport_AggregateMessageOfAgents_Handler,
		},
		{
			MethodName: "AggregateAgentAvailabilities",
			Handler:    _Bqreport_AggregateAgentAvailabilities_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "service.proto",
}

// BizbotClient is the client API for Bizbot service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type BizbotClient interface {
	ListBots(ctx context.Context, in *common.Id, opts ...grpc.CallOption) (*Bots, error)
	GetBot(ctx context.Context, in *common.Id, opts ...grpc.CallOption) (*Bot, error)
	UpdateBotRunState(ctx context.Context, in *Bot, opts ...grpc.CallOption) (*Bot, error)
	CreateBot(ctx context.Context, in *Bot, opts ...grpc.CallOption) (*Bot, error)
	UpdateBot(ctx context.Context, in *Bot, opts ...grpc.CallOption) (*Bot, error)
	DeleteBot(ctx context.Context, in *common.Id, opts ...grpc.CallOption) (*common.Empty, error)
	OnEvent(ctx context.Context, in *RunRequest, opts ...grpc.CallOption) (*common.Empty, error)
	StartBot(ctx context.Context, in *RunRequest, opts ...grpc.CallOption) (*common.Empty, error)
	StopBot(ctx context.Context, in *RunRequest, opts ...grpc.CallOption) (*common.Empty, error)
	TryAction(ctx context.Context, in *RunRequest, opts ...grpc.CallOption) (*common.Empty, error)
	DoAction(ctx context.Context, in *RunRequest, opts ...grpc.CallOption) (*Actions, error)
	ReportBot(ctx context.Context, in *ReportBotRequest, opts ...grpc.CallOption) (*ReportBotResponse, error)
	ListObjects(ctx context.Context, in *ListObjectsRequest, opts ...grpc.CallOption) (*ListObjectsResponse, error)
	CreateBotRevision(ctx context.Context, in *Bot, opts ...grpc.CallOption) (*Bot, error)
	ListBotRevisions(ctx context.Context, in *common.Id, opts ...grpc.CallOption) (*Bots, error)
}

type bizbotClient struct {
	cc grpc.ClientConnInterface
}

func NewBizbotClient(cc grpc.ClientConnInterface) BizbotClient {
	return &bizbotClient{cc}
}

func (c *bizbotClient) ListBots(ctx context.Context, in *common.Id, opts ...grpc.CallOption) (*Bots, error) {
	out := new(Bots)
	err := c.cc.Invoke(ctx, "/header.Bizbot/ListBots", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bizbotClient) GetBot(ctx context.Context, in *common.Id, opts ...grpc.CallOption) (*Bot, error) {
	out := new(Bot)
	err := c.cc.Invoke(ctx, "/header.Bizbot/GetBot", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bizbotClient) UpdateBotRunState(ctx context.Context, in *Bot, opts ...grpc.CallOption) (*Bot, error) {
	out := new(Bot)
	err := c.cc.Invoke(ctx, "/header.Bizbot/UpdateBotRunState", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bizbotClient) CreateBot(ctx context.Context, in *Bot, opts ...grpc.CallOption) (*Bot, error) {
	out := new(Bot)
	err := c.cc.Invoke(ctx, "/header.Bizbot/CreateBot", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bizbotClient) UpdateBot(ctx context.Context, in *Bot, opts ...grpc.CallOption) (*Bot, error) {
	out := new(Bot)
	err := c.cc.Invoke(ctx, "/header.Bizbot/UpdateBot", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bizbotClient) DeleteBot(ctx context.Context, in *common.Id, opts ...grpc.CallOption) (*common.Empty, error) {
	out := new(common.Empty)
	err := c.cc.Invoke(ctx, "/header.Bizbot/DeleteBot", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bizbotClient) OnEvent(ctx context.Context, in *RunRequest, opts ...grpc.CallOption) (*common.Empty, error) {
	out := new(common.Empty)
	err := c.cc.Invoke(ctx, "/header.Bizbot/OnEvent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bizbotClient) StartBot(ctx context.Context, in *RunRequest, opts ...grpc.CallOption) (*common.Empty, error) {
	out := new(common.Empty)
	err := c.cc.Invoke(ctx, "/header.Bizbot/StartBot", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bizbotClient) StopBot(ctx context.Context, in *RunRequest, opts ...grpc.CallOption) (*common.Empty, error) {
	out := new(common.Empty)
	err := c.cc.Invoke(ctx, "/header.Bizbot/StopBot", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bizbotClient) TryAction(ctx context.Context, in *RunRequest, opts ...grpc.CallOption) (*common.Empty, error) {
	out := new(common.Empty)
	err := c.cc.Invoke(ctx, "/header.Bizbot/TryAction", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bizbotClient) DoAction(ctx context.Context, in *RunRequest, opts ...grpc.CallOption) (*Actions, error) {
	out := new(Actions)
	err := c.cc.Invoke(ctx, "/header.Bizbot/DoAction", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bizbotClient) ReportBot(ctx context.Context, in *ReportBotRequest, opts ...grpc.CallOption) (*ReportBotResponse, error) {
	out := new(ReportBotResponse)
	err := c.cc.Invoke(ctx, "/header.Bizbot/ReportBot", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bizbotClient) ListObjects(ctx context.Context, in *ListObjectsRequest, opts ...grpc.CallOption) (*ListObjectsResponse, error) {
	out := new(ListObjectsResponse)
	err := c.cc.Invoke(ctx, "/header.Bizbot/ListObjects", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bizbotClient) CreateBotRevision(ctx context.Context, in *Bot, opts ...grpc.CallOption) (*Bot, error) {
	out := new(Bot)
	err := c.cc.Invoke(ctx, "/header.Bizbot/CreateBotRevision", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bizbotClient) ListBotRevisions(ctx context.Context, in *common.Id, opts ...grpc.CallOption) (*Bots, error) {
	out := new(Bots)
	err := c.cc.Invoke(ctx, "/header.Bizbot/ListBotRevisions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BizbotServer is the server API for Bizbot service.
type BizbotServer interface {
	ListBots(context.Context, *common.Id) (*Bots, error)
	GetBot(context.Context, *common.Id) (*Bot, error)
	UpdateBotRunState(context.Context, *Bot) (*Bot, error)
	CreateBot(context.Context, *Bot) (*Bot, error)
	UpdateBot(context.Context, *Bot) (*Bot, error)
	DeleteBot(context.Context, *common.Id) (*common.Empty, error)
	OnEvent(context.Context, *RunRequest) (*common.Empty, error)
	StartBot(context.Context, *RunRequest) (*common.Empty, error)
	StopBot(context.Context, *RunRequest) (*common.Empty, error)
	TryAction(context.Context, *RunRequest) (*common.Empty, error)
	DoAction(context.Context, *RunRequest) (*Actions, error)
	ReportBot(context.Context, *ReportBotRequest) (*ReportBotResponse, error)
	ListObjects(context.Context, *ListObjectsRequest) (*ListObjectsResponse, error)
	CreateBotRevision(context.Context, *Bot) (*Bot, error)
	ListBotRevisions(context.Context, *common.Id) (*Bots, error)
}

// UnimplementedBizbotServer can be embedded to have forward compatible implementations.
type UnimplementedBizbotServer struct {
}

func (*UnimplementedBizbotServer) ListBots(context.Context, *common.Id) (*Bots, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListBots not implemented")
}
func (*UnimplementedBizbotServer) GetBot(context.Context, *common.Id) (*Bot, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBot not implemented")
}
func (*UnimplementedBizbotServer) UpdateBotRunState(context.Context, *Bot) (*Bot, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateBotRunState not implemented")
}
func (*UnimplementedBizbotServer) CreateBot(context.Context, *Bot) (*Bot, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateBot not implemented")
}
func (*UnimplementedBizbotServer) UpdateBot(context.Context, *Bot) (*Bot, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateBot not implemented")
}
func (*UnimplementedBizbotServer) DeleteBot(context.Context, *common.Id) (*common.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteBot not implemented")
}
func (*UnimplementedBizbotServer) OnEvent(context.Context, *RunRequest) (*common.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OnEvent not implemented")
}
func (*UnimplementedBizbotServer) StartBot(context.Context, *RunRequest) (*common.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartBot not implemented")
}
func (*UnimplementedBizbotServer) StopBot(context.Context, *RunRequest) (*common.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StopBot not implemented")
}
func (*UnimplementedBizbotServer) TryAction(context.Context, *RunRequest) (*common.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TryAction not implemented")
}
func (*UnimplementedBizbotServer) DoAction(context.Context, *RunRequest) (*Actions, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DoAction not implemented")
}
func (*UnimplementedBizbotServer) ReportBot(context.Context, *ReportBotRequest) (*ReportBotResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReportBot not implemented")
}
func (*UnimplementedBizbotServer) ListObjects(context.Context, *ListObjectsRequest) (*ListObjectsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListObjects not implemented")
}
func (*UnimplementedBizbotServer) CreateBotRevision(context.Context, *Bot) (*Bot, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateBotRevision not implemented")
}
func (*UnimplementedBizbotServer) ListBotRevisions(context.Context, *common.Id) (*Bots, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListBotRevisions not implemented")
}

func RegisterBizbotServer(s *grpc.Server, srv BizbotServer) {
	s.RegisterService(&_Bizbot_serviceDesc, srv)
}

func _Bizbot_ListBots_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BizbotServer).ListBots(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.Bizbot/ListBots",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BizbotServer).ListBots(ctx, req.(*common.Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _Bizbot_GetBot_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BizbotServer).GetBot(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.Bizbot/GetBot",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BizbotServer).GetBot(ctx, req.(*common.Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _Bizbot_UpdateBotRunState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Bot)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BizbotServer).UpdateBotRunState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.Bizbot/UpdateBotRunState",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BizbotServer).UpdateBotRunState(ctx, req.(*Bot))
	}
	return interceptor(ctx, in, info, handler)
}

func _Bizbot_CreateBot_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Bot)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BizbotServer).CreateBot(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.Bizbot/CreateBot",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BizbotServer).CreateBot(ctx, req.(*Bot))
	}
	return interceptor(ctx, in, info, handler)
}

func _Bizbot_UpdateBot_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Bot)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BizbotServer).UpdateBot(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.Bizbot/UpdateBot",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BizbotServer).UpdateBot(ctx, req.(*Bot))
	}
	return interceptor(ctx, in, info, handler)
}

func _Bizbot_DeleteBot_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BizbotServer).DeleteBot(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.Bizbot/DeleteBot",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BizbotServer).DeleteBot(ctx, req.(*common.Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _Bizbot_OnEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RunRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BizbotServer).OnEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.Bizbot/OnEvent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BizbotServer).OnEvent(ctx, req.(*RunRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Bizbot_StartBot_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RunRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BizbotServer).StartBot(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.Bizbot/StartBot",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BizbotServer).StartBot(ctx, req.(*RunRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Bizbot_StopBot_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RunRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BizbotServer).StopBot(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.Bizbot/StopBot",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BizbotServer).StopBot(ctx, req.(*RunRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Bizbot_TryAction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RunRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BizbotServer).TryAction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.Bizbot/TryAction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BizbotServer).TryAction(ctx, req.(*RunRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Bizbot_DoAction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RunRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BizbotServer).DoAction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.Bizbot/DoAction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BizbotServer).DoAction(ctx, req.(*RunRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Bizbot_ReportBot_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReportBotRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BizbotServer).ReportBot(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.Bizbot/ReportBot",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BizbotServer).ReportBot(ctx, req.(*ReportBotRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Bizbot_ListObjects_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListObjectsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BizbotServer).ListObjects(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.Bizbot/ListObjects",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BizbotServer).ListObjects(ctx, req.(*ListObjectsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Bizbot_CreateBotRevision_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Bot)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BizbotServer).CreateBotRevision(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.Bizbot/CreateBotRevision",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BizbotServer).CreateBotRevision(ctx, req.(*Bot))
	}
	return interceptor(ctx, in, info, handler)
}

func _Bizbot_ListBotRevisions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BizbotServer).ListBotRevisions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.Bizbot/ListBotRevisions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BizbotServer).ListBotRevisions(ctx, req.(*common.Id))
	}
	return interceptor(ctx, in, info, handler)
}

var _Bizbot_serviceDesc = grpc.ServiceDesc{
	ServiceName: "header.Bizbot",
	HandlerType: (*BizbotServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListBots",
			Handler:    _Bizbot_ListBots_Handler,
		},
		{
			MethodName: "GetBot",
			Handler:    _Bizbot_GetBot_Handler,
		},
		{
			MethodName: "UpdateBotRunState",
			Handler:    _Bizbot_UpdateBotRunState_Handler,
		},
		{
			MethodName: "CreateBot",
			Handler:    _Bizbot_CreateBot_Handler,
		},
		{
			MethodName: "UpdateBot",
			Handler:    _Bizbot_UpdateBot_Handler,
		},
		{
			MethodName: "DeleteBot",
			Handler:    _Bizbot_DeleteBot_Handler,
		},
		{
			MethodName: "OnEvent",
			Handler:    _Bizbot_OnEvent_Handler,
		},
		{
			MethodName: "StartBot",
			Handler:    _Bizbot_StartBot_Handler,
		},
		{
			MethodName: "StopBot",
			Handler:    _Bizbot_StopBot_Handler,
		},
		{
			MethodName: "TryAction",
			Handler:    _Bizbot_TryAction_Handler,
		},
		{
			MethodName: "DoAction",
			Handler:    _Bizbot_DoAction_Handler,
		},
		{
			MethodName: "ReportBot",
			Handler:    _Bizbot_ReportBot_Handler,
		},
		{
			MethodName: "ListObjects",
			Handler:    _Bizbot_ListObjects_Handler,
		},
		{
			MethodName: "CreateBotRevision",
			Handler:    _Bizbot_CreateBotRevision_Handler,
		},
		{
			MethodName: "ListBotRevisions",
			Handler:    _Bizbot_ListBotRevisions_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "service.proto",
}

// SendbackClient is the client API for Sendback service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type SendbackClient interface {
	CreateWebhook(ctx context.Context, in *Webhook, opts ...grpc.CallOption) (*Webhook, error)
	PingWebhook(ctx context.Context, in *common.Id, opts ...grpc.CallOption) (*WebhookTestResult, error)
	DeleteWebhook(ctx context.Context, in *common.Id, opts ...grpc.CallOption) (*common.Empty, error)
	ListWebhooks(ctx context.Context, in *common.Id, opts ...grpc.CallOption) (*Webhooks, error)
	ReadWebhook(ctx context.Context, in *common.Id, opts ...grpc.CallOption) (*Webhook, error)
	UpdateWebhook(ctx context.Context, in *Webhook, opts ...grpc.CallOption) (*Webhook, error)
	ListRecentIndexDeliveries(ctx context.Context, in *RecentIndexDeliveryRequest, opts ...grpc.CallOption) (*WebhookDeliveries, error)
	SendWebhookEvent(ctx context.Context, in *Event, opts ...grpc.CallOption) (*common.Empty, error)
}

type sendbackClient struct {
	cc grpc.ClientConnInterface
}

func NewSendbackClient(cc grpc.ClientConnInterface) SendbackClient {
	return &sendbackClient{cc}
}

func (c *sendbackClient) CreateWebhook(ctx context.Context, in *Webhook, opts ...grpc.CallOption) (*Webhook, error) {
	out := new(Webhook)
	err := c.cc.Invoke(ctx, "/header.Sendback/CreateWebhook", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sendbackClient) PingWebhook(ctx context.Context, in *common.Id, opts ...grpc.CallOption) (*WebhookTestResult, error) {
	out := new(WebhookTestResult)
	err := c.cc.Invoke(ctx, "/header.Sendback/PingWebhook", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sendbackClient) DeleteWebhook(ctx context.Context, in *common.Id, opts ...grpc.CallOption) (*common.Empty, error) {
	out := new(common.Empty)
	err := c.cc.Invoke(ctx, "/header.Sendback/DeleteWebhook", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sendbackClient) ListWebhooks(ctx context.Context, in *common.Id, opts ...grpc.CallOption) (*Webhooks, error) {
	out := new(Webhooks)
	err := c.cc.Invoke(ctx, "/header.Sendback/ListWebhooks", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sendbackClient) ReadWebhook(ctx context.Context, in *common.Id, opts ...grpc.CallOption) (*Webhook, error) {
	out := new(Webhook)
	err := c.cc.Invoke(ctx, "/header.Sendback/ReadWebhook", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sendbackClient) UpdateWebhook(ctx context.Context, in *Webhook, opts ...grpc.CallOption) (*Webhook, error) {
	out := new(Webhook)
	err := c.cc.Invoke(ctx, "/header.Sendback/UpdateWebhook", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sendbackClient) ListRecentIndexDeliveries(ctx context.Context, in *RecentIndexDeliveryRequest, opts ...grpc.CallOption) (*WebhookDeliveries, error) {
	out := new(WebhookDeliveries)
	err := c.cc.Invoke(ctx, "/header.Sendback/ListRecentIndexDeliveries", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sendbackClient) SendWebhookEvent(ctx context.Context, in *Event, opts ...grpc.CallOption) (*common.Empty, error) {
	out := new(common.Empty)
	err := c.cc.Invoke(ctx, "/header.Sendback/SendWebhookEvent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SendbackServer is the server API for Sendback service.
type SendbackServer interface {
	CreateWebhook(context.Context, *Webhook) (*Webhook, error)
	PingWebhook(context.Context, *common.Id) (*WebhookTestResult, error)
	DeleteWebhook(context.Context, *common.Id) (*common.Empty, error)
	ListWebhooks(context.Context, *common.Id) (*Webhooks, error)
	ReadWebhook(context.Context, *common.Id) (*Webhook, error)
	UpdateWebhook(context.Context, *Webhook) (*Webhook, error)
	ListRecentIndexDeliveries(context.Context, *RecentIndexDeliveryRequest) (*WebhookDeliveries, error)
	SendWebhookEvent(context.Context, *Event) (*common.Empty, error)
}

// UnimplementedSendbackServer can be embedded to have forward compatible implementations.
type UnimplementedSendbackServer struct {
}

func (*UnimplementedSendbackServer) CreateWebhook(context.Context, *Webhook) (*Webhook, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateWebhook not implemented")
}
func (*UnimplementedSendbackServer) PingWebhook(context.Context, *common.Id) (*WebhookTestResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PingWebhook not implemented")
}
func (*UnimplementedSendbackServer) DeleteWebhook(context.Context, *common.Id) (*common.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteWebhook not implemented")
}
func (*UnimplementedSendbackServer) ListWebhooks(context.Context, *common.Id) (*Webhooks, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListWebhooks not implemented")
}
func (*UnimplementedSendbackServer) ReadWebhook(context.Context, *common.Id) (*Webhook, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadWebhook not implemented")
}
func (*UnimplementedSendbackServer) UpdateWebhook(context.Context, *Webhook) (*Webhook, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateWebhook not implemented")
}
func (*UnimplementedSendbackServer) ListRecentIndexDeliveries(context.Context, *RecentIndexDeliveryRequest) (*WebhookDeliveries, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListRecentIndexDeliveries not implemented")
}
func (*UnimplementedSendbackServer) SendWebhookEvent(context.Context, *Event) (*common.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendWebhookEvent not implemented")
}

func RegisterSendbackServer(s *grpc.Server, srv SendbackServer) {
	s.RegisterService(&_Sendback_serviceDesc, srv)
}

func _Sendback_CreateWebhook_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Webhook)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SendbackServer).CreateWebhook(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.Sendback/CreateWebhook",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SendbackServer).CreateWebhook(ctx, req.(*Webhook))
	}
	return interceptor(ctx, in, info, handler)
}

func _Sendback_PingWebhook_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SendbackServer).PingWebhook(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.Sendback/PingWebhook",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SendbackServer).PingWebhook(ctx, req.(*common.Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _Sendback_DeleteWebhook_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SendbackServer).DeleteWebhook(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.Sendback/DeleteWebhook",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SendbackServer).DeleteWebhook(ctx, req.(*common.Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _Sendback_ListWebhooks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SendbackServer).ListWebhooks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.Sendback/ListWebhooks",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SendbackServer).ListWebhooks(ctx, req.(*common.Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _Sendback_ReadWebhook_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SendbackServer).ReadWebhook(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.Sendback/ReadWebhook",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SendbackServer).ReadWebhook(ctx, req.(*common.Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _Sendback_UpdateWebhook_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Webhook)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SendbackServer).UpdateWebhook(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.Sendback/UpdateWebhook",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SendbackServer).UpdateWebhook(ctx, req.(*Webhook))
	}
	return interceptor(ctx, in, info, handler)
}

func _Sendback_ListRecentIndexDeliveries_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RecentIndexDeliveryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SendbackServer).ListRecentIndexDeliveries(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.Sendback/ListRecentIndexDeliveries",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SendbackServer).ListRecentIndexDeliveries(ctx, req.(*RecentIndexDeliveryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Sendback_SendWebhookEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Event)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SendbackServer).SendWebhookEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.Sendback/SendWebhookEvent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SendbackServer).SendWebhookEvent(ctx, req.(*Event))
	}
	return interceptor(ctx, in, info, handler)
}

var _Sendback_serviceDesc = grpc.ServiceDesc{
	ServiceName: "header.Sendback",
	HandlerType: (*SendbackServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateWebhook",
			Handler:    _Sendback_CreateWebhook_Handler,
		},
		{
			MethodName: "PingWebhook",
			Handler:    _Sendback_PingWebhook_Handler,
		},
		{
			MethodName: "DeleteWebhook",
			Handler:    _Sendback_DeleteWebhook_Handler,
		},
		{
			MethodName: "ListWebhooks",
			Handler:    _Sendback_ListWebhooks_Handler,
		},
		{
			MethodName: "ReadWebhook",
			Handler:    _Sendback_ReadWebhook_Handler,
		},
		{
			MethodName: "UpdateWebhook",
			Handler:    _Sendback_UpdateWebhook_Handler,
		},
		{
			MethodName: "ListRecentIndexDeliveries",
			Handler:    _Sendback_ListRecentIndexDeliveries_Handler,
		},
		{
			MethodName: "SendWebhookEvent",
			Handler:    _Sendback_SendWebhookEvent_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "service.proto",
}
